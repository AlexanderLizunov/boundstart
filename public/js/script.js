function changeSlide(e,i){var t=$(e+" .active-slide").index(),o=$(e+" .slide"),s=o.length;makeSlideActive("next"==i?t==s-1?o.eq(0):o.eq(t+1):0==t?o.eq(s-1):o.eq(t-1))}function makeSlideActive(e){e.addClass("active-slide").siblings().removeClass("active-slide")}function detectSwipe(e,i,t){swipe_det=new Object,swipe_det.sX=0,swipe_det.eX=0;var o="";element=document.getElementById(e),element.addEventListener("touchstart",function(e){var i=e.touches[0];swipe_det.sX=i.screenX},!1),element.addEventListener("touchmove",function(e){var i=e.touches[0];swipe_det.eX=i.screenX},!1),element.addEventListener("touchend",function(){(swipe_det.eX-50>swipe_det.sX||swipe_det.eX+50<swipe_det.sX)&&swipe_det.eX>0&&(o=swipe_det.eX>swipe_det.sX?"prev":"next"),""!=o&&"function"==typeof t&&(i?t(i,o):(t(".works-slider-block",o),t(".slider-content-block",o))),o="",swipe_det.sX=0,swipe_det.sY=0,swipe_det.eX=0,swipe_det.eY=0},!1)}function myFunction(){var e,i=document.getElementById("triangle"),t=document.getElementById("st2"),o=i.getTotalLength(),s=$(window).height()/2,n=$("#circle-1").offset(),r=$("#circle-2").offset(),l=$("#circle-3").offset(),a=$("#circle-4").offset(),d=$("#circle-5").offset();$("#circle-6").offset();i.style.strokeDasharray=o,i.style.strokeDashoffset=o,1024==window.innerWidth?window.pageYOffset+1.1*s>a.top?(e=window.pageYOffset-n.top+1.35*s,i.style.strokeDashoffset=o-1.35*e,-1!=navigator.userAgent.indexOf("Mac OS X")&&o-1.35*e<=0&&(i.style.strokeDashoffset=0,$("line").is(".st2")&&(t.style.stroke="#EE44A4")),1==$("#circle-4").hasClass("circle-4__active")&&setTimeout(function(){$("#circle-5").addClass("circle-5__active")},600)):window.pageYOffset+1.1*s>=n.top&&(e=window.pageYOffset-n.top+1.3*s,i.style.strokeDashoffset=o-e):window.pageYOffset+1.1*s>a.top?(e=window.pageYOffset-n.top+1.1*s,i.style.strokeDashoffset=o-1.2*e,-1!=navigator.userAgent.indexOf("Mac OS X")&&o-1.2*e<=0&&(i.style.strokeDashoffset=0,$("line").is(".st2")&&(t.style.stroke="#EE44A4")),1==$("#circle-4").hasClass("circle-4__active")&&setTimeout(function(){$("#circle-5").addClass("circle-5__active")},600)):window.pageYOffset+1.1*s>=n.top&&(e=window.pageYOffset-n.top+1.1*s,i.style.strokeDashoffset=o-e),0==window.pageYOffset&&(i.style.strokeDashoffset=o),i.style.strokeDashoffset<=0||"0px"==i.style.strokeDashoffset?($("line").is(".st2")&&(t.style.stroke="#EE44A4"),i.style.transition="0s",i.style.strokeDasharray=0):$("line").is(".st2")&&(t.style.stroke="none"),window.pageYOffset+1.1*s>n.top&&$("#circle-1").addClass("circle__active"),window.pageYOffset+1.1*s>r.top&&$("#circle-2").addClass("circle-2__active"),window.pageYOffset+1.1*s>l.top&&$("#circle-3").addClass("circle-3__active"),window.pageYOffset+1.1*s>a.top&&$("#circle-4").addClass("circle-4__active"),window.pageYOffset+1.1*s>d.top&&$("#circle-5").addClass("circle-5__active"),window.pageYOffset+1.1*s>d.top&&$("#circle-6").addClass("circle-5__active")}+function(e){"use strict";function i(i,o){return this.each(function(){var s=e(this),n=s.data("bs.modal"),r=e.extend({},t.DEFAULTS,s.data(),"object"==typeof i&&i);n||s.data("bs.modal",n=new t(this,r)),"string"==typeof i?n[i](o):r.show&&n.show(o)})}var t=function(i,t){this.options=t,this.$body=e(document.body),this.$element=e(i),this.$backdrop=this.isShown=null,this.scrollbarWidth=0,this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,e.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))};t.VERSION="3.3.2",t.TRANSITION_DURATION=300,t.BACKDROP_TRANSITION_DURATION=150,t.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},t.prototype.toggle=function(e){return this.isShown?this.hide():this.show(e)},t.prototype.show=function(i){var o=this,s=e.Event("show.bs.modal",{relatedTarget:i});this.$element.trigger(s),this.isShown||s.isDefaultPrevented()||(this.isShown=!0,this.checkScrollbar(),this.setScrollbar(),this.$body.addClass("modal-open"),this.escape(),this.resize(),this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',e.proxy(this.hide,this)),this.backdrop(function(){var s=e.support.transition&&o.$element.hasClass("fade");o.$element.parent().length||o.$element.appendTo(o.$body),o.$element.show().scrollTop(0),o.options.backdrop&&o.adjustBackdrop(),o.adjustDialog(),s&&o.$element[0].offsetWidth,o.$element.addClass("in").attr("aria-hidden",!1),o.enforceFocus();var n=e.Event("shown.bs.modal",{relatedTarget:i});s?o.$element.find(".modal-dialog").one("bsTransitionEnd",function(){o.$element.trigger("focus").trigger(n)}).emulateTransitionEnd(t.TRANSITION_DURATION):o.$element.trigger("focus").trigger(n)}))},t.prototype.hide=function(i){i&&i.preventDefault(),i=e.Event("hide.bs.modal"),this.$element.trigger(i),this.isShown&&!i.isDefaultPrevented()&&(this.isShown=!1,this.escape(),this.resize(),e(document).off("focusin.bs.modal"),this.$element.removeClass("in").attr("aria-hidden",!0).off("click.dismiss.bs.modal"),e.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",e.proxy(this.hideModal,this)).emulateTransitionEnd(t.TRANSITION_DURATION):this.hideModal())},t.prototype.enforceFocus=function(){e(document).off("focusin.bs.modal").on("focusin.bs.modal",e.proxy(function(e){this.$element[0]===e.target||this.$element.has(e.target).length||this.$element.trigger("focus")},this))},t.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keydown.dismiss.bs.modal",e.proxy(function(e){27==e.which&&this.hide()},this)):this.isShown||this.$element.off("keydown.dismiss.bs.modal")},t.prototype.resize=function(){this.isShown?e(window).on("resize.bs.modal",e.proxy(this.handleUpdate,this)):e(window).off("resize.bs.modal")},t.prototype.hideModal=function(){var e=this;this.$element.hide(),this.backdrop(function(){e.$body.removeClass("modal-open"),e.resetAdjustments(),e.resetScrollbar(),e.$element.trigger("hidden.bs.modal")})},t.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},t.prototype.backdrop=function(i){var o=this,s=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var n=e.support.transition&&s;if(this.$backdrop=e('<div class="modal-backdrop '+s+'" />').prependTo(this.$element).on("click.dismiss.bs.modal",e.proxy(function(e){e.target===e.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus.call(this.$element[0]):this.hide.call(this))},this)),n&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!i)return;n?this.$backdrop.one("bsTransitionEnd",i).emulateTransitionEnd(t.BACKDROP_TRANSITION_DURATION):i()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var r=function(){o.removeBackdrop(),i&&i()};e.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",r).emulateTransitionEnd(t.BACKDROP_TRANSITION_DURATION):r()}else i&&i()},t.prototype.handleUpdate=function(){this.options.backdrop&&this.adjustBackdrop(),this.adjustDialog()},t.prototype.adjustBackdrop=function(){this.$backdrop.css("height",0).css("height",this.$element[0].scrollHeight)},t.prototype.adjustDialog=function(){var e=this.$element[0].scrollHeight>document.documentElement.clientHeight;this.$element.css({paddingLeft:!this.bodyIsOverflowing&&e?this.scrollbarWidth:"",paddingRight:this.bodyIsOverflowing&&!e?this.scrollbarWidth:""})},t.prototype.resetAdjustments=function(){this.$element.css({paddingLeft:"",paddingRight:""})},t.prototype.checkScrollbar=function(){this.bodyIsOverflowing=document.body.scrollHeight>document.documentElement.clientHeight,this.scrollbarWidth=this.measureScrollbar()},t.prototype.setScrollbar=function(){var e=parseInt(this.$body.css("padding-right")||0,10);this.bodyIsOverflowing&&this.$body.css("padding-right",e+this.scrollbarWidth)},t.prototype.resetScrollbar=function(){this.$body.css("padding-right","")},t.prototype.measureScrollbar=function(){var e=document.createElement("div");e.className="modal-scrollbar-measure",this.$body.append(e);var i=e.offsetWidth-e.clientWidth;return this.$body[0].removeChild(e),i};var o=e.fn.modal;e.fn.modal=i,e.fn.modal.Constructor=t,e.fn.modal.noConflict=function(){return e.fn.modal=o,this},e(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(t){var o=e(this),s=o.attr("href"),n=e(o.attr("data-target")||s&&s.replace(/.*(?=#[^\s]+$)/,"")),r=n.data("bs.modal")?"toggle":e.extend({remote:!/#/.test(s)&&s},n.data(),o.data());o.is("a")&&t.preventDefault(),n.one("show.bs.modal",function(e){e.isDefaultPrevented()||n.one("hidden.bs.modal",function(){o.is(":visible")&&o.trigger("focus")})}),i.call(n,r,this)})}(jQuery),$(".footer-scroll-top").on("click",function(){$("body, html").animate({scrollTop:0},900)}),$(".scroll-down-button").on("click",function(){$("body, html").animate({scrollTop:$(window).height()},500,"linear")}),$(document).ready(function(){-1==navigator.userAgent.indexOf("Mac OS X")&&-1==navigator.userAgent.indexOf("Linux")||$("body").addClass("platform-ios"),$("body").height()<1700&&(console.log("min"),$(".scroll-down-button").css("display","none"),$(".footer-button_cover").css("display","none")),$(".fake-upload-button").on("click",function(){document.getElementById("upload-button").click()})}),$(".main-button, .package-details_link").on("click",function(e){e.preventDefault(),$("#myModal").modal("show")}),$("#hamburger").click(function(){$("#hamburger-block").toggleClass("hamburger__active"),$("#nav-icon2").toggleClass("open")}),$(document).bind("touchstart click",function(e){var i=$("#hamburger-block");i.is(e.target)||0!==i.has(e.target).length||(i.removeClass("hamburger__active"),$("#nav-icon2").removeClass("open"))}),$(".package-item").hover(function(){$(this).removeClass("package-item__hover").siblings().removeClass("package-item__hover")},function(){$("#optimal").addClass("package-item__hover")}),$(".slider-control").on("click",function(){var e=$(this).data("direction"),i=$(this).data("target")||!1;i?changeSlide(i,e):(changeSlide(".works-slider-block",e),changeSlide(".slider-content-block",e))}),$("#section-3").length>0&&detectSwipe("section-3",!1,changeSlide),$("#section-quote").length>0&&detectSwipe("section-quote","#quotesSlider",changeSlide),window.onload=function(){$("#triangle").length>0&&window.addEventListener("scroll",myFunction)},$(".item-cover").on("click",function(){$(this).addClass("item-cover__active").removeClass("item-cover__error").siblings().removeClass("item-cover__active")}),$(".quote-item_link").on("click",function(e){e.preventDefault()}),function(e){e.backgroundVideo=function(i,t){var o={videoid:"video_background",autoplay:!0,loop:!0,preload:!0},s=this;s.settings={};var n=function(){var i="",t="",o="",n="",l=s.settings.preload,a=s.settings.autoplay,d=s.settings.loop;t=l?'preload="auto"':"",o=a?'autoplay="autoplay"':"",n=d?'loop="true"':"",i+='<video id="'+s.settings.videoid+'"'+t+o+n,s.settings.poster&&(i+=' poster="'+s.settings.poster+'" '),i+='style="display:none;position:relative;;top:0;left:0;bottom:0;right:0;z-index:-100;width:100%;height:100%;">';for(var c=0;c<s.settings.types.length;c++)i+='<source src="'+s.settings.path+s.settings.filename+"."+s.settings.types[c]+'" type="video/'+s.settings.types[c]+'" />';i+="bgvideo</video>",s.el.prepend(i),s.videoEl=document.getElementById(s.settings.videoid),s.$videoEl=e(s.videoEl),s.$videoEl.fadeIn(2e3),r()},r=function(){var e=l();s.$videoEl.width(e*s.settings.width),s.$videoEl.height(e*s.settings.height),void 0!==s.settings.align&&a()},l=function(){var i=e(window).width(),t=e(window).height(),o=i/t,n=s.settings.width/s.settings.height,r=t/s.settings.height;return o>=n&&(r=i/s.settings.width),r},a=function(){var i=(e(window).width()>>1)-(s.$videoEl.width()>>1)|0,t=(e(window).height()>>1)-(s.$videoEl.height()>>1)|0;return"centerXY"==s.settings.align?void s.$videoEl.css({left:i,top:t}):"centerX"==s.settings.align?void s.$videoEl.css("left",i):"centerY"==s.settings.align?void s.$videoEl.css("top",t):void 0};!function(){s.settings=e.extend({},o,t),s.el=i,n()}(),e(window).resize(function(){r()}),s.$videoEl.bind("ended",function(){this.play()})}}(jQuery),$(document).ready(function(){new $.backgroundVideo($(".video-cover"),{align:"centerXY",width:1280,height:720,path:"img/images/",filename:"main-video",types:["mp4","ogg","webm"],preload:!0,autoplay:!0,loop:!0})}),$(".sales-item-button").on("click",function(){var e=$(this).parent().index()-1;console.log(e),$("#salesModal").modal("show"),$("#mauticform_input_boundstartsalespopup_f_select").children().eq(e+2).attr("selected","selected")}),$("div").is(".customers-block")&&$(document).ready(function(){$(".customers-block").slick({slidesToShow:3,slidesToScroll:1,autoplay:!1,autoplaySpeed:2e3,responsive:[{breakpoint:1025,settings:{slidesToShow:2,slidesToScroll:2,infinite:!0}},{breakpoint:600,settings:{slidesToShow:1,slidesToScroll:1}},{breakpoint:480,settings:{slidesToShow:1,slidesToScroll:1,autoplay:!0}}]})}),$(".button-join-now").on("click",function(){$("body, html").animate({scrollTop:$("input").offset().top-350},900)}),function(e){"use strict";"function"==typeof define&&define.amd?define(["jquery"],e):"undefined"!=typeof exports?module.exports=e(require("jquery")):e(jQuery)}(function(e){"use strict";var i=window.Slick||{};i=function(){function i(i,o){var s,n=this;n.defaults={accessibility:!0,adaptiveHeight:!1,appendArrows:e(i),appendDots:e(i),arrows:!0,asNavFor:null,prevArrow:'<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',nextArrow:'<button class="slick-next" aria-label="Next" type="button">Next</button>',autoplay:!1,autoplaySpeed:3e3,centerMode:!1,centerPadding:"50px",cssEase:"ease",customPaging:function(i,t){return e('<button type="button" />').text(t+1)},dots:!1,dotsClass:"slick-dots",draggable:!0,easing:"linear",edgeFriction:.35,fade:!1,focusOnSelect:!1,focusOnChange:!1,infinite:!0,initialSlide:0,lazyLoad:"ondemand",mobileFirst:!1,pauseOnHover:!0,pauseOnFocus:!0,pauseOnDotsHover:!1,respondTo:"window",responsive:null,rows:1,rtl:!1,slide:"",slidesPerRow:1,slidesToShow:1,slidesToScroll:1,speed:500,swipe:!0,swipeToSlide:!1,touchMove:!0,touchThreshold:5,useCSS:!0,useTransform:!0,variableWidth:!1,vertical:!1,verticalSwiping:!1,waitForAnimate:!0,zIndex:1e3},n.initials={animating:!1,dragging:!1,autoPlayTimer:null,currentDirection:0,currentLeft:null,currentSlide:0,direction:1,$dots:null,listWidth:null,listHeight:null,loadIndex:0,$nextArrow:null,$prevArrow:null,scrolling:!1,slideCount:null,slideWidth:null,$slideTrack:null,$slides:null,sliding:!1,slideOffset:0,swipeLeft:null,swiping:!1,$list:null,touchObject:{},transformsEnabled:!1,unslicked:!1},e.extend(n,n.initials),n.activeBreakpoint=null,n.animType=null,n.animProp=null,n.breakpoints=[],n.breakpointSettings=[],n.cssTransitions=!1,n.focussed=!1,n.interrupted=!1,n.hidden="hidden",n.paused=!0,n.positionProp=null,n.respondTo=null,n.rowCount=1,n.shouldClick=!0,n.$slider=e(i),n.$slidesCache=null,n.transformType=null,n.transitionType=null,n.visibilityChange="visibilitychange",n.windowWidth=0,n.windowTimer=null,s=e(i).data("slick")||{},n.options=e.extend({},n.defaults,o,s),n.currentSlide=n.options.initialSlide,n.originalSettings=n.options,void 0!==document.mozHidden?(n.hidden="mozHidden",n.visibilityChange="mozvisibilitychange"):void 0!==document.webkitHidden&&(n.hidden="webkitHidden",n.visibilityChange="webkitvisibilitychange"),n.autoPlay=e.proxy(n.autoPlay,n),n.autoPlayClear=e.proxy(n.autoPlayClear,n),n.autoPlayIterator=e.proxy(n.autoPlayIterator,n),n.changeSlide=e.proxy(n.changeSlide,n),n.clickHandler=e.proxy(n.clickHandler,n),n.selectHandler=e.proxy(n.selectHandler,n),n.setPosition=e.proxy(n.setPosition,n),n.swipeHandler=e.proxy(n.swipeHandler,n),n.dragHandler=e.proxy(n.dragHandler,n),n.keyHandler=e.proxy(n.keyHandler,n),n.instanceUid=t++,n.htmlExpr=/^(?:\s*(<[\w\W]+>)[^>]*)$/,n.registerBreakpoints(),n.init(!0)}var t=0;return i}(),i.prototype.activateADA=function(){this.$slideTrack.find(".slick-active").attr({"aria-hidden":"false"}).find("a, input, button, select").attr({tabindex:"0"})},i.prototype.addSlide=i.prototype.slickAdd=function(i,t,o){var s=this;if("boolean"==typeof t)o=t,t=null;else if(t<0||t>=s.slideCount)return!1;s.unload(),"number"==typeof t?0===t&&0===s.$slides.length?e(i).appendTo(s.$slideTrack):o?e(i).insertBefore(s.$slides.eq(t)):e(i).insertAfter(s.$slides.eq(t)):!0===o?e(i).prependTo(s.$slideTrack):e(i).appendTo(s.$slideTrack),s.$slides=s.$slideTrack.children(this.options.slide),s.$slideTrack.children(this.options.slide).detach(),s.$slideTrack.append(s.$slides),s.$slides.each(function(i,t){e(t).attr("data-slick-index",i)}),s.$slidesCache=s.$slides,s.reinit()},i.prototype.animateHeight=function(){var e=this;if(1===e.options.slidesToShow&&!0===e.options.adaptiveHeight&&!1===e.options.vertical){var i=e.$slides.eq(e.currentSlide).outerHeight(!0);e.$list.animate({height:i},e.options.speed)}},i.prototype.animateSlide=function(i,t){var o={},s=this;s.animateHeight(),!0===s.options.rtl&&!1===s.options.vertical&&(i=-i),!1===s.transformsEnabled?!1===s.options.vertical?s.$slideTrack.animate({left:i},s.options.speed,s.options.easing,t):s.$slideTrack.animate({top:i},s.options.speed,s.options.easing,t):!1===s.cssTransitions?(!0===s.options.rtl&&(s.currentLeft=-s.currentLeft),e({animStart:s.currentLeft}).animate({animStart:i},{duration:s.options.speed,easing:s.options.easing,step:function(e){e=Math.ceil(e),!1===s.options.vertical?(o[s.animType]="translate("+e+"px, 0px)",s.$slideTrack.css(o)):(o[s.animType]="translate(0px,"+e+"px)",s.$slideTrack.css(o))},complete:function(){t&&t.call()}})):(s.applyTransition(),i=Math.ceil(i),!1===s.options.vertical?o[s.animType]="translate3d("+i+"px, 0px, 0px)":o[s.animType]="translate3d(0px,"+i+"px, 0px)",s.$slideTrack.css(o),t&&setTimeout(function(){s.disableTransition(),t.call()},s.options.speed))},i.prototype.getNavTarget=function(){var i=this,t=i.options.asNavFor;return t&&null!==t&&(t=e(t).not(i.$slider)),t},i.prototype.asNavFor=function(i){var t=this,o=t.getNavTarget();null!==o&&"object"==typeof o&&o.each(function(){var t=e(this).slick("getSlick");t.unslicked||t.slideHandler(i,!0)})},i.prototype.applyTransition=function(e){var i=this,t={};!1===i.options.fade?t[i.transitionType]=i.transformType+" "+i.options.speed+"ms "+i.options.cssEase:t[i.transitionType]="opacity "+i.options.speed+"ms "+i.options.cssEase,!1===i.options.fade?i.$slideTrack.css(t):i.$slides.eq(e).css(t)},i.prototype.autoPlay=function(){var e=this;e.autoPlayClear(),e.slideCount>e.options.slidesToShow&&(e.autoPlayTimer=setInterval(e.autoPlayIterator,e.options.autoplaySpeed))},i.prototype.autoPlayClear=function(){var e=this;e.autoPlayTimer&&clearInterval(e.autoPlayTimer)},i.prototype.autoPlayIterator=function(){var e=this,i=e.currentSlide+e.options.slidesToScroll;e.paused||e.interrupted||e.focussed||(!1===e.options.infinite&&(1===e.direction&&e.currentSlide+1===e.slideCount-1?e.direction=0:0===e.direction&&(i=e.currentSlide-e.options.slidesToScroll,e.currentSlide-1==0&&(e.direction=1))),e.slideHandler(i))},i.prototype.buildArrows=function(){var i=this;!0===i.options.arrows&&(i.$prevArrow=e(i.options.prevArrow).addClass("slick-arrow"),i.$nextArrow=e(i.options.nextArrow).addClass("slick-arrow"),i.slideCount>i.options.slidesToShow?(i.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),i.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),i.htmlExpr.test(i.options.prevArrow)&&i.$prevArrow.prependTo(i.options.appendArrows),i.htmlExpr.test(i.options.nextArrow)&&i.$nextArrow.appendTo(i.options.appendArrows),!0!==i.options.infinite&&i.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true")):i.$prevArrow.add(i.$nextArrow).addClass("slick-hidden").attr({"aria-disabled":"true",tabindex:"-1"}))},i.prototype.buildDots=function(){var i,t,o=this;if(!0===o.options.dots){for(o.$slider.addClass("slick-dotted"),t=e("<ul />").addClass(o.options.dotsClass),i=0;i<=o.getDotCount();i+=1)t.append(e("<li />").append(o.options.customPaging.call(this,o,i)));o.$dots=t.appendTo(o.options.appendDots),o.$dots.find("li").first().addClass("slick-active")}},i.prototype.buildOut=function(){var i=this;i.$slides=i.$slider.children(i.options.slide+":not(.slick-cloned)").addClass("slick-slide"),i.slideCount=i.$slides.length,i.$slides.each(function(i,t){e(t).attr("data-slick-index",i).data("originalStyling",e(t).attr("style")||"")}),i.$slider.addClass("slick-slider"),i.$slideTrack=0===i.slideCount?e('<div class="slick-track"/>').appendTo(i.$slider):i.$slides.wrapAll('<div class="slick-track"/>').parent(),i.$list=i.$slideTrack.wrap('<div class="slick-list"/>').parent(),i.$slideTrack.css("opacity",0),!0!==i.options.centerMode&&!0!==i.options.swipeToSlide||(i.options.slidesToScroll=1),e("img[data-lazy]",i.$slider).not("[src]").addClass("slick-loading"),i.setupInfinite(),i.buildArrows(),i.buildDots(),i.updateDots(),i.setSlideClasses("number"==typeof i.currentSlide?i.currentSlide:0),!0===i.options.draggable&&i.$list.addClass("draggable")},i.prototype.buildRows=function(){var e,i,t,o,s,n,r,l=this;if(o=document.createDocumentFragment(),n=l.$slider.children(),l.options.rows>1){for(r=l.options.slidesPerRow*l.options.rows,s=Math.ceil(n.length/r),e=0;e<s;e++){var a=document.createElement("div");for(i=0;i<l.options.rows;i++){var d=document.createElement("div");for(t=0;t<l.options.slidesPerRow;t++){var c=e*r+(i*l.options.slidesPerRow+t);n.get(c)&&d.appendChild(n.get(c))}a.appendChild(d)}o.appendChild(a)}l.$slider.empty().append(o),l.$slider.children().children().children().css({width:100/l.options.slidesPerRow+"%",display:"inline-block"})}},i.prototype.checkResponsive=function(i,t){var o,s,n,r=this,l=!1,a=r.$slider.width(),d=window.innerWidth||e(window).width();if("window"===r.respondTo?n=d:"slider"===r.respondTo?n=a:"min"===r.respondTo&&(n=Math.min(d,a)),r.options.responsive&&r.options.responsive.length&&null!==r.options.responsive){s=null;for(o in r.breakpoints)r.breakpoints.hasOwnProperty(o)&&(!1===r.originalSettings.mobileFirst?n<r.breakpoints[o]&&(s=r.breakpoints[o]):n>r.breakpoints[o]&&(s=r.breakpoints[o]));null!==s?null!==r.activeBreakpoint?(s!==r.activeBreakpoint||t)&&(r.activeBreakpoint=s,"unslick"===r.breakpointSettings[s]?r.unslick(s):(r.options=e.extend({},r.originalSettings,r.breakpointSettings[s]),!0===i&&(r.currentSlide=r.options.initialSlide),r.refresh(i)),l=s):(r.activeBreakpoint=s,"unslick"===r.breakpointSettings[s]?r.unslick(s):(r.options=e.extend({},r.originalSettings,r.breakpointSettings[s]),!0===i&&(r.currentSlide=r.options.initialSlide),r.refresh(i)),l=s):null!==r.activeBreakpoint&&(r.activeBreakpoint=null,r.options=r.originalSettings,!0===i&&(r.currentSlide=r.options.initialSlide),r.refresh(i),l=s),i||!1===l||r.$slider.trigger("breakpoint",[r,l])}},i.prototype.changeSlide=function(i,t){var o,s,n,r=this,l=e(i.currentTarget);switch(l.is("a")&&i.preventDefault(),l.is("li")||(l=l.closest("li")),n=r.slideCount%r.options.slidesToScroll!=0,o=n?0:(r.slideCount-r.currentSlide)%r.options.slidesToScroll,i.data.message){case"previous":s=0===o?r.options.slidesToScroll:r.options.slidesToShow-o,r.slideCount>r.options.slidesToShow&&r.slideHandler(r.currentSlide-s,!1,t);break;case"next":s=0===o?r.options.slidesToScroll:o,r.slideCount>r.options.slidesToShow&&r.slideHandler(r.currentSlide+s,!1,t);break;case"index":var a=0===i.data.index?0:i.data.index||l.index()*r.options.slidesToScroll;r.slideHandler(r.checkNavigable(a),!1,t),l.children().trigger("focus");break;default:return}},i.prototype.checkNavigable=function(e){var i,t,o=this;if(i=o.getNavigableIndexes(),t=0,e>i[i.length-1])e=i[i.length-1];else for(var s in i){if(e<i[s]){e=t;break}t=i[s]}return e},i.prototype.cleanUpEvents=function(){var i=this;i.options.dots&&null!==i.$dots&&(e("li",i.$dots).off("click.slick",i.changeSlide).off("mouseenter.slick",e.proxy(i.interrupt,i,!0)).off("mouseleave.slick",e.proxy(i.interrupt,i,!1)),!0===i.options.accessibility&&i.$dots.off("keydown.slick",i.keyHandler)),i.$slider.off("focus.slick blur.slick"),!0===i.options.arrows&&i.slideCount>i.options.slidesToShow&&(i.$prevArrow&&i.$prevArrow.off("click.slick",i.changeSlide),i.$nextArrow&&i.$nextArrow.off("click.slick",i.changeSlide),!0===i.options.accessibility&&(i.$prevArrow&&i.$prevArrow.off("keydown.slick",i.keyHandler),i.$nextArrow&&i.$nextArrow.off("keydown.slick",i.keyHandler))),i.$list.off("touchstart.slick mousedown.slick",i.swipeHandler),i.$list.off("touchmove.slick mousemove.slick",i.swipeHandler),i.$list.off("touchend.slick mouseup.slick",i.swipeHandler),i.$list.off("touchcancel.slick mouseleave.slick",i.swipeHandler),i.$list.off("click.slick",i.clickHandler),e(document).off(i.visibilityChange,i.visibility),i.cleanUpSlideEvents(),!0===i.options.accessibility&&i.$list.off("keydown.slick",i.keyHandler),!0===i.options.focusOnSelect&&e(i.$slideTrack).children().off("click.slick",i.selectHandler),e(window).off("orientationchange.slick.slick-"+i.instanceUid,i.orientationChange),e(window).off("resize.slick.slick-"+i.instanceUid,i.resize),e("[draggable!=true]",i.$slideTrack).off("dragstart",i.preventDefault),e(window).off("load.slick.slick-"+i.instanceUid,i.setPosition)},i.prototype.cleanUpSlideEvents=function(){var i=this;i.$list.off("mouseenter.slick",e.proxy(i.interrupt,i,!0)),i.$list.off("mouseleave.slick",e.proxy(i.interrupt,i,!1))},i.prototype.cleanUpRows=function(){var e,i=this;i.options.rows>1&&(e=i.$slides.children().children(),e.removeAttr("style"),i.$slider.empty().append(e))},i.prototype.clickHandler=function(e){!1===this.shouldClick&&(e.stopImmediatePropagation(),e.stopPropagation(),e.preventDefault())},i.prototype.destroy=function(i){var t=this;t.autoPlayClear(),t.touchObject={},t.cleanUpEvents(),e(".slick-cloned",t.$slider).detach(),t.$dots&&t.$dots.remove(),t.$prevArrow&&t.$prevArrow.length&&(t.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.remove()),t.$nextArrow&&t.$nextArrow.length&&(t.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.remove()),t.$slides&&(t.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function(){e(this).attr("style",e(this).data("originalStyling"))}),t.$slideTrack.children(this.options.slide).detach(),t.$slideTrack.detach(),t.$list.detach(),t.$slider.append(t.$slides)),t.cleanUpRows(),t.$slider.removeClass("slick-slider"),t.$slider.removeClass("slick-initialized"),t.$slider.removeClass("slick-dotted"),t.unslicked=!0,i||t.$slider.trigger("destroy",[t])},i.prototype.disableTransition=function(e){var i=this,t={};t[i.transitionType]="",!1===i.options.fade?i.$slideTrack.css(t):i.$slides.eq(e).css(t)},i.prototype.fadeSlide=function(e,i){var t=this;!1===t.cssTransitions?(t.$slides.eq(e).css({zIndex:t.options.zIndex}),t.$slides.eq(e).animate({opacity:1},t.options.speed,t.options.easing,i)):(t.applyTransition(e),t.$slides.eq(e).css({opacity:1,zIndex:t.options.zIndex}),i&&setTimeout(function(){t.disableTransition(e),i.call()},t.options.speed))},i.prototype.fadeSlideOut=function(e){var i=this;!1===i.cssTransitions?i.$slides.eq(e).animate({opacity:0,zIndex:i.options.zIndex-2},i.options.speed,i.options.easing):(i.applyTransition(e),i.$slides.eq(e).css({opacity:0,zIndex:i.options.zIndex-2}))},i.prototype.filterSlides=i.prototype.slickFilter=function(e){var i=this;null!==e&&(i.$slidesCache=i.$slides,i.unload(),i.$slideTrack.children(this.options.slide).detach(),i.$slidesCache.filter(e).appendTo(i.$slideTrack),i.reinit())},i.prototype.focusHandler=function(){var i=this;i.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick","*",function(t){t.stopImmediatePropagation();var o=e(this);setTimeout(function(){i.options.pauseOnFocus&&(i.focussed=o.is(":focus"),i.autoPlay())},0)})},i.prototype.getCurrent=i.prototype.slickCurrentSlide=function(){return this.currentSlide},i.prototype.getDotCount=function(){var e=this,i=0,t=0,o=0;if(!0===e.options.infinite)if(e.slideCount<=e.options.slidesToShow)++o;else for(;i<e.slideCount;)++o,i=t+e.options.slidesToScroll,t+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;else if(!0===e.options.centerMode)o=e.slideCount;else if(e.options.asNavFor)for(;i<e.slideCount;)++o,i=t+e.options.slidesToScroll,t+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;else o=1+Math.ceil((e.slideCount-e.options.slidesToShow)/e.options.slidesToScroll);return o-1},i.prototype.getLeft=function(e){var i,t,o,s,n=this,r=0;return n.slideOffset=0,t=n.$slides.first().outerHeight(!0),!0===n.options.infinite?(n.slideCount>n.options.slidesToShow&&(n.slideOffset=n.slideWidth*n.options.slidesToShow*-1,s=-1,!0===n.options.vertical&&!0===n.options.centerMode&&(2===n.options.slidesToShow?s=-1.5:1===n.options.slidesToShow&&(s=-2)),r=t*n.options.slidesToShow*s),n.slideCount%n.options.slidesToScroll!=0&&e+n.options.slidesToScroll>n.slideCount&&n.slideCount>n.options.slidesToShow&&(e>n.slideCount?(n.slideOffset=(n.options.slidesToShow-(e-n.slideCount))*n.slideWidth*-1,r=(n.options.slidesToShow-(e-n.slideCount))*t*-1):(n.slideOffset=n.slideCount%n.options.slidesToScroll*n.slideWidth*-1,r=n.slideCount%n.options.slidesToScroll*t*-1))):e+n.options.slidesToShow>n.slideCount&&(n.slideOffset=(e+n.options.slidesToShow-n.slideCount)*n.slideWidth,r=(e+n.options.slidesToShow-n.slideCount)*t),n.slideCount<=n.options.slidesToShow&&(n.slideOffset=0,r=0),!0===n.options.centerMode&&n.slideCount<=n.options.slidesToShow?n.slideOffset=n.slideWidth*Math.floor(n.options.slidesToShow)/2-n.slideWidth*n.slideCount/2:!0===n.options.centerMode&&!0===n.options.infinite?n.slideOffset+=n.slideWidth*Math.floor(n.options.slidesToShow/2)-n.slideWidth:!0===n.options.centerMode&&(n.slideOffset=0,n.slideOffset+=n.slideWidth*Math.floor(n.options.slidesToShow/2)),i=!1===n.options.vertical?e*n.slideWidth*-1+n.slideOffset:e*t*-1+r,!0===n.options.variableWidth&&(o=n.slideCount<=n.options.slidesToShow||!1===n.options.infinite?n.$slideTrack.children(".slick-slide").eq(e):n.$slideTrack.children(".slick-slide").eq(e+n.options.slidesToShow),i=!0===n.options.rtl?o[0]?-1*(n.$slideTrack.width()-o[0].offsetLeft-o.width()):0:o[0]?-1*o[0].offsetLeft:0,!0===n.options.centerMode&&(o=n.slideCount<=n.options.slidesToShow||!1===n.options.infinite?n.$slideTrack.children(".slick-slide").eq(e):n.$slideTrack.children(".slick-slide").eq(e+n.options.slidesToShow+1),i=!0===n.options.rtl?o[0]?-1*(n.$slideTrack.width()-o[0].offsetLeft-o.width()):0:o[0]?-1*o[0].offsetLeft:0,i+=(n.$list.width()-o.outerWidth())/2)),i},i.prototype.getOption=i.prototype.slickGetOption=function(e){return this.options[e]},i.prototype.getNavigableIndexes=function(){var e,i=this,t=0,o=0,s=[];for(!1===i.options.infinite?e=i.slideCount:(t=-1*i.options.slidesToScroll,o=-1*i.options.slidesToScroll,e=2*i.slideCount);t<e;)s.push(t),t=o+i.options.slidesToScroll,o+=i.options.slidesToScroll<=i.options.slidesToShow?i.options.slidesToScroll:i.options.slidesToShow;return s},i.prototype.getSlick=function(){return this},i.prototype.getSlideCount=function(){var i,t,o=this;return t=!0===o.options.centerMode?o.slideWidth*Math.floor(o.options.slidesToShow/2):0,!0===o.options.swipeToSlide?(o.$slideTrack.find(".slick-slide").each(function(s,n){if(n.offsetLeft-t+e(n).outerWidth()/2>-1*o.swipeLeft)return i=n,!1}),Math.abs(e(i).attr("data-slick-index")-o.currentSlide)||1):o.options.slidesToScroll},i.prototype.goTo=i.prototype.slickGoTo=function(e,i){this.changeSlide({data:{message:"index",index:parseInt(e)}},i)},i.prototype.init=function(i){var t=this;e(t.$slider).hasClass("slick-initialized")||(e(t.$slider).addClass("slick-initialized"),t.buildRows(),t.buildOut(),t.setProps(),t.startLoad(),t.loadSlider(),t.initializeEvents(),t.updateArrows(),t.updateDots(),
t.checkResponsive(!0),t.focusHandler()),i&&t.$slider.trigger("init",[t]),!0===t.options.accessibility&&t.initADA(),t.options.autoplay&&(t.paused=!1,t.autoPlay())},i.prototype.initADA=function(){var i=this,t=Math.ceil(i.slideCount/i.options.slidesToShow),o=i.getNavigableIndexes().filter(function(e){return e>=0&&e<i.slideCount});i.$slides.add(i.$slideTrack.find(".slick-cloned")).attr({"aria-hidden":"true",tabindex:"-1"}).find("a, input, button, select").attr({tabindex:"-1"}),null!==i.$dots&&(i.$slides.not(i.$slideTrack.find(".slick-cloned")).each(function(t){var s=o.indexOf(t);e(this).attr({role:"tabpanel",id:"slick-slide"+i.instanceUid+t,tabindex:-1}),-1!==s&&e(this).attr({"aria-describedby":"slick-slide-control"+i.instanceUid+s})}),i.$dots.attr("role","tablist").find("li").each(function(s){var n=o[s];e(this).attr({role:"presentation"}),e(this).find("button").first().attr({role:"tab",id:"slick-slide-control"+i.instanceUid+s,"aria-controls":"slick-slide"+i.instanceUid+n,"aria-label":s+1+" of "+t,"aria-selected":null,tabindex:"-1"})}).eq(i.currentSlide).find("button").attr({"aria-selected":"true",tabindex:"0"}).end());for(var s=i.currentSlide,n=s+i.options.slidesToShow;s<n;s++)i.$slides.eq(s).attr("tabindex",0);i.activateADA()},i.prototype.initArrowEvents=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.off("click.slick").on("click.slick",{message:"previous"},e.changeSlide),e.$nextArrow.off("click.slick").on("click.slick",{message:"next"},e.changeSlide),!0===e.options.accessibility&&(e.$prevArrow.on("keydown.slick",e.keyHandler),e.$nextArrow.on("keydown.slick",e.keyHandler)))},i.prototype.initDotEvents=function(){var i=this;!0===i.options.dots&&(e("li",i.$dots).on("click.slick",{message:"index"},i.changeSlide),!0===i.options.accessibility&&i.$dots.on("keydown.slick",i.keyHandler)),!0===i.options.dots&&!0===i.options.pauseOnDotsHover&&e("li",i.$dots).on("mouseenter.slick",e.proxy(i.interrupt,i,!0)).on("mouseleave.slick",e.proxy(i.interrupt,i,!1))},i.prototype.initSlideEvents=function(){var i=this;i.options.pauseOnHover&&(i.$list.on("mouseenter.slick",e.proxy(i.interrupt,i,!0)),i.$list.on("mouseleave.slick",e.proxy(i.interrupt,i,!1)))},i.prototype.initializeEvents=function(){var i=this;i.initArrowEvents(),i.initDotEvents(),i.initSlideEvents(),i.$list.on("touchstart.slick mousedown.slick",{action:"start"},i.swipeHandler),i.$list.on("touchmove.slick mousemove.slick",{action:"move"},i.swipeHandler),i.$list.on("touchend.slick mouseup.slick",{action:"end"},i.swipeHandler),i.$list.on("touchcancel.slick mouseleave.slick",{action:"end"},i.swipeHandler),i.$list.on("click.slick",i.clickHandler),e(document).on(i.visibilityChange,e.proxy(i.visibility,i)),!0===i.options.accessibility&&i.$list.on("keydown.slick",i.keyHandler),!0===i.options.focusOnSelect&&e(i.$slideTrack).children().on("click.slick",i.selectHandler),e(window).on("orientationchange.slick.slick-"+i.instanceUid,e.proxy(i.orientationChange,i)),e(window).on("resize.slick.slick-"+i.instanceUid,e.proxy(i.resize,i)),e("[draggable!=true]",i.$slideTrack).on("dragstart",i.preventDefault),e(window).on("load.slick.slick-"+i.instanceUid,i.setPosition),e(i.setPosition)},i.prototype.initUI=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.show(),e.$nextArrow.show()),!0===e.options.dots&&e.slideCount>e.options.slidesToShow&&e.$dots.show()},i.prototype.keyHandler=function(e){var i=this;e.target.tagName.match("TEXTAREA|INPUT|SELECT")||(37===e.keyCode&&!0===i.options.accessibility?i.changeSlide({data:{message:!0===i.options.rtl?"next":"previous"}}):39===e.keyCode&&!0===i.options.accessibility&&i.changeSlide({data:{message:!0===i.options.rtl?"previous":"next"}}))},i.prototype.lazyLoad=function(){function i(i){e("img[data-lazy]",i).each(function(){var i=e(this),t=e(this).attr("data-lazy"),o=e(this).attr("data-srcset"),s=e(this).attr("data-sizes")||r.$slider.attr("data-sizes"),n=document.createElement("img");n.onload=function(){i.animate({opacity:0},100,function(){o&&(i.attr("srcset",o),s&&i.attr("sizes",s)),i.attr("src",t).animate({opacity:1},200,function(){i.removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading")}),r.$slider.trigger("lazyLoaded",[r,i,t])})},n.onerror=function(){i.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),r.$slider.trigger("lazyLoadError",[r,i,t])},n.src=t})}var t,o,s,n,r=this;if(!0===r.options.centerMode?!0===r.options.infinite?(s=r.currentSlide+(r.options.slidesToShow/2+1),n=s+r.options.slidesToShow+2):(s=Math.max(0,r.currentSlide-(r.options.slidesToShow/2+1)),n=r.options.slidesToShow/2+1+2+r.currentSlide):(s=r.options.infinite?r.options.slidesToShow+r.currentSlide:r.currentSlide,n=Math.ceil(s+r.options.slidesToShow),!0===r.options.fade&&(s>0&&s--,n<=r.slideCount&&n++)),t=r.$slider.find(".slick-slide").slice(s,n),"anticipated"===r.options.lazyLoad)for(var l=s-1,a=n,d=r.$slider.find(".slick-slide"),c=0;c<r.options.slidesToScroll;c++)l<0&&(l=r.slideCount-1),t=t.add(d.eq(l)),t=t.add(d.eq(a)),l--,a++;i(t),r.slideCount<=r.options.slidesToShow?(o=r.$slider.find(".slick-slide"),i(o)):r.currentSlide>=r.slideCount-r.options.slidesToShow?(o=r.$slider.find(".slick-cloned").slice(0,r.options.slidesToShow),i(o)):0===r.currentSlide&&(o=r.$slider.find(".slick-cloned").slice(-1*r.options.slidesToShow),i(o))},i.prototype.loadSlider=function(){var e=this;e.setPosition(),e.$slideTrack.css({opacity:1}),e.$slider.removeClass("slick-loading"),e.initUI(),"progressive"===e.options.lazyLoad&&e.progressiveLazyLoad()},i.prototype.next=i.prototype.slickNext=function(){this.changeSlide({data:{message:"next"}})},i.prototype.orientationChange=function(){var e=this;e.checkResponsive(),e.setPosition()},i.prototype.pause=i.prototype.slickPause=function(){var e=this;e.autoPlayClear(),e.paused=!0},i.prototype.play=i.prototype.slickPlay=function(){var e=this;e.autoPlay(),e.options.autoplay=!0,e.paused=!1,e.focussed=!1,e.interrupted=!1},i.prototype.postSlide=function(i){var t=this;if(!t.unslicked&&(t.$slider.trigger("afterChange",[t,i]),t.animating=!1,t.slideCount>t.options.slidesToShow&&t.setPosition(),t.swipeLeft=null,t.options.autoplay&&t.autoPlay(),!0===t.options.accessibility&&(t.initADA(),t.options.focusOnChange))){e(t.$slides.get(t.currentSlide)).attr("tabindex",0).focus()}},i.prototype.prev=i.prototype.slickPrev=function(){this.changeSlide({data:{message:"previous"}})},i.prototype.preventDefault=function(e){e.preventDefault()},i.prototype.progressiveLazyLoad=function(i){i=i||1;var t,o,s,n,r,l=this,a=e("img[data-lazy]",l.$slider);a.length?(t=a.first(),o=t.attr("data-lazy"),s=t.attr("data-srcset"),n=t.attr("data-sizes")||l.$slider.attr("data-sizes"),r=document.createElement("img"),r.onload=function(){s&&(t.attr("srcset",s),n&&t.attr("sizes",n)),t.attr("src",o).removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading"),!0===l.options.adaptiveHeight&&l.setPosition(),l.$slider.trigger("lazyLoaded",[l,t,o]),l.progressiveLazyLoad()},r.onerror=function(){i<3?setTimeout(function(){l.progressiveLazyLoad(i+1)},500):(t.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),l.$slider.trigger("lazyLoadError",[l,t,o]),l.progressiveLazyLoad())},r.src=o):l.$slider.trigger("allImagesLoaded",[l])},i.prototype.refresh=function(i){var t,o,s=this;o=s.slideCount-s.options.slidesToShow,!s.options.infinite&&s.currentSlide>o&&(s.currentSlide=o),s.slideCount<=s.options.slidesToShow&&(s.currentSlide=0),t=s.currentSlide,s.destroy(!0),e.extend(s,s.initials,{currentSlide:t}),s.init(),i||s.changeSlide({data:{message:"index",index:t}},!1)},i.prototype.registerBreakpoints=function(){var i,t,o,s=this,n=s.options.responsive||null;if("array"===e.type(n)&&n.length){s.respondTo=s.options.respondTo||"window";for(i in n)if(o=s.breakpoints.length-1,n.hasOwnProperty(i)){for(t=n[i].breakpoint;o>=0;)s.breakpoints[o]&&s.breakpoints[o]===t&&s.breakpoints.splice(o,1),o--;s.breakpoints.push(t),s.breakpointSettings[t]=n[i].settings}s.breakpoints.sort(function(e,i){return s.options.mobileFirst?e-i:i-e})}},i.prototype.reinit=function(){var i=this;i.$slides=i.$slideTrack.children(i.options.slide).addClass("slick-slide"),i.slideCount=i.$slides.length,i.currentSlide>=i.slideCount&&0!==i.currentSlide&&(i.currentSlide=i.currentSlide-i.options.slidesToScroll),i.slideCount<=i.options.slidesToShow&&(i.currentSlide=0),i.registerBreakpoints(),i.setProps(),i.setupInfinite(),i.buildArrows(),i.updateArrows(),i.initArrowEvents(),i.buildDots(),i.updateDots(),i.initDotEvents(),i.cleanUpSlideEvents(),i.initSlideEvents(),i.checkResponsive(!1,!0),!0===i.options.focusOnSelect&&e(i.$slideTrack).children().on("click.slick",i.selectHandler),i.setSlideClasses("number"==typeof i.currentSlide?i.currentSlide:0),i.setPosition(),i.focusHandler(),i.paused=!i.options.autoplay,i.autoPlay(),i.$slider.trigger("reInit",[i])},i.prototype.resize=function(){var i=this;e(window).width()!==i.windowWidth&&(clearTimeout(i.windowDelay),i.windowDelay=window.setTimeout(function(){i.windowWidth=e(window).width(),i.checkResponsive(),i.unslicked||i.setPosition()},50))},i.prototype.removeSlide=i.prototype.slickRemove=function(e,i,t){var o=this;if("boolean"==typeof e?(i=e,e=!0===i?0:o.slideCount-1):e=!0===i?--e:e,o.slideCount<1||e<0||e>o.slideCount-1)return!1;o.unload(),!0===t?o.$slideTrack.children().remove():o.$slideTrack.children(this.options.slide).eq(e).remove(),o.$slides=o.$slideTrack.children(this.options.slide),o.$slideTrack.children(this.options.slide).detach(),o.$slideTrack.append(o.$slides),o.$slidesCache=o.$slides,o.reinit()},i.prototype.setCSS=function(e){var i,t,o=this,s={};!0===o.options.rtl&&(e=-e),i="left"==o.positionProp?Math.ceil(e)+"px":"0px",t="top"==o.positionProp?Math.ceil(e)+"px":"0px",s[o.positionProp]=e,!1===o.transformsEnabled?o.$slideTrack.css(s):(s={},!1===o.cssTransitions?(s[o.animType]="translate("+i+", "+t+")",o.$slideTrack.css(s)):(s[o.animType]="translate3d("+i+", "+t+", 0px)",o.$slideTrack.css(s)))},i.prototype.setDimensions=function(){var e=this;!1===e.options.vertical?!0===e.options.centerMode&&e.$list.css({padding:"0px "+e.options.centerPadding}):(e.$list.height(e.$slides.first().outerHeight(!0)*e.options.slidesToShow),!0===e.options.centerMode&&e.$list.css({padding:e.options.centerPadding+" 0px"})),e.listWidth=e.$list.width(),e.listHeight=e.$list.height(),!1===e.options.vertical&&!1===e.options.variableWidth?(e.slideWidth=Math.ceil(e.listWidth/e.options.slidesToShow),e.$slideTrack.width(Math.ceil(e.slideWidth*e.$slideTrack.children(".slick-slide").length))):!0===e.options.variableWidth?e.$slideTrack.width(5e3*e.slideCount):(e.slideWidth=Math.ceil(e.listWidth),e.$slideTrack.height(Math.ceil(e.$slides.first().outerHeight(!0)*e.$slideTrack.children(".slick-slide").length)));var i=e.$slides.first().outerWidth(!0)-e.$slides.first().width();!1===e.options.variableWidth&&e.$slideTrack.children(".slick-slide").width(e.slideWidth-i)},i.prototype.setFade=function(){var i,t=this;t.$slides.each(function(o,s){i=t.slideWidth*o*-1,!0===t.options.rtl?e(s).css({position:"relative",right:i,top:0,zIndex:t.options.zIndex-2,opacity:0}):e(s).css({position:"relative",left:i,top:0,zIndex:t.options.zIndex-2,opacity:0})}),t.$slides.eq(t.currentSlide).css({zIndex:t.options.zIndex-1,opacity:1})},i.prototype.setHeight=function(){var e=this;if(1===e.options.slidesToShow&&!0===e.options.adaptiveHeight&&!1===e.options.vertical){var i=e.$slides.eq(e.currentSlide).outerHeight(!0);e.$list.css("height",i)}},i.prototype.setOption=i.prototype.slickSetOption=function(){var i,t,o,s,n,r=this,l=!1;if("object"===e.type(arguments[0])?(o=arguments[0],l=arguments[1],n="multiple"):"string"===e.type(arguments[0])&&(o=arguments[0],s=arguments[1],l=arguments[2],"responsive"===arguments[0]&&"array"===e.type(arguments[1])?n="responsive":void 0!==arguments[1]&&(n="single")),"single"===n)r.options[o]=s;else if("multiple"===n)e.each(o,function(e,i){r.options[e]=i});else if("responsive"===n)for(t in s)if("array"!==e.type(r.options.responsive))r.options.responsive=[s[t]];else{for(i=r.options.responsive.length-1;i>=0;)r.options.responsive[i].breakpoint===s[t].breakpoint&&r.options.responsive.splice(i,1),i--;r.options.responsive.push(s[t])}l&&(r.unload(),r.reinit())},i.prototype.setPosition=function(){var e=this;e.setDimensions(),e.setHeight(),!1===e.options.fade?e.setCSS(e.getLeft(e.currentSlide)):e.setFade(),e.$slider.trigger("setPosition",[e])},i.prototype.setProps=function(){var e=this,i=document.body.style;e.positionProp=!0===e.options.vertical?"top":"left","top"===e.positionProp?e.$slider.addClass("slick-vertical"):e.$slider.removeClass("slick-vertical"),void 0===i.WebkitTransition&&void 0===i.MozTransition&&void 0===i.msTransition||!0===e.options.useCSS&&(e.cssTransitions=!0),e.options.fade&&("number"==typeof e.options.zIndex?e.options.zIndex<3&&(e.options.zIndex=3):e.options.zIndex=e.defaults.zIndex),void 0!==i.OTransform&&(e.animType="OTransform",e.transformType="-o-transform",e.transitionType="OTransition",void 0===i.perspectiveProperty&&void 0===i.webkitPerspective&&(e.animType=!1)),void 0!==i.MozTransform&&(e.animType="MozTransform",e.transformType="-moz-transform",e.transitionType="MozTransition",void 0===i.perspectiveProperty&&void 0===i.MozPerspective&&(e.animType=!1)),void 0!==i.webkitTransform&&(e.animType="webkitTransform",e.transformType="-webkit-transform",e.transitionType="webkitTransition",void 0===i.perspectiveProperty&&void 0===i.webkitPerspective&&(e.animType=!1)),void 0!==i.msTransform&&(e.animType="msTransform",e.transformType="-ms-transform",e.transitionType="msTransition",void 0===i.msTransform&&(e.animType=!1)),void 0!==i.transform&&!1!==e.animType&&(e.animType="transform",e.transformType="transform",e.transitionType="transition"),e.transformsEnabled=e.options.useTransform&&null!==e.animType&&!1!==e.animType},i.prototype.setSlideClasses=function(e){var i,t,o,s,n=this;if(t=n.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden","true"),n.$slides.eq(e).addClass("slick-current"),!0===n.options.centerMode){var r=n.options.slidesToShow%2==0?1:0;i=Math.floor(n.options.slidesToShow/2),!0===n.options.infinite&&(e>=i&&e<=n.slideCount-1-i?n.$slides.slice(e-i+r,e+i+1).addClass("slick-active").attr("aria-hidden","false"):(o=n.options.slidesToShow+e,t.slice(o-i+1+r,o+i+2).addClass("slick-active").attr("aria-hidden","false")),0===e?t.eq(t.length-1-n.options.slidesToShow).addClass("slick-center"):e===n.slideCount-1&&t.eq(n.options.slidesToShow).addClass("slick-center")),n.$slides.eq(e).addClass("slick-center")}else e>=0&&e<=n.slideCount-n.options.slidesToShow?n.$slides.slice(e,e+n.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"):t.length<=n.options.slidesToShow?t.addClass("slick-active").attr("aria-hidden","false"):(s=n.slideCount%n.options.slidesToShow,o=!0===n.options.infinite?n.options.slidesToShow+e:e,n.options.slidesToShow==n.options.slidesToScroll&&n.slideCount-e<n.options.slidesToShow?t.slice(o-(n.options.slidesToShow-s),o+s).addClass("slick-active").attr("aria-hidden","false"):t.slice(o,o+n.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"));"ondemand"!==n.options.lazyLoad&&"anticipated"!==n.options.lazyLoad||n.lazyLoad()},i.prototype.setupInfinite=function(){var i,t,o,s=this;if(!0===s.options.fade&&(s.options.centerMode=!1),!0===s.options.infinite&&!1===s.options.fade&&(t=null,s.slideCount>s.options.slidesToShow)){for(o=!0===s.options.centerMode?s.options.slidesToShow+1:s.options.slidesToShow,i=s.slideCount;i>s.slideCount-o;i-=1)t=i-1,e(s.$slides[t]).clone(!0).attr("id","").attr("data-slick-index",t-s.slideCount).prependTo(s.$slideTrack).addClass("slick-cloned");for(i=0;i<o+s.slideCount;i+=1)t=i,e(s.$slides[t]).clone(!0).attr("id","").attr("data-slick-index",t+s.slideCount).appendTo(s.$slideTrack).addClass("slick-cloned");s.$slideTrack.find(".slick-cloned").find("[id]").each(function(){e(this).attr("id","")})}},i.prototype.interrupt=function(e){var i=this;e||i.autoPlay(),i.interrupted=e},i.prototype.selectHandler=function(i){var t=this,o=e(i.target).is(".slick-slide")?e(i.target):e(i.target).parents(".slick-slide"),s=parseInt(o.attr("data-slick-index"));if(s||(s=0),t.slideCount<=t.options.slidesToShow)return void t.slideHandler(s,!1,!0);t.slideHandler(s)},i.prototype.slideHandler=function(e,i,t){var o,s,n,r,l,a=null,d=this;if(i=i||!1,!(!0===d.animating&&!0===d.options.waitForAnimate||!0===d.options.fade&&d.currentSlide===e)){if(!1===i&&d.asNavFor(e),o=e,a=d.getLeft(o),r=d.getLeft(d.currentSlide),d.currentLeft=null===d.swipeLeft?r:d.swipeLeft,!1===d.options.infinite&&!1===d.options.centerMode&&(e<0||e>d.getDotCount()*d.options.slidesToScroll))return void(!1===d.options.fade&&(o=d.currentSlide,!0!==t?d.animateSlide(r,function(){d.postSlide(o)}):d.postSlide(o)));if(!1===d.options.infinite&&!0===d.options.centerMode&&(e<0||e>d.slideCount-d.options.slidesToScroll))return void(!1===d.options.fade&&(o=d.currentSlide,!0!==t?d.animateSlide(r,function(){d.postSlide(o)}):d.postSlide(o)));if(d.options.autoplay&&clearInterval(d.autoPlayTimer),s=o<0?d.slideCount%d.options.slidesToScroll!=0?d.slideCount-d.slideCount%d.options.slidesToScroll:d.slideCount+o:o>=d.slideCount?d.slideCount%d.options.slidesToScroll!=0?0:o-d.slideCount:o,d.animating=!0,d.$slider.trigger("beforeChange",[d,d.currentSlide,s]),n=d.currentSlide,d.currentSlide=s,d.setSlideClasses(d.currentSlide),d.options.asNavFor&&(l=d.getNavTarget(),l=l.slick("getSlick"),l.slideCount<=l.options.slidesToShow&&l.setSlideClasses(d.currentSlide)),d.updateDots(),d.updateArrows(),!0===d.options.fade)return!0!==t?(d.fadeSlideOut(n),d.fadeSlide(s,function(){d.postSlide(s)})):d.postSlide(s),void d.animateHeight();!0!==t?d.animateSlide(a,function(){d.postSlide(s)}):d.postSlide(s)}},i.prototype.startLoad=function(){var e=this;!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&(e.$prevArrow.hide(),e.$nextArrow.hide()),!0===e.options.dots&&e.slideCount>e.options.slidesToShow&&e.$dots.hide(),e.$slider.addClass("slick-loading")},i.prototype.swipeDirection=function(){var e,i,t,o,s=this;return e=s.touchObject.startX-s.touchObject.curX,i=s.touchObject.startY-s.touchObject.curY,t=Math.atan2(i,e),o=Math.round(180*t/Math.PI),o<0&&(o=360-Math.abs(o)),o<=45&&o>=0?!1===s.options.rtl?"left":"right":o<=360&&o>=315?!1===s.options.rtl?"left":"right":o>=135&&o<=225?!1===s.options.rtl?"right":"left":!0===s.options.verticalSwiping?o>=35&&o<=135?"down":"up":"vertical"},i.prototype.swipeEnd=function(e){var i,t,o=this;if(o.dragging=!1,o.swiping=!1,o.scrolling)return o.scrolling=!1,!1;if(o.interrupted=!1,o.shouldClick=!(o.touchObject.swipeLength>10),void 0===o.touchObject.curX)return!1;if(!0===o.touchObject.edgeHit&&o.$slider.trigger("edge",[o,o.swipeDirection()]),o.touchObject.swipeLength>=o.touchObject.minSwipe){switch(t=o.swipeDirection()){case"left":case"down":i=o.options.swipeToSlide?o.checkNavigable(o.currentSlide+o.getSlideCount()):o.currentSlide+o.getSlideCount(),o.currentDirection=0;break;case"right":case"up":i=o.options.swipeToSlide?o.checkNavigable(o.currentSlide-o.getSlideCount()):o.currentSlide-o.getSlideCount(),o.currentDirection=1}"vertical"!=t&&(o.slideHandler(i),o.touchObject={},o.$slider.trigger("swipe",[o,t]))}else o.touchObject.startX!==o.touchObject.curX&&(o.slideHandler(o.currentSlide),o.touchObject={})},i.prototype.swipeHandler=function(e){var i=this;if(!(!1===i.options.swipe||"ontouchend"in document&&!1===i.options.swipe||!1===i.options.draggable&&-1!==e.type.indexOf("mouse")))switch(i.touchObject.fingerCount=e.originalEvent&&void 0!==e.originalEvent.touches?e.originalEvent.touches.length:1,i.touchObject.minSwipe=i.listWidth/i.options.touchThreshold,!0===i.options.verticalSwiping&&(i.touchObject.minSwipe=i.listHeight/i.options.touchThreshold),e.data.action){case"start":i.swipeStart(e);break;case"move":i.swipeMove(e);break;case"end":i.swipeEnd(e)}},i.prototype.swipeMove=function(e){var i,t,o,s,n,r,l=this;return n=void 0!==e.originalEvent?e.originalEvent.touches:null,!(!l.dragging||l.scrolling||n&&1!==n.length)&&(i=l.getLeft(l.currentSlide),l.touchObject.curX=void 0!==n?n[0].pageX:e.clientX,l.touchObject.curY=void 0!==n?n[0].pageY:e.clientY,l.touchObject.swipeLength=Math.round(Math.sqrt(Math.pow(l.touchObject.curX-l.touchObject.startX,2))),r=Math.round(Math.sqrt(Math.pow(l.touchObject.curY-l.touchObject.startY,2))),!l.options.verticalSwiping&&!l.swiping&&r>4?(l.scrolling=!0,!1):(!0===l.options.verticalSwiping&&(l.touchObject.swipeLength=r),t=l.swipeDirection(),void 0!==e.originalEvent&&l.touchObject.swipeLength>4&&(l.swiping=!0,e.preventDefault()),s=(!1===l.options.rtl?1:-1)*(l.touchObject.curX>l.touchObject.startX?1:-1),!0===l.options.verticalSwiping&&(s=l.touchObject.curY>l.touchObject.startY?1:-1),o=l.touchObject.swipeLength,l.touchObject.edgeHit=!1,!1===l.options.infinite&&(0===l.currentSlide&&"right"===t||l.currentSlide>=l.getDotCount()&&"left"===t)&&(o=l.touchObject.swipeLength*l.options.edgeFriction,l.touchObject.edgeHit=!0),!1===l.options.vertical?l.swipeLeft=i+o*s:l.swipeLeft=i+o*(l.$list.height()/l.listWidth)*s,!0===l.options.verticalSwiping&&(l.swipeLeft=i+o*s),!0!==l.options.fade&&!1!==l.options.touchMove&&(!0===l.animating?(l.swipeLeft=null,!1):void l.setCSS(l.swipeLeft))))},i.prototype.swipeStart=function(e){var i,t=this;if(t.interrupted=!0,1!==t.touchObject.fingerCount||t.slideCount<=t.options.slidesToShow)return t.touchObject={},!1;void 0!==e.originalEvent&&void 0!==e.originalEvent.touches&&(i=e.originalEvent.touches[0]),t.touchObject.startX=t.touchObject.curX=void 0!==i?i.pageX:e.clientX,t.touchObject.startY=t.touchObject.curY=void 0!==i?i.pageY:e.clientY,t.dragging=!0},i.prototype.unfilterSlides=i.prototype.slickUnfilter=function(){var e=this;null!==e.$slidesCache&&(e.unload(),e.$slideTrack.children(this.options.slide).detach(),e.$slidesCache.appendTo(e.$slideTrack),e.reinit())},i.prototype.unload=function(){var i=this;e(".slick-cloned",i.$slider).remove(),i.$dots&&i.$dots.remove(),i.$prevArrow&&i.htmlExpr.test(i.options.prevArrow)&&i.$prevArrow.remove(),i.$nextArrow&&i.htmlExpr.test(i.options.nextArrow)&&i.$nextArrow.remove(),i.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden","true").css("width","")},i.prototype.unslick=function(e){var i=this;i.$slider.trigger("unslick",[i,e]),i.destroy()},i.prototype.updateArrows=function(){var e=this;Math.floor(e.options.slidesToShow/2),!0===e.options.arrows&&e.slideCount>e.options.slidesToShow&&!e.options.infinite&&(e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false"),e.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false"),0===e.currentSlide?(e.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false")):e.currentSlide>=e.slideCount-e.options.slidesToShow&&!1===e.options.centerMode?(e.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")):e.currentSlide>=e.slideCount-1&&!0===e.options.centerMode&&(e.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")))},i.prototype.updateDots=function(){var e=this;null!==e.$dots&&(e.$dots.find("li").removeClass("slick-active").end(),e.$dots.find("li").eq(Math.floor(e.currentSlide/e.options.slidesToScroll)).addClass("slick-active"))},i.prototype.visibility=function(){var e=this;e.options.autoplay&&(document[e.hidden]?e.interrupted=!0:e.interrupted=!1)},e.fn.slick=function(){var e,t,o=this,s=arguments[0],n=Array.prototype.slice.call(arguments,1),r=o.length;for(e=0;e<r;e++)if("object"==typeof s||void 0===s?o[e].slick=new i(o[e],s):t=o[e].slick[s].apply(o[e].slick,n),void 0!==t)return t;return o}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNjcmlwdC5qcyJdLCJuYW1lcyI6WyJjaGFuZ2VTbGlkZSIsInRhcmdldCIsImRpcmVjdGlvbiIsImFjdGl2ZVNsaWRlTnVtYmVyIiwiJCIsImluZGV4Iiwic2xpZGVzIiwic2xpZGVzUXVhbnRpdHkiLCJsZW5ndGgiLCJtYWtlU2xpZGVBY3RpdmUiLCJlcSIsInNsaWRlIiwiYWRkQ2xhc3MiLCJzaWJsaW5ncyIsInJlbW92ZUNsYXNzIiwiZGV0ZWN0U3dpcGUiLCJlbCIsImZ1bmMiLCJzd2lwZV9kZXQiLCJPYmplY3QiLCJzWCIsImVYIiwiZWxlbWVudCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsInQiLCJ0b3VjaGVzIiwic2NyZWVuWCIsInNZIiwiZVkiLCJteUZ1bmN0aW9uIiwiZHJhdyIsInRyaWFuZ2xlIiwibGl0dGxlIiwiZ2V0VG90YWxMZW5ndGgiLCJzdGFydFMiLCJ3aW5kb3ciLCJoZWlnaHQiLCJwb2ludDEiLCJvZmZzZXQiLCJwb2ludDIiLCJwb2ludDMiLCJwb2ludDQiLCJwb2ludDUiLCJzdHlsZSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJpbm5lcldpZHRoIiwicGFnZVlPZmZzZXQiLCJ0b3AiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJpbmRleE9mIiwiaXMiLCJzdHJva2UiLCJoYXNDbGFzcyIsInNldFRpbWVvdXQiLCJ0cmFuc2l0aW9uIiwiUGx1Z2luIiwib3B0aW9uIiwiX3JlbGF0ZWRUYXJnZXQiLCJ0aGlzIiwiZWFjaCIsIiR0aGlzIiwiZGF0YSIsIm9wdGlvbnMiLCJleHRlbmQiLCJNb2RhbCIsIkRFRkFVTFRTIiwic2hvdyIsIiRib2R5IiwiYm9keSIsIiRlbGVtZW50IiwiJGJhY2tkcm9wIiwiaXNTaG93biIsInNjcm9sbGJhcldpZHRoIiwicmVtb3RlIiwiZmluZCIsImxvYWQiLCJwcm94eSIsInRyaWdnZXIiLCJWRVJTSU9OIiwiVFJBTlNJVElPTl9EVVJBVElPTiIsIkJBQ0tEUk9QX1RSQU5TSVRJT05fRFVSQVRJT04iLCJiYWNrZHJvcCIsImtleWJvYXJkIiwicHJvdG90eXBlIiwidG9nZ2xlIiwiaGlkZSIsInRoYXQiLCJFdmVudCIsInJlbGF0ZWRUYXJnZXQiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJjaGVja1Njcm9sbGJhciIsInNldFNjcm9sbGJhciIsImVzY2FwZSIsInJlc2l6ZSIsIm9uIiwic3VwcG9ydCIsInBhcmVudCIsImFwcGVuZFRvIiwic2Nyb2xsVG9wIiwiYWRqdXN0QmFja2Ryb3AiLCJhZGp1c3REaWFsb2ciLCJvZmZzZXRXaWR0aCIsImF0dHIiLCJlbmZvcmNlRm9jdXMiLCJvbmUiLCJlbXVsYXRlVHJhbnNpdGlvbkVuZCIsInByZXZlbnREZWZhdWx0Iiwib2ZmIiwiaGlkZU1vZGFsIiwiaGFzIiwid2hpY2giLCJoYW5kbGVVcGRhdGUiLCJyZXNldEFkanVzdG1lbnRzIiwicmVzZXRTY3JvbGxiYXIiLCJyZW1vdmVCYWNrZHJvcCIsInJlbW92ZSIsImNhbGxiYWNrIiwiYW5pbWF0ZSIsImRvQW5pbWF0ZSIsInByZXBlbmRUbyIsImN1cnJlbnRUYXJnZXQiLCJmb2N1cyIsImNhbGwiLCJjYWxsYmFja1JlbW92ZSIsImNzcyIsInNjcm9sbEhlaWdodCIsIm1vZGFsSXNPdmVyZmxvd2luZyIsImRvY3VtZW50RWxlbWVudCIsImNsaWVudEhlaWdodCIsInBhZGRpbmdMZWZ0IiwiYm9keUlzT3ZlcmZsb3dpbmciLCJwYWRkaW5nUmlnaHQiLCJtZWFzdXJlU2Nyb2xsYmFyIiwiYm9keVBhZCIsInBhcnNlSW50Iiwic2Nyb2xsRGl2IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsImFwcGVuZCIsImNsaWVudFdpZHRoIiwicmVtb3ZlQ2hpbGQiLCJvbGQiLCJmbiIsIm1vZGFsIiwiQ29uc3RydWN0b3IiLCJub0NvbmZsaWN0IiwiaHJlZiIsIiR0YXJnZXQiLCJyZXBsYWNlIiwidGVzdCIsInNob3dFdmVudCIsImpRdWVyeSIsInJlYWR5IiwiY29uc29sZSIsImxvZyIsImNsaWNrIiwidG9nZ2xlQ2xhc3MiLCJiaW5kIiwiZGl2IiwiaG92ZXIiLCJvbmxvYWQiLCJiYWNrZ3JvdW5kVmlkZW8iLCJpIiwibiIsInZpZGVvaWQiLCJhdXRvcGxheSIsImxvb3AiLCJwcmVsb2FkIiwicyIsInNldHRpbmdzIiwiZCIsIm8iLCJnIiwiYSIsInBvc3RlciIsImwiLCJ0eXBlcyIsInBhdGgiLCJmaWxlbmFtZSIsInByZXBlbmQiLCJ2aWRlb0VsIiwiJHZpZGVvRWwiLCJmYWRlSW4iLCJyIiwid2lkdGgiLCJhbGlnbiIsImxlZnQiLCJwbGF5IiwicXVvbnRpdHkiLCJjaGlsZHJlbiIsInNsaWNrIiwic2xpZGVzVG9TaG93Iiwic2xpZGVzVG9TY3JvbGwiLCJhdXRvcGxheVNwZWVkIiwicmVzcG9uc2l2ZSIsImJyZWFrcG9pbnQiLCJpbmZpbml0ZSIsImZhY3RvcnkiLCJkZWZpbmUiLCJhbWQiLCJleHBvcnRzIiwibW9kdWxlIiwicmVxdWlyZSIsIlNsaWNrIiwiZGF0YVNldHRpbmdzIiwiXyIsImRlZmF1bHRzIiwiYWNjZXNzaWJpbGl0eSIsImFkYXB0aXZlSGVpZ2h0IiwiYXBwZW5kQXJyb3dzIiwiYXBwZW5kRG90cyIsImFycm93cyIsImFzTmF2Rm9yIiwicHJldkFycm93IiwibmV4dEFycm93IiwiY2VudGVyTW9kZSIsImNlbnRlclBhZGRpbmciLCJjc3NFYXNlIiwiY3VzdG9tUGFnaW5nIiwic2xpZGVyIiwidGV4dCIsImRvdHMiLCJkb3RzQ2xhc3MiLCJkcmFnZ2FibGUiLCJlYXNpbmciLCJlZGdlRnJpY3Rpb24iLCJmYWRlIiwiZm9jdXNPblNlbGVjdCIsImZvY3VzT25DaGFuZ2UiLCJpbml0aWFsU2xpZGUiLCJsYXp5TG9hZCIsIm1vYmlsZUZpcnN0IiwicGF1c2VPbkhvdmVyIiwicGF1c2VPbkZvY3VzIiwicGF1c2VPbkRvdHNIb3ZlciIsInJlc3BvbmRUbyIsInJvd3MiLCJydGwiLCJzbGlkZXNQZXJSb3ciLCJzcGVlZCIsInN3aXBlIiwic3dpcGVUb1NsaWRlIiwidG91Y2hNb3ZlIiwidG91Y2hUaHJlc2hvbGQiLCJ1c2VDU1MiLCJ1c2VUcmFuc2Zvcm0iLCJ2YXJpYWJsZVdpZHRoIiwidmVydGljYWwiLCJ2ZXJ0aWNhbFN3aXBpbmciLCJ3YWl0Rm9yQW5pbWF0ZSIsInpJbmRleCIsImluaXRpYWxzIiwiYW5pbWF0aW5nIiwiZHJhZ2dpbmciLCJhdXRvUGxheVRpbWVyIiwiY3VycmVudERpcmVjdGlvbiIsImN1cnJlbnRMZWZ0IiwiY3VycmVudFNsaWRlIiwiJGRvdHMiLCJsaXN0V2lkdGgiLCJsaXN0SGVpZ2h0IiwibG9hZEluZGV4IiwiJG5leHRBcnJvdyIsIiRwcmV2QXJyb3ciLCJzY3JvbGxpbmciLCJzbGlkZUNvdW50Iiwic2xpZGVXaWR0aCIsIiRzbGlkZVRyYWNrIiwiJHNsaWRlcyIsInNsaWRpbmciLCJzbGlkZU9mZnNldCIsInN3aXBlTGVmdCIsInN3aXBpbmciLCIkbGlzdCIsInRvdWNoT2JqZWN0IiwidHJhbnNmb3Jtc0VuYWJsZWQiLCJ1bnNsaWNrZWQiLCJhY3RpdmVCcmVha3BvaW50IiwiYW5pbVR5cGUiLCJhbmltUHJvcCIsImJyZWFrcG9pbnRzIiwiYnJlYWtwb2ludFNldHRpbmdzIiwiY3NzVHJhbnNpdGlvbnMiLCJmb2N1c3NlZCIsImludGVycnVwdGVkIiwiaGlkZGVuIiwicGF1c2VkIiwicG9zaXRpb25Qcm9wIiwicm93Q291bnQiLCJzaG91bGRDbGljayIsIiRzbGlkZXIiLCIkc2xpZGVzQ2FjaGUiLCJ0cmFuc2Zvcm1UeXBlIiwidHJhbnNpdGlvblR5cGUiLCJ2aXNpYmlsaXR5Q2hhbmdlIiwid2luZG93V2lkdGgiLCJ3aW5kb3dUaW1lciIsIm9yaWdpbmFsU2V0dGluZ3MiLCJtb3pIaWRkZW4iLCJ3ZWJraXRIaWRkZW4iLCJhdXRvUGxheSIsImF1dG9QbGF5Q2xlYXIiLCJhdXRvUGxheUl0ZXJhdG9yIiwiY2xpY2tIYW5kbGVyIiwic2VsZWN0SGFuZGxlciIsInNldFBvc2l0aW9uIiwic3dpcGVIYW5kbGVyIiwiZHJhZ0hhbmRsZXIiLCJrZXlIYW5kbGVyIiwiaW5zdGFuY2VVaWQiLCJodG1sRXhwciIsInJlZ2lzdGVyQnJlYWtwb2ludHMiLCJpbml0IiwiYWN0aXZhdGVBREEiLCJhcmlhLWhpZGRlbiIsInRhYmluZGV4IiwiYWRkU2xpZGUiLCJzbGlja0FkZCIsIm1hcmt1cCIsImFkZEJlZm9yZSIsInVubG9hZCIsImluc2VydEJlZm9yZSIsImluc2VydEFmdGVyIiwiZGV0YWNoIiwicmVpbml0IiwiYW5pbWF0ZUhlaWdodCIsInRhcmdldEhlaWdodCIsIm91dGVySGVpZ2h0IiwiYW5pbWF0ZVNsaWRlIiwidGFyZ2V0TGVmdCIsImFuaW1Qcm9wcyIsImFuaW1TdGFydCIsImR1cmF0aW9uIiwic3RlcCIsIm5vdyIsIk1hdGgiLCJjZWlsIiwiY29tcGxldGUiLCJhcHBseVRyYW5zaXRpb24iLCJkaXNhYmxlVHJhbnNpdGlvbiIsImdldE5hdlRhcmdldCIsIm5vdCIsInNsaWRlSGFuZGxlciIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsInNsaWRlVG8iLCJidWlsZEFycm93cyIsInJlbW92ZUF0dHIiLCJhZGQiLCJhcmlhLWRpc2FibGVkIiwiYnVpbGREb3RzIiwiZG90IiwiZ2V0RG90Q291bnQiLCJmaXJzdCIsImJ1aWxkT3V0Iiwid3JhcEFsbCIsIndyYXAiLCJzZXR1cEluZmluaXRlIiwidXBkYXRlRG90cyIsInNldFNsaWRlQ2xhc3NlcyIsImJ1aWxkUm93cyIsImIiLCJjIiwibmV3U2xpZGVzIiwibnVtT2ZTbGlkZXMiLCJvcmlnaW5hbFNsaWRlcyIsInNsaWRlc1BlclNlY3Rpb24iLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50Iiwicm93IiwiZ2V0IiwiYXBwZW5kQ2hpbGQiLCJlbXB0eSIsImRpc3BsYXkiLCJjaGVja1Jlc3BvbnNpdmUiLCJpbml0aWFsIiwiZm9yY2VVcGRhdGUiLCJ0YXJnZXRCcmVha3BvaW50IiwicmVzcG9uZFRvV2lkdGgiLCJ0cmlnZ2VyQnJlYWtwb2ludCIsInNsaWRlcldpZHRoIiwibWluIiwiaGFzT3duUHJvcGVydHkiLCJ1bnNsaWNrIiwicmVmcmVzaCIsImV2ZW50IiwiZG9udEFuaW1hdGUiLCJpbmRleE9mZnNldCIsInVuZXZlbk9mZnNldCIsImNsb3Nlc3QiLCJtZXNzYWdlIiwiY2hlY2tOYXZpZ2FibGUiLCJuYXZpZ2FibGVzIiwicHJldk5hdmlnYWJsZSIsImdldE5hdmlnYWJsZUluZGV4ZXMiLCJjbGVhblVwRXZlbnRzIiwiaW50ZXJydXB0IiwidmlzaWJpbGl0eSIsImNsZWFuVXBTbGlkZUV2ZW50cyIsIm9yaWVudGF0aW9uQ2hhbmdlIiwiY2xlYW5VcFJvd3MiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJzdG9wUHJvcGFnYXRpb24iLCJkZXN0cm95IiwiZmFkZVNsaWRlIiwic2xpZGVJbmRleCIsIm9wYWNpdHkiLCJmYWRlU2xpZGVPdXQiLCJmaWx0ZXJTbGlkZXMiLCJzbGlja0ZpbHRlciIsImZpbHRlciIsImZvY3VzSGFuZGxlciIsIiRzZiIsImdldEN1cnJlbnQiLCJzbGlja0N1cnJlbnRTbGlkZSIsImJyZWFrUG9pbnQiLCJjb3VudGVyIiwicGFnZXJRdHkiLCJnZXRMZWZ0IiwidmVydGljYWxIZWlnaHQiLCJ0YXJnZXRTbGlkZSIsImNvZWYiLCJ2ZXJ0aWNhbE9mZnNldCIsImZsb29yIiwib2Zmc2V0TGVmdCIsIm91dGVyV2lkdGgiLCJnZXRPcHRpb24iLCJzbGlja0dldE9wdGlvbiIsIm1heCIsImluZGV4ZXMiLCJwdXNoIiwiZ2V0U2xpY2siLCJnZXRTbGlkZUNvdW50Iiwic3dpcGVkU2xpZGUiLCJjZW50ZXJPZmZzZXQiLCJhYnMiLCJnb1RvIiwic2xpY2tHb1RvIiwiY3JlYXRpb24iLCJzZXRQcm9wcyIsInN0YXJ0TG9hZCIsImxvYWRTbGlkZXIiLCJpbml0aWFsaXplRXZlbnRzIiwidXBkYXRlQXJyb3dzIiwiaW5pdEFEQSIsIm51bURvdEdyb3VwcyIsInRhYkNvbnRyb2xJbmRleGVzIiwidmFsIiwic2xpZGVDb250cm9sSW5kZXgiLCJyb2xlIiwiaWQiLCJhcmlhLWRlc2NyaWJlZGJ5IiwibWFwcGVkU2xpZGVJbmRleCIsImFyaWEtY29udHJvbHMiLCJhcmlhLWxhYmVsIiwiYXJpYS1zZWxlY3RlZCIsImVuZCIsImluaXRBcnJvd0V2ZW50cyIsImluaXREb3RFdmVudHMiLCJpbml0U2xpZGVFdmVudHMiLCJhY3Rpb24iLCJpbml0VUkiLCJ0YWdOYW1lIiwibWF0Y2giLCJrZXlDb2RlIiwibG9hZEltYWdlcyIsImltYWdlc1Njb3BlIiwiaW1hZ2UiLCJpbWFnZVNvdXJjZSIsImltYWdlU3JjU2V0IiwiaW1hZ2VTaXplcyIsImltYWdlVG9Mb2FkIiwib25lcnJvciIsInNyYyIsImxvYWRSYW5nZSIsImNsb25lUmFuZ2UiLCJyYW5nZVN0YXJ0IiwicmFuZ2VFbmQiLCJzbGljZSIsInByZXZTbGlkZSIsIm5leHRTbGlkZSIsInByb2dyZXNzaXZlTGF6eUxvYWQiLCJuZXh0Iiwic2xpY2tOZXh0IiwicGF1c2UiLCJzbGlja1BhdXNlIiwic2xpY2tQbGF5IiwicG9zdFNsaWRlIiwicHJldiIsInNsaWNrUHJldiIsInRyeUNvdW50IiwiJGltZ3NUb0xvYWQiLCJpbml0aWFsaXppbmciLCJsYXN0VmlzaWJsZUluZGV4IiwiY3VycmVudEJyZWFrcG9pbnQiLCJyZXNwb25zaXZlU2V0dGluZ3MiLCJ0eXBlIiwic3BsaWNlIiwic29ydCIsImNsZWFyVGltZW91dCIsIndpbmRvd0RlbGF5IiwicmVtb3ZlU2xpZGUiLCJzbGlja1JlbW92ZSIsInJlbW92ZUJlZm9yZSIsInJlbW92ZUFsbCIsInNldENTUyIsInBvc2l0aW9uIiwieCIsInkiLCJwb3NpdGlvblByb3BzIiwic2V0RGltZW5zaW9ucyIsInBhZGRpbmciLCJzZXRGYWRlIiwicmlnaHQiLCJzZXRIZWlnaHQiLCJzZXRPcHRpb24iLCJzbGlja1NldE9wdGlvbiIsIml0ZW0iLCJ2YWx1ZSIsImFyZ3VtZW50cyIsIm9wdCIsImJvZHlTdHlsZSIsInVuZGVmaW5lZCIsIldlYmtpdFRyYW5zaXRpb24iLCJNb3pUcmFuc2l0aW9uIiwibXNUcmFuc2l0aW9uIiwiT1RyYW5zZm9ybSIsInBlcnNwZWN0aXZlUHJvcGVydHkiLCJ3ZWJraXRQZXJzcGVjdGl2ZSIsIk1velRyYW5zZm9ybSIsIk1velBlcnNwZWN0aXZlIiwid2Via2l0VHJhbnNmb3JtIiwibXNUcmFuc2Zvcm0iLCJ0cmFuc2Zvcm0iLCJhbGxTbGlkZXMiLCJyZW1haW5kZXIiLCJldmVuQ29lZiIsImluZmluaXRlQ291bnQiLCJjbG9uZSIsInRhcmdldEVsZW1lbnQiLCJwYXJlbnRzIiwic3luYyIsImFuaW1TbGlkZSIsIm9sZFNsaWRlIiwic2xpZGVMZWZ0IiwibmF2VGFyZ2V0Iiwic3dpcGVEaXJlY3Rpb24iLCJ4RGlzdCIsInlEaXN0Iiwic3dpcGVBbmdsZSIsInN0YXJ0WCIsImN1clgiLCJzdGFydFkiLCJjdXJZIiwiYXRhbjIiLCJyb3VuZCIsIlBJIiwic3dpcGVFbmQiLCJzd2lwZUxlbmd0aCIsImVkZ2VIaXQiLCJtaW5Td2lwZSIsImZpbmdlckNvdW50Iiwib3JpZ2luYWxFdmVudCIsInN3aXBlU3RhcnQiLCJzd2lwZU1vdmUiLCJjdXJMZWZ0IiwicG9zaXRpb25PZmZzZXQiLCJ2ZXJ0aWNhbFN3aXBlTGVuZ3RoIiwicGFnZVgiLCJjbGllbnRYIiwicGFnZVkiLCJjbGllbnRZIiwic3FydCIsInBvdyIsInVuZmlsdGVyU2xpZGVzIiwic2xpY2tVbmZpbHRlciIsImZyb21CcmVha3BvaW50IiwicmV0IiwiYXJncyIsIkFycmF5IiwiYXBwbHkiXSwibWFwcGluZ3MiOiJBQTB0Q0EsUUFBU0EsYUFBWUMsRUFBUUMsR0FDekIsR0FBSUMsR0FBb0JDLEVBQUVILEVBQVMsa0JBQWtCSSxRQUNqREMsRUFBU0YsRUFBRUgsRUFBUyxXQUNwQk0sRUFBaUJELEVBQU9FLE1BSXBCQyxpQkFGUyxRQUFiUCxFQUNJQyxHQUFxQkksRUFBaUIsRUFDdEJELEVBQU9JLEdBQUcsR0FFVkosRUFBT0ksR0FBR1AsRUFBb0IsR0FHekIsR0FB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RUFBRStJLEdBQUdnRCxNQUFRLFdBQ1QsR0FJSTVCLEdBQ0E4WixFQUxBblgsRUFBSW5KLEtBQ0o2YyxFQUFNRCxVQUFVLEdBQ2hCMkQsRUFBT0MsTUFBTS9lLFVBQVUwWSxNQUFNblcsS0FBSzRZLFVBQVcsR0FDN0N2VixFQUFJOEIsRUFBRTFNLE1BR1YsS0FBSytKLEVBQUksRUFBR0EsRUFBSWEsRUFBR2IsSUFLZixHQUprQixnQkFBUHFXLFFBQWlDLEtBQVBBLEVBQ2pDMVQsRUFBRTNDLEdBQUc0QixNQUFRLEdBQUlhLEdBQU1FLEVBQUUzQyxHQUFJcVcsR0FFN0J5RCxFQUFNblgsRUFBRTNDLEdBQUc0QixNQUFNeVUsR0FBSzRELE1BQU10WCxFQUFFM0MsR0FBRzRCLE1BQU9tWSxPQUMxQixLQUFQRCxFQUFvQixNQUFPQSxFQUUxQyxPQUFPblgiLCJmaWxlIjoic2NyaXB0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gJCgnLmZvb3Rlci1zY3JvbGwtdG9wJykub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuLy8gICAgICQoJ2JvZHksIGh0bWwnKS5hbmltYXRlKHtzY3JvbGxUb3A6IDB9LCA5MDApO1xuLy9cbi8vIH0pO1xuLy9cbi8vICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHtcbi8vICAgICBpZiAobmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdNYWMgT1MgWCcpICE9IC0xKSB7XG4vLyAgICAgICAgICQoJ2JvZHknKS5hZGRDbGFzcygncGxhdGZvcm0taW9zJyk7XG4vLyAgICAgfVxuLy8gICAgIC8vIHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbi8vICAgICAvLyAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ZpZGVvJykucGF1c2UoKTtcbi8vICAgICAvLyAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ZpZGVvJykucGxheSgpO1xuLy8gICAgIC8vIH0sMTAwMCk7XG4vLyB9KTtcbi8vXG4vLyAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XG4vLyAgICAgdmFyIHZpZGVvYmFja2dyb3VuZCA9IG5ldyAkLmJhY2tncm91bmRWaWRlbygkKCcudmlkZW8tY292ZXInKSwge1xuLy8gICAgICAgICBcImFsaWduXCI6IFwiY2VudGVyWFlcIixcbi8vICAgICAgICAgXCJ3aWR0aFwiOiAxMjgwLFxuLy8gICAgICAgICBcImhlaWdodFwiOiA3MjAsXG4vLyAgICAgICAgIFwicGF0aFwiOiBcImltZy9pbWFnZXMvXCIsXG4vLyAgICAgICAgIFwiZmlsZW5hbWVcIjogXCJtYWluLXZpZGVvXCIsXG4vLyAgICAgICAgIFwidHlwZXNcIjogW1wibXA0XCIsIFwib2dnXCIsIFwid2VibVwiXSxcbi8vICAgICAgICAgXCJwcmVsb2FkXCI6IHRydWUsXG4vLyAgICAgICAgIFwiYXV0b3BsYXlcIjogdHJ1ZSxcbi8vICAgICAgICAgXCJsb29wXCI6IHRydWVcbi8vICAgICB9KTtcbi8vIH0pO1xuLy9cbi8vXG4vL1xuLy8gLy8gaWYgKHdpbmRvdy5zY3JvbGxUb3A+IDUwMCl7XG4vLyAvLyAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ2aWRlb1wiKS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCJcbi8vIC8vIH1cbi8vIC8vIGNvbnNvbGUubG9nKHdpbmRvdy5zY3JvbGxUb3ApXG4vLyAvL01PREFMIE9QRU5cbi8vICQoXCIubWFpbi1idXR0b24sIC5wYWNrYWdlLWRldGFpbHNfbGlua1wiKS5vbihcImNsaWNrXCIsIGZ1bmN0aW9uIChlKSB7XG4vLyAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4vLyAgICAgLy8gY29uc29sZS5sb2coXCJNT0RBTFwiKVxuLy8gICAgICQoJyNteU1vZGFsJykubW9kYWwoJ3Nob3cnKTtcbi8vIH0pO1xuLy9cbi8vIC8vSEFNQlVSR0VSXG4vLyAkKFwiI2hhbWJ1cmdlclwiKS5jbGljayhmdW5jdGlvbiAoKSB7XG4vLyAgICAgJChcIiNoYW1idXJnZXItYmxvY2tcIikudG9nZ2xlQ2xhc3MoXCJoYW1idXJnZXJfX2FjdGl2ZVwiKTtcbi8vICAgICAkKFwiI25hdi1pY29uMlwiKS50b2dnbGVDbGFzcygnb3BlbicpO1xuLy8gfSk7XG4vL1xuLy8gJChkb2N1bWVudCkuYmluZCgndG91Y2hzdGFydCBjbGljaycsIGZ1bmN0aW9uIChlKSB7XG4vLyAgICAgdmFyIGRpdiA9ICQoXCIjaGFtYnVyZ2VyLWJsb2NrXCIpO1xuLy8gICAgIGlmICghZGl2LmlzKGUudGFyZ2V0KVxuLy8gICAgICAgICAmJiBkaXYuaGFzKGUudGFyZ2V0KS5sZW5ndGggPT09IDApIHtcbi8vICAgICAgICAgZGl2LnJlbW92ZUNsYXNzKFwiaGFtYnVyZ2VyX19hY3RpdmVcIik7XG4vLyAgICAgICAgICQoXCIjbmF2LWljb24yXCIpLnJlbW92ZUNsYXNzKCdvcGVuJyk7XG4vLyAgICAgfVxuLy8gfSk7XG4vL1xuLy9cbi8vIC8vIE5BVklHQVRJT05cbi8vXG4vLyAkKCcubmF2aWdhdGlvbi1pdGVtJykub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuLy8gICAgIHZhciBjdXJyZW50ID0gJCh0aGlzKS5pbmRleCgpLFxuLy8gICAgICAgICBtYXJrID0gXCJzZWN0aW9uLVwiICsgKDIgKyBjdXJyZW50KSxcbi8vICAgICAgICAgYW5jaG9yID0gJChcIiNcIiArIG1hcmspLm9mZnNldCgpO1xuLy8gICAgICQoJ2JvZHksIGh0bWwnKS5hbmltYXRlKHtcbi8vICAgICAgICAgc2Nyb2xsVG9wOiAoYW5jaG9yKS50b3Bcbi8vICAgICB9LCA5MDApO1xuLy8gfSk7XG4vL1xuLy8gJChcIi5wYWNrYWdlLWl0ZW1cIikuaG92ZXIoXG4vLyAgICAgZnVuY3Rpb24gKCkge1xuLy8gICAgICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKCdwYWNrYWdlLWl0ZW1fX2hvdmVyJykuc2libGluZ3MoKS5yZW1vdmVDbGFzcygncGFja2FnZS1pdGVtX19ob3ZlcicpO1xuLy8gICAgIH0sXG4vLyAgICAgZnVuY3Rpb24gKCkge1xuLy8gICAgICAgICAkKFwiI29wdGltYWxcIikuYWRkQ2xhc3MoJ3BhY2thZ2UtaXRlbV9faG92ZXInKTtcbi8vICAgICB9XG4vLyApO1xuLy9cbi8vIC8vU0xJREVSLVdvcmtzXG4vLyAkKCcuc2xpZGVyLWNvbnRyb2wnKS5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4vLyAgICAgdmFyIGRpcmVjdGlvbiA9ICQodGhpcykuZGF0YSgnZGlyZWN0aW9uJyk7XG4vLyAgICAgdmFyIHRhcmdldCA9ICQodGhpcykuZGF0YSgndGFyZ2V0JykgfHwgZmFsc2U7XG4vL1xuLy8gICAgIGlmICh0YXJnZXQpIHtcbi8vICAgICAgICAgY2hhbmdlU2xpZGUodGFyZ2V0LCBkaXJlY3Rpb24pO1xuLy8gICAgIH0gZWxzZSB7XG4vLyAgICAgICAgIGNoYW5nZVNsaWRlKCcud29ya3Mtc2xpZGVyLWJsb2NrJywgZGlyZWN0aW9uKTtcbi8vICAgICAgICAgY2hhbmdlU2xpZGUoJy5zbGlkZXItY29udGVudC1ibG9jaycsIGRpcmVjdGlvbik7XG4vLyAgICAgfVxuLy8gfSk7XG4vL1xuLy8gZnVuY3Rpb24gY2hhbmdlU2xpZGUodGFyZ2V0LCBkaXJlY3Rpb24pIHtcbi8vICAgICB2YXIgYWN0aXZlU2xpZGVOdW1iZXIgPSAkKHRhcmdldCArICcgLmFjdGl2ZS1zbGlkZScpLmluZGV4KCk7XG4vLyAgICAgdmFyIHNsaWRlcyA9ICQodGFyZ2V0ICsgJyAuc2xpZGUnKTtcbi8vICAgICB2YXIgc2xpZGVzUXVhbnRpdHkgPSBzbGlkZXMubGVuZ3RoO1xuLy9cbi8vICAgICBpZiAoZGlyZWN0aW9uID09IFwibmV4dFwiKSB7XG4vLyAgICAgICAgIGlmIChhY3RpdmVTbGlkZU51bWJlciA9PSBzbGlkZXNRdWFudGl0eSAtIDEpIHtcbi8vICAgICAgICAgICAgIG1ha2VTbGlkZUFjdGl2ZShzbGlkZXMuZXEoMCkpO1xuLy8gICAgICAgICB9IGVsc2Uge1xuLy8gICAgICAgICAgICAgbWFrZVNsaWRlQWN0aXZlKHNsaWRlcy5lcShhY3RpdmVTbGlkZU51bWJlciArIDEpKTtcbi8vICAgICAgICAgfVxuLy8gICAgIH0gZWxzZSB7XG4vLyAgICAgICAgIGlmIChhY3RpdmVTbGlkZU51bWJlciA9PSAwKSB7XG4vLyAgICAgICAgICAgICBtYWtlU2xpZGVBY3RpdmUoc2xpZGVzLmVxKHNsaWRlc1F1YW50aXR5IC0gMSkpO1xuLy8gICAgICAgICB9IGVsc2Uge1xuLy8gICAgICAgICAgICAgbWFrZVNsaWRlQWN0aXZlKHNsaWRlcy5lcShhY3RpdmVTbGlkZU51bWJlciAtIDEpKTtcbi8vICAgICAgICAgfVxuLy8gICAgIH1cbi8vIH1cbi8vXG4vLyBmdW5jdGlvbiBtYWtlU2xpZGVBY3RpdmUoc2xpZGUpIHtcbi8vICAgICBzbGlkZS5hZGRDbGFzcygnYWN0aXZlLXNsaWRlJykuc2libGluZ3MoKS5yZW1vdmVDbGFzcygnYWN0aXZlLXNsaWRlJyk7XG4vLyB9XG4vL1xuLy8gLy9UT0RPOjpyZWZhY3RvciB0aGlzIHNoaXRcbi8vIGZ1bmN0aW9uIGRldGVjdFN3aXBlKGVsLCB0YXJnZXQsIGZ1bmMpIHtcbi8vXG4vLyAgICAgc3dpcGVfZGV0ID0gbmV3IE9iamVjdCgpO1xuLy8gICAgIHN3aXBlX2RldC5zWCA9IDA7XG4vLyAgICAgc3dpcGVfZGV0LmVYID0gMDtcbi8vICAgICB2YXIgbWluX3ggPSA1MDtcbi8vXG4vLyAgICAgdmFyIGRpcmVjdGlvbiA9IFwiXCI7XG4vLyAgICAgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsKTtcbi8vICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBmdW5jdGlvbiAoZSkge1xuLy8gICAgICAgICB2YXIgdCA9IGUudG91Y2hlc1swXTtcbi8vICAgICAgICAgc3dpcGVfZGV0LnNYID0gdC5zY3JlZW5YO1xuLy8gICAgIH0sIGZhbHNlKTtcbi8vICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIGZ1bmN0aW9uIChlKSB7XG4vLyAgICAgICAgIHZhciB0ID0gZS50b3VjaGVzWzBdO1xuLy8gICAgICAgICBzd2lwZV9kZXQuZVggPSB0LnNjcmVlblg7XG4vLyAgICAgfSwgZmFsc2UpO1xuLy8gICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBmdW5jdGlvbiAoKSB7XG4vLyAgICAgICAgIC8vaG9yaXpvbnRhbCBkZXRlY3Rpb25cbi8vICAgICAgICAgaWYgKCgoKHN3aXBlX2RldC5lWCAtIG1pbl94ID4gc3dpcGVfZGV0LnNYKSB8fCAoc3dpcGVfZGV0LmVYICsgbWluX3ggPCBzd2lwZV9kZXQuc1gpKSAmJiAoc3dpcGVfZGV0LmVYID4gMCkpKSB7XG4vLyAgICAgICAgICAgICBpZiAoc3dpcGVfZGV0LmVYID4gc3dpcGVfZGV0LnNYKSBkaXJlY3Rpb24gPSBcInByZXZcIjtcbi8vICAgICAgICAgICAgIGVsc2UgZGlyZWN0aW9uID0gXCJuZXh0XCI7XG4vLyAgICAgICAgIH1cbi8vICAgICAgICAgaWYgKGRpcmVjdGlvbiAhPSBcIlwiKSB7XG4vLyAgICAgICAgICAgICBpZiAodHlwZW9mIGZ1bmMgPT0gJ2Z1bmN0aW9uJykge1xuLy8gICAgICAgICAgICAgICAgIC8vVE9ETzo6cmVmYWN0b3IgdGhpcyBibG9vZHkgY3JhcFxuLy8gICAgICAgICAgICAgICAgIGlmICh0YXJnZXQpIHtcbi8vICAgICAgICAgICAgICAgICAgICAgZnVuYyh0YXJnZXQsIGRpcmVjdGlvbik7XG4vLyAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbi8vICAgICAgICAgICAgICAgICAgICAgZnVuYygnLndvcmtzLXNsaWRlci1ibG9jaycsIGRpcmVjdGlvbik7XG4vLyAgICAgICAgICAgICAgICAgICAgIGZ1bmMoJy5zbGlkZXItY29udGVudC1ibG9jaycsIGRpcmVjdGlvbik7XG4vLyAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgfVxuLy8gICAgICAgICB9XG4vLyAgICAgICAgIGRpcmVjdGlvbiA9IFwiXCI7XG4vLyAgICAgICAgIHN3aXBlX2RldC5zWCA9IDA7XG4vLyAgICAgICAgIHN3aXBlX2RldC5zWSA9IDA7XG4vLyAgICAgICAgIHN3aXBlX2RldC5lWCA9IDA7XG4vLyAgICAgICAgIHN3aXBlX2RldC5lWSA9IDA7XG4vLyAgICAgfSwgZmFsc2UpO1xuLy8gfVxuLy9cbi8vIGRldGVjdFN3aXBlKCdzZWN0aW9uLTMnLCBmYWxzZSwgY2hhbmdlU2xpZGUpO1xuLy8gZGV0ZWN0U3dpcGUoJ3NlY3Rpb24tcXVvdGUnLCAnI3F1b3Rlc1NsaWRlcicsIGNoYW5nZVNsaWRlKTtcbi8vXG4vL1xuLy8gd2luZG93Lm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbi8vICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCBteUZ1bmN0aW9uKTtcbi8vIH07XG4vL1xuLy9cbi8vIGZ1bmN0aW9uIG15RnVuY3Rpb24oKSB7XG4vLyAgICAgLy9MaW5lKyBjaXJjbGVzIC0gYW5pbWF0aW9uXG4vLyAgICAgdmFyIHRyaWFuZ2xlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0cmlhbmdsZVwiKSxcbi8vICAgICAgICAgbGl0dGxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzdDJcIiksXG4vLyAgICAgICAgIGxlbmd0aCA9IHRyaWFuZ2xlLmdldFRvdGFsTGVuZ3RoKCksXG4vLyAgICAgICAgIHN0YXJ0UyA9ICQod2luZG93KS5oZWlnaHQoKSAvIDIsXG4vLyAgICAgICAgIHBvaW50MSA9ICQoXCIjY2lyY2xlLTFcIikub2Zmc2V0KCksXG4vLyAgICAgICAgIHBvaW50MiA9ICQoXCIjY2lyY2xlLTJcIikub2Zmc2V0KCksXG4vLyAgICAgICAgIHBvaW50MyA9ICQoXCIjY2lyY2xlLTNcIikub2Zmc2V0KCksXG4vLyAgICAgICAgIHBvaW50NCA9ICQoXCIjY2lyY2xlLTRcIikub2Zmc2V0KCksXG4vLyAgICAgICAgIGRyYXc7XG4vL1xuLy9cbi8vICAgICB0cmlhbmdsZS5zdHlsZS5zdHJva2VEYXNoYXJyYXkgPSBsZW5ndGg7XG4vLyAgICAgdHJpYW5nbGUuc3R5bGUuc3Ryb2tlRGFzaG9mZnNldCA9IGxlbmd0aDtcbi8vXG4vLyAgICAgaWYgKHdpbmRvdy5pbm5lcldpZHRoID09IDEwMjQpIHtcbi8vICAgICAgICAgaWYgKHdpbmRvdy5wYWdlWU9mZnNldCArIDEuMSAqIHN0YXJ0UyA+IHBvaW50NC50b3ApIHtcbi8vICAgICAgICAgICAgIGRyYXcgPSB3aW5kb3cucGFnZVlPZmZzZXQgLSBwb2ludDEudG9wICsgMS4zNSAqIHN0YXJ0Uztcbi8vICAgICAgICAgICAgIHRyaWFuZ2xlLnN0eWxlLnN0cm9rZURhc2hvZmZzZXQgPSBsZW5ndGggLSAxLjM1ICogZHJhdztcbi8vICAgICAgICAgICAgIGlmIChuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ01hYyBPUyBYJykgIT0gLTEpIHtcbi8vICAgICAgICAgICAgICAgICBpZiAobGVuZ3RoIC0gMS4zNSAqIGRyYXcgPD0gMCkge1xuLy8gICAgICAgICAgICAgICAgICAgICB0cmlhbmdsZS5zdHlsZS5zdHJva2VEYXNob2Zmc2V0ID0gMDtcbi8vICAgICAgICAgICAgICAgICAgICAgbGl0dGxlLnN0eWxlLnN0cm9rZSA9IFwiI0VFNDRBNFwiO1xuLy8gICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcImFycm93IGRyYXdcIilcbi8vICAgICAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICBpZiAoJChcIiNjaXJjbGUtNFwiKS5oYXNDbGFzcyhcImNpcmNsZS00X19hY3RpdmVcIikgPT0gMSkge1xuLy8gICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuLy8gICAgICAgICAgICAgICAgICAgICAkKFwiI2NpcmNsZS01XCIpLmFkZENsYXNzKFwiY2lyY2xlLTVfX2FjdGl2ZVwiKVxuLy8gICAgICAgICAgICAgICAgIH0sIDYwMCk7XG4vLyAgICAgICAgICAgICB9XG4vLyAgICAgICAgIH0gZWxzZSB7XG4vLyAgICAgICAgICAgICBpZiAod2luZG93LnBhZ2VZT2Zmc2V0ICsgMS4xICogc3RhcnRTID49IHBvaW50MS50b3ApIHtcbi8vICAgICAgICAgICAgICAgICBkcmF3ID0gd2luZG93LnBhZ2VZT2Zmc2V0IC0gcG9pbnQxLnRvcCArIDEuMyAqIHN0YXJ0Uztcbi8vICAgICAgICAgICAgICAgICB0cmlhbmdsZS5zdHlsZS5zdHJva2VEYXNob2Zmc2V0ID0gbGVuZ3RoIC0gZHJhdztcbi8vICAgICAgICAgICAgIH1cbi8vICAgICAgICAgfVxuLy8gICAgIH0gZWxzZSB7XG4vLyAgICAgICAgIGlmICh3aW5kb3cucGFnZVlPZmZzZXQgKyAxLjEgKiBzdGFydFMgPiBwb2ludDQudG9wKSB7XG4vLyAgICAgICAgICAgICBkcmF3ID0gd2luZG93LnBhZ2VZT2Zmc2V0IC0gcG9pbnQxLnRvcCArIDEuMSAqIHN0YXJ0Uztcbi8vICAgICAgICAgICAgIHRyaWFuZ2xlLnN0eWxlLnN0cm9rZURhc2hvZmZzZXQgPSBsZW5ndGggLSAxLjIgKiBkcmF3O1xuLy8gICAgICAgICAgICAgaWYgKG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignTWFjIE9TIFgnKSAhPSAtMSkge1xuLy8gICAgICAgICAgICAgICAgIGlmIChsZW5ndGggLSAxLjIgKiBkcmF3IDw9IDApIHtcbi8vICAgICAgICAgICAgICAgICAgICAgdHJpYW5nbGUuc3R5bGUuc3Ryb2tlRGFzaG9mZnNldCA9IDA7XG4vLyAgICAgICAgICAgICAgICAgICAgIGxpdHRsZS5zdHlsZS5zdHJva2UgPSBcIiNFRTQ0QTRcIjtcbi8vICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJhcnJvdyBkcmF3XCIpXG4vLyAgICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgaWYgKCQoXCIjY2lyY2xlLTRcIikuaGFzQ2xhc3MoXCJjaXJjbGUtNF9fYWN0aXZlXCIpID09IDEpIHtcbi8vICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbi8vICAgICAgICAgICAgICAgICAgICAgJChcIiNjaXJjbGUtNVwiKS5hZGRDbGFzcyhcImNpcmNsZS01X19hY3RpdmVcIilcbi8vICAgICAgICAgICAgICAgICB9LCA2MDApO1xuLy8gICAgICAgICAgICAgfVxuLy8gICAgICAgICB9IGVsc2Uge1xuLy8gICAgICAgICAgICAgaWYgKHdpbmRvdy5wYWdlWU9mZnNldCArIDEuMSAqIHN0YXJ0UyA+PSBwb2ludDEudG9wKSB7XG4vLyAgICAgICAgICAgICAgICAgZHJhdyA9IHdpbmRvdy5wYWdlWU9mZnNldCAtIHBvaW50MS50b3AgKyAxLjEgKiBzdGFydFM7XG4vLyAgICAgICAgICAgICAgICAgdHJpYW5nbGUuc3R5bGUuc3Ryb2tlRGFzaG9mZnNldCA9IGxlbmd0aCAtIGRyYXc7XG4vLyAgICAgICAgICAgICB9XG4vLyAgICAgICAgIH1cbi8vICAgICB9XG4vLyAgICAgaWYgKHdpbmRvdy5wYWdlWU9mZnNldCA9PSAwKSB7XG4vLyAgICAgICAgIHRyaWFuZ2xlLnN0eWxlLnN0cm9rZURhc2hvZmZzZXQgPSBsZW5ndGg7XG4vLyAgICAgfVxuLy8gICAgIGlmICh0cmlhbmdsZS5zdHlsZS5zdHJva2VEYXNob2Zmc2V0IDw9IDAgfHwgdHJpYW5nbGUuc3R5bGUuc3Ryb2tlRGFzaG9mZnNldCA9PSAnMHB4JyApIHtcbi8vICAgICAgICAgbGl0dGxlLnN0eWxlLnN0cm9rZSA9IFwiI0VFNDRBNFwiO1xuLy8gICAgICAgICB0cmlhbmdsZS5zdHlsZS50cmFuc2l0aW9uID0gXCIwc1wiO1xuLy8gICAgICAgICB0cmlhbmdsZS5zdHlsZS5zdHJva2VEYXNoYXJyYXkgPSAwO1xuLy8gICAgIH0gZWxzZSB7XG4vLyAgICAgICAgIC8vIGNvbnNvbGUubG9nKHRyaWFuZ2xlLnN0eWxlLnN0cm9rZURhc2hvZmZzZXQpO1xuLy8gICAgICAgICBsaXR0bGUuc3R5bGUuc3Ryb2tlID0gXCJub25lXCI7XG4vLyAgICAgfVxuLy8gICAgIGlmICh3aW5kb3cucGFnZVlPZmZzZXQgKyAxLjEgKiBzdGFydFMgPiBwb2ludDEudG9wKSB7XG4vLyAgICAgICAgICQoXCIjY2lyY2xlLTFcIikuYWRkQ2xhc3MoXCJjaXJjbGVfX2FjdGl2ZVwiKTtcbi8vICAgICB9XG4vLyAgICAgaWYgKHdpbmRvdy5wYWdlWU9mZnNldCArIDEuMSAqIHN0YXJ0UyA+IHBvaW50Mi50b3ApIHtcbi8vICAgICAgICAgJChcIiNjaXJjbGUtMlwiKS5hZGRDbGFzcyhcImNpcmNsZS0yX19hY3RpdmVcIik7XG4vLyAgICAgfVxuLy8gICAgIGlmICh3aW5kb3cucGFnZVlPZmZzZXQgKyAxLjEgKiBzdGFydFMgPiBwb2ludDMudG9wKSB7XG4vLyAgICAgICAgICQoXCIjY2lyY2xlLTNcIikuYWRkQ2xhc3MoXCJjaXJjbGUtM19fYWN0aXZlXCIpO1xuLy8gICAgIH1cbi8vICAgICBpZiAod2luZG93LnBhZ2VZT2Zmc2V0ICsgMS4xICogc3RhcnRTID4gcG9pbnQ0LnRvcCkge1xuLy8gICAgICAgICAkKFwiI2NpcmNsZS00XCIpLmFkZENsYXNzKFwiY2lyY2xlLTRfX2FjdGl2ZVwiKTtcbi8vICAgICB9XG4vLyB9XG4vL1xuLy9cbi8vIC8vTU9EQUxcbi8vXG4vL1xuLy8gJChcIi5pdGVtLWNvdmVyXCIpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xuLy8gICAgICQodGhpcykuYWRkQ2xhc3MoJ2l0ZW0tY292ZXJfX2FjdGl2ZScpLnJlbW92ZUNsYXNzKCdpdGVtLWNvdmVyX19lcnJvcicpLnNpYmxpbmdzKCkucmVtb3ZlQ2xhc3MoJ2l0ZW0tY292ZXJfX2FjdGl2ZScpXG4vLyB9KTtcbi8vIC8vVE9ETzo6ZGVsZXRlIGF0ZXIgcmV2aWV3c1xuLy8gJCgnLnF1b3RlLWl0ZW1fbGluaycpLm9uKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XG4vLyAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuLy8gfSk7XG4vLyAvL1xuLy8gLy9cbi8vICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHtcbi8vICAgICBpZiAobmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdNYWMgT1MgWCcpICE9IC0xKSB7XG4vLyAgICAgICAgICQoJ2JvZHknKS5hZGRDbGFzcygncGxhdGZvcm0taW9zJyk7XG4vL1xuLy8gICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4vLyAgICAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndmlkZW8nKS5wYXVzZSgpO1xuLy8gICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ZpZGVvJykucGxheSgpO1xuLy8gICAgICAgICB9LDEwMDApO1xuLy8gICAgIH1cbi8vXG4vLyB9KTtcbi8vXG4vLyAoZnVuY3Rpb24gKHQpIHtcbi8vICAgICB0LmJhY2tncm91bmRWaWRlbyA9IGZ1bmN0aW9uIChlLCBpKSB7XG4vLyAgICAgICAgIHZhciBuID0ge3ZpZGVvaWQ6IFwidmlkZW9fYmFja2dyb3VuZFwiLCBhdXRvcGxheTogdHJ1ZSwgbG9vcDogdHJ1ZSwgcHJlbG9hZDogdHJ1ZX07XG4vLyAgICAgICAgIHZhciBzID0gdGhpcztcbi8vICAgICAgICAgcy5zZXR0aW5ncyA9IHt9O1xuLy8gICAgICAgICB2YXIgbyA9IGZ1bmN0aW9uICgpIHtcbi8vICAgICAgICAgICAgIHMuc2V0dGluZ3MgPSB0LmV4dGVuZCh7fSwgbiwgaSk7XG4vLyAgICAgICAgICAgICBzLmVsID0gZTtcbi8vICAgICAgICAgICAgIGQoKVxuLy8gICAgICAgICB9O1xuLy8gICAgICAgICB2YXIgZCA9IGZ1bmN0aW9uICgpIHtcbi8vICAgICAgICAgICAgIHZhciBlID0gXCJcIiwgaSA9IFwiXCIsIG4gPSBcIlwiLCBvID0gXCJcIiwgZCA9IHMuc2V0dGluZ3MucHJlbG9hZCwgZyA9IHMuc2V0dGluZ3MuYXV0b3BsYXksIGEgPSBzLnNldHRpbmdzLmxvb3A7XG4vLyAgICAgICAgICAgICBpZiAoZCkge1xuLy8gICAgICAgICAgICAgICAgIGkgPSAncHJlbG9hZD1cImF1dG9cIidcbi8vICAgICAgICAgICAgIH0gZWxzZSB7XG4vLyAgICAgICAgICAgICAgICAgaSA9IFwiXCJcbi8vICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgIGlmIChnKSB7XG4vLyAgICAgICAgICAgICAgICAgbiA9ICdhdXRvcGxheT1cImF1dG9wbGF5XCInXG4vLyAgICAgICAgICAgICB9IGVsc2Uge1xuLy8gICAgICAgICAgICAgICAgIG4gPSBcIlwiXG4vLyAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICBpZiAoYSkge1xuLy8gICAgICAgICAgICAgICAgIG8gPSAnbG9vcD1cInRydWVcIidcbi8vICAgICAgICAgICAgIH0gZWxzZSB7XG4vLyAgICAgICAgICAgICAgICAgbyA9IFwiXCJcbi8vICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgIGUgKz0gJzx2aWRlbyBpZD1cIicgKyBzLnNldHRpbmdzLnZpZGVvaWQgKyAnXCInICsgaSArIG4gKyBvO1xuLy8gICAgICAgICAgICAgaWYgKHMuc2V0dGluZ3MucG9zdGVyKSB7XG4vLyAgICAgICAgICAgICAgICAgZSArPSAnIHBvc3Rlcj1cIicgKyBzLnNldHRpbmdzLnBvc3RlciArICdcIiAnXG4vLyAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICBlICs9ICdzdHlsZT1cImRpc3BsYXk6bm9uZTtwb3NpdGlvbjpyZWxhdGl2ZTs7dG9wOjA7bGVmdDowO2JvdHRvbTowO3JpZ2h0OjA7ei1pbmRleDotMTAwO3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7XCI+Jztcbi8vICAgICAgICAgICAgIGZvciAodmFyIGwgPSAwOyBsIDwgcy5zZXR0aW5ncy50eXBlcy5sZW5ndGg7IGwrKykge1xuLy8gICAgICAgICAgICAgICAgIGUgKz0gJzxzb3VyY2Ugc3JjPVwiJyArIHMuc2V0dGluZ3MucGF0aCArIHMuc2V0dGluZ3MuZmlsZW5hbWUgKyBcIi5cIiArIHMuc2V0dGluZ3MudHlwZXNbbF0gKyAnXCIgdHlwZT1cInZpZGVvLycgKyBzLnNldHRpbmdzLnR5cGVzW2xdICsgJ1wiIC8+J1xuLy8gICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgZSArPSBcImJndmlkZW88L3ZpZGVvPlwiO1xuLy8gICAgICAgICAgICAgcy5lbC5wcmVwZW5kKGUpO1xuLy8gICAgICAgICAgICAgcy52aWRlb0VsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocy5zZXR0aW5ncy52aWRlb2lkKTtcbi8vICAgICAgICAgICAgIHMuJHZpZGVvRWwgPSB0KHMudmlkZW9FbCk7XG4vLyAgICAgICAgICAgICBzLiR2aWRlb0VsLmZhZGVJbigyZTMpO1xuLy8gICAgICAgICAgICAgcigpXG4vLyAgICAgICAgIH07XG4vLyAgICAgICAgIHZhciByID0gZnVuY3Rpb24gKCkge1xuLy8gICAgICAgICAgICAgdmFyIHQgPSBnKCk7XG4vLyAgICAgICAgICAgICBzLiR2aWRlb0VsLndpZHRoKHQgKiBzLnNldHRpbmdzLndpZHRoKTtcbi8vICAgICAgICAgICAgIHMuJHZpZGVvRWwuaGVpZ2h0KHQgKiBzLnNldHRpbmdzLmhlaWdodCk7XG4vLyAgICAgICAgICAgICBpZiAodHlwZW9mIHMuc2V0dGluZ3MuYWxpZ24gIT09IFwidW5kZWZpbmVkXCIpIHtcbi8vICAgICAgICAgICAgICAgICBhKClcbi8vICAgICAgICAgICAgIH1cbi8vICAgICAgICAgfTtcbi8vICAgICAgICAgdmFyIGcgPSBmdW5jdGlvbiAoKSB7XG4vLyAgICAgICAgICAgICB2YXIgZSA9IHQod2luZG93KS53aWR0aCgpO1xuLy8gICAgICAgICAgICAgdmFyIGkgPSB0KHdpbmRvdykuaGVpZ2h0KCk7XG4vLyAgICAgICAgICAgICB2YXIgbiA9IGUgLyBpO1xuLy8gICAgICAgICAgICAgdmFyIG8gPSBzLnNldHRpbmdzLndpZHRoIC8gcy5zZXR0aW5ncy5oZWlnaHQ7XG4vLyAgICAgICAgICAgICB2YXIgZCA9IGkgLyBzLnNldHRpbmdzLmhlaWdodDtcbi8vICAgICAgICAgICAgIGlmIChuID49IG8pIHtcbi8vICAgICAgICAgICAgICAgICBkID0gZSAvIHMuc2V0dGluZ3Mud2lkdGhcbi8vICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgIHJldHVybiBkXG4vLyAgICAgICAgIH07XG4vLyAgICAgICAgIHZhciBhID0gZnVuY3Rpb24gKCkge1xuLy8gICAgICAgICAgICAgdmFyIGUgPSAodCh3aW5kb3cpLndpZHRoKCkgPj4gMSkgLSAocy4kdmlkZW9FbC53aWR0aCgpID4+IDEpIHwgMDtcbi8vICAgICAgICAgICAgIHZhciBpID0gKHQod2luZG93KS5oZWlnaHQoKSA+PiAxKSAtIChzLiR2aWRlb0VsLmhlaWdodCgpID4+IDEpIHwgMDtcbi8vICAgICAgICAgICAgIGlmIChzLnNldHRpbmdzLmFsaWduID09IFwiY2VudGVyWFlcIikge1xuLy8gICAgICAgICAgICAgICAgIHMuJHZpZGVvRWwuY3NzKHtsZWZ0OiBlLCB0b3A6IGl9KTtcbi8vICAgICAgICAgICAgICAgICByZXR1cm5cbi8vICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgIGlmIChzLnNldHRpbmdzLmFsaWduID09IFwiY2VudGVyWFwiKSB7XG4vLyAgICAgICAgICAgICAgICAgcy4kdmlkZW9FbC5jc3MoXCJsZWZ0XCIsIGUpO1xuLy8gICAgICAgICAgICAgICAgIHJldHVyblxuLy8gICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgaWYgKHMuc2V0dGluZ3MuYWxpZ24gPT0gXCJjZW50ZXJZXCIpIHtcbi8vICAgICAgICAgICAgICAgICBzLiR2aWRlb0VsLmNzcyhcInRvcFwiLCBpKTtcbi8vICAgICAgICAgICAgICAgICByZXR1cm5cbi8vICAgICAgICAgICAgIH1cbi8vICAgICAgICAgfTtcbi8vICAgICAgICAgbygpO1xuLy8gICAgICAgICB0KHdpbmRvdykucmVzaXplKGZ1bmN0aW9uICgpIHtcbi8vICAgICAgICAgICAgIHIoKVxuLy8gICAgICAgICB9KTtcbi8vICAgICAgICAgcy4kdmlkZW9FbC5iaW5kKFwiZW5kZWRcIiwgZnVuY3Rpb24gKCkge1xuLy8gICAgICAgICAgICAgdGhpcy5wbGF5KClcbi8vICAgICAgICAgfSlcbi8vICAgICB9XG4vLyB9KShqUXVlcnkpO1xuLy8gJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xuLy8gICAgIHZhciB2aWRlb2JhY2tncm91bmQgPSBuZXcgJC5iYWNrZ3JvdW5kVmlkZW8oJCgnLnZpZGVvLWNvdmVyJyksIHtcbi8vICAgICAgICAgXCJhbGlnblwiOiBcImNlbnRlclhZXCIsXG4vLyAgICAgICAgIFwid2lkdGhcIjogMTI4MCxcbi8vICAgICAgICAgXCJoZWlnaHRcIjogNzIwLFxuLy8gICAgICAgICBcInBhdGhcIjogXCJpbWcvaW1hZ2VzL1wiLFxuLy8gICAgICAgICBcImZpbGVuYW1lXCI6IFwibWFpbi12aWRlb1wiLFxuLy8gICAgICAgICBcInR5cGVzXCI6IFtcIm1wNFwiLCBcIm9nZ1wiLCBcIndlYm1cIl0sXG4vLyAgICAgICAgIFwicHJlbG9hZFwiOiB0cnVlLFxuLy8gICAgICAgICBcImF1dG9wbGF5XCI6IHRydWUsXG4vLyAgICAgICAgIFwibG9vcFwiOiB0cnVlXG4vLyAgICAgfSk7XG4vLyB9KTtcbi8vXG4vL1xuLy8gLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyAgKiBCb290c3RyYXA6IG1vZGFsLmpzIHYzLjMuMlxuLy8gICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jbW9kYWxzXG4vLyAgKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vICAqIENvcHlyaWdodCAyMDExLTIwMTUgVHdpdHRlciwgSW5jLlxuLy8gICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbi8vICAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLy9cbi8vXG4vLyArZnVuY3Rpb24gKCQpIHtcbi8vICAgJ3VzZSBzdHJpY3QnO1xuLy9cbi8vICAgLy8gTU9EQUwgQ0xBU1MgREVGSU5JVElPTlxuLy8gICAvLyA9PT09PT09PT09PT09PT09PT09PT09XG4vL1xuLy8gICB2YXIgTW9kYWwgPSBmdW5jdGlvbiAoZWxlbWVudCwgb3B0aW9ucykge1xuLy8gICAgIHRoaXMub3B0aW9ucyAgICAgICAgPSBvcHRpb25zXG4vLyAgICAgdGhpcy4kYm9keSAgICAgICAgICA9ICQoZG9jdW1lbnQuYm9keSlcbi8vICAgICB0aGlzLiRlbGVtZW50ICAgICAgID0gJChlbGVtZW50KVxuLy8gICAgIHRoaXMuJGJhY2tkcm9wICAgICAgPVxuLy8gICAgIHRoaXMuaXNTaG93biAgICAgICAgPSBudWxsXG4vLyAgICAgdGhpcy5zY3JvbGxiYXJXaWR0aCA9IDBcbi8vXG4vLyAgICAgaWYgKHRoaXMub3B0aW9ucy5yZW1vdGUpIHtcbi8vICAgICAgIHRoaXMuJGVsZW1lbnRcbi8vICAgICAgICAgLmZpbmQoJy5tb2RhbC1jb250ZW50Jylcbi8vICAgICAgICAgLmxvYWQodGhpcy5vcHRpb25zLnJlbW90ZSwgJC5wcm94eShmdW5jdGlvbiAoKSB7XG4vLyAgICAgICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdsb2FkZWQuYnMubW9kYWwnKVxuLy8gICAgICAgICB9LCB0aGlzKSlcbi8vICAgICB9XG4vLyAgIH1cbi8vXG4vLyAgIE1vZGFsLlZFUlNJT04gID0gJzMuMy4yJ1xuLy9cbi8vICAgTW9kYWwuVFJBTlNJVElPTl9EVVJBVElPTiA9IDMwMFxuLy8gICBNb2RhbC5CQUNLRFJPUF9UUkFOU0lUSU9OX0RVUkFUSU9OID0gMTUwXG4vL1xuLy8gICBNb2RhbC5ERUZBVUxUUyA9IHtcbi8vICAgICBiYWNrZHJvcDogdHJ1ZSxcbi8vICAgICBrZXlib2FyZDogdHJ1ZSxcbi8vICAgICBzaG93OiB0cnVlXG4vLyAgIH1cbi8vXG4vLyAgIE1vZGFsLnByb3RvdHlwZS50b2dnbGUgPSBmdW5jdGlvbiAoX3JlbGF0ZWRUYXJnZXQpIHtcbi8vICAgICByZXR1cm4gdGhpcy5pc1Nob3duID8gdGhpcy5oaWRlKCkgOiB0aGlzLnNob3coX3JlbGF0ZWRUYXJnZXQpXG4vLyAgIH1cbi8vXG4vLyAgIE1vZGFsLnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24gKF9yZWxhdGVkVGFyZ2V0KSB7XG4vLyAgICAgdmFyIHRoYXQgPSB0aGlzXG4vLyAgICAgdmFyIGUgICAgPSAkLkV2ZW50KCdzaG93LmJzLm1vZGFsJywgeyByZWxhdGVkVGFyZ2V0OiBfcmVsYXRlZFRhcmdldCB9KVxuLy9cbi8vICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoZSlcbi8vXG4vLyAgICAgaWYgKHRoaXMuaXNTaG93biB8fCBlLmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cbi8vXG4vLyAgICAgdGhpcy5pc1Nob3duID0gdHJ1ZVxuLy9cbi8vICAgICB0aGlzLmNoZWNrU2Nyb2xsYmFyKClcbi8vICAgICB0aGlzLnNldFNjcm9sbGJhcigpXG4vLyAgICAgdGhpcy4kYm9keS5hZGRDbGFzcygnbW9kYWwtb3BlbicpXG4vL1xuLy8gICAgIHRoaXMuZXNjYXBlKClcbi8vICAgICB0aGlzLnJlc2l6ZSgpXG4vL1xuLy8gICAgIHRoaXMuJGVsZW1lbnQub24oJ2NsaWNrLmRpc21pc3MuYnMubW9kYWwnLCAnW2RhdGEtZGlzbWlzcz1cIm1vZGFsXCJdJywgJC5wcm94eSh0aGlzLmhpZGUsIHRoaXMpKVxuLy9cbi8vICAgICB0aGlzLmJhY2tkcm9wKGZ1bmN0aW9uICgpIHtcbi8vICAgICAgIHZhciB0cmFuc2l0aW9uID0gJC5zdXBwb3J0LnRyYW5zaXRpb24gJiYgdGhhdC4kZWxlbWVudC5oYXNDbGFzcygnZmFkZScpXG4vL1xuLy8gICAgICAgaWYgKCF0aGF0LiRlbGVtZW50LnBhcmVudCgpLmxlbmd0aCkge1xuLy8gICAgICAgICB0aGF0LiRlbGVtZW50LmFwcGVuZFRvKHRoYXQuJGJvZHkpIC8vIGRvbid0IG1vdmUgbW9kYWxzIGRvbSBwb3NpdGlvblxuLy8gICAgICAgfVxuLy9cbi8vICAgICAgIHRoYXQuJGVsZW1lbnRcbi8vICAgICAgICAgLnNob3coKVxuLy8gICAgICAgICAuc2Nyb2xsVG9wKDApXG4vL1xuLy8gICAgICAgaWYgKHRoYXQub3B0aW9ucy5iYWNrZHJvcCkgdGhhdC5hZGp1c3RCYWNrZHJvcCgpXG4vLyAgICAgICB0aGF0LmFkanVzdERpYWxvZygpXG4vL1xuLy8gICAgICAgaWYgKHRyYW5zaXRpb24pIHtcbi8vICAgICAgICAgdGhhdC4kZWxlbWVudFswXS5vZmZzZXRXaWR0aCAvLyBmb3JjZSByZWZsb3dcbi8vICAgICAgIH1cbi8vXG4vLyAgICAgICB0aGF0LiRlbGVtZW50XG4vLyAgICAgICAgIC5hZGRDbGFzcygnaW4nKVxuLy8gICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCBmYWxzZSlcbi8vXG4vLyAgICAgICB0aGF0LmVuZm9yY2VGb2N1cygpXG4vL1xuLy8gICAgICAgdmFyIGUgPSAkLkV2ZW50KCdzaG93bi5icy5tb2RhbCcsIHsgcmVsYXRlZFRhcmdldDogX3JlbGF0ZWRUYXJnZXQgfSlcbi8vXG4vLyAgICAgICB0cmFuc2l0aW9uID9cbi8vICAgICAgICAgdGhhdC4kZWxlbWVudC5maW5kKCcubW9kYWwtZGlhbG9nJykgLy8gd2FpdCBmb3IgbW9kYWwgdG8gc2xpZGUgaW5cbi8vICAgICAgICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCBmdW5jdGlvbiAoKSB7XG4vLyAgICAgICAgICAgICB0aGF0LiRlbGVtZW50LnRyaWdnZXIoJ2ZvY3VzJykudHJpZ2dlcihlKVxuLy8gICAgICAgICAgIH0pXG4vLyAgICAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKE1vZGFsLlRSQU5TSVRJT05fRFVSQVRJT04pIDpcbi8vICAgICAgICAgdGhhdC4kZWxlbWVudC50cmlnZ2VyKCdmb2N1cycpLnRyaWdnZXIoZSlcbi8vICAgICB9KVxuLy8gICB9XG4vL1xuLy8gICBNb2RhbC5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uIChlKSB7XG4vLyAgICAgaWYgKGUpIGUucHJldmVudERlZmF1bHQoKVxuLy9cbi8vICAgICBlID0gJC5FdmVudCgnaGlkZS5icy5tb2RhbCcpXG4vL1xuLy8gICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihlKVxuLy9cbi8vICAgICBpZiAoIXRoaXMuaXNTaG93biB8fCBlLmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cbi8vXG4vLyAgICAgdGhpcy5pc1Nob3duID0gZmFsc2Vcbi8vXG4vLyAgICAgdGhpcy5lc2NhcGUoKVxuLy8gICAgIHRoaXMucmVzaXplKClcbi8vXG4vLyAgICAgJChkb2N1bWVudCkub2ZmKCdmb2N1c2luLmJzLm1vZGFsJylcbi8vXG4vLyAgICAgdGhpcy4kZWxlbWVudFxuLy8gICAgICAgLnJlbW92ZUNsYXNzKCdpbicpXG4vLyAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCB0cnVlKVxuLy8gICAgICAgLm9mZignY2xpY2suZGlzbWlzcy5icy5tb2RhbCcpXG4vL1xuLy8gICAgICQuc3VwcG9ydC50cmFuc2l0aW9uICYmIHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2ZhZGUnKSA/XG4vLyAgICAgICB0aGlzLiRlbGVtZW50XG4vLyAgICAgICAgIC5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsICQucHJveHkodGhpcy5oaWRlTW9kYWwsIHRoaXMpKVxuLy8gICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoTW9kYWwuVFJBTlNJVElPTl9EVVJBVElPTikgOlxuLy8gICAgICAgdGhpcy5oaWRlTW9kYWwoKVxuLy8gICB9XG4vL1xuLy8gICBNb2RhbC5wcm90b3R5cGUuZW5mb3JjZUZvY3VzID0gZnVuY3Rpb24gKCkge1xuLy8gICAgICQoZG9jdW1lbnQpXG4vLyAgICAgICAub2ZmKCdmb2N1c2luLmJzLm1vZGFsJykgLy8gZ3VhcmQgYWdhaW5zdCBpbmZpbml0ZSBmb2N1cyBsb29wXG4vLyAgICAgICAub24oJ2ZvY3VzaW4uYnMubW9kYWwnLCAkLnByb3h5KGZ1bmN0aW9uIChlKSB7XG4vLyAgICAgICAgIGlmICh0aGlzLiRlbGVtZW50WzBdICE9PSBlLnRhcmdldCAmJiAhdGhpcy4kZWxlbWVudC5oYXMoZS50YXJnZXQpLmxlbmd0aCkge1xuLy8gICAgICAgICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcignZm9jdXMnKVxuLy8gICAgICAgICB9XG4vLyAgICAgICB9LCB0aGlzKSlcbi8vICAgfVxuLy9cbi8vICAgTW9kYWwucHJvdG90eXBlLmVzY2FwZSA9IGZ1bmN0aW9uICgpIHtcbi8vICAgICBpZiAodGhpcy5pc1Nob3duICYmIHRoaXMub3B0aW9ucy5rZXlib2FyZCkge1xuLy8gICAgICAgdGhpcy4kZWxlbWVudC5vbigna2V5ZG93bi5kaXNtaXNzLmJzLm1vZGFsJywgJC5wcm94eShmdW5jdGlvbiAoZSkge1xuLy8gICAgICAgICBlLndoaWNoID09IDI3ICYmIHRoaXMuaGlkZSgpXG4vLyAgICAgICB9LCB0aGlzKSlcbi8vICAgICB9IGVsc2UgaWYgKCF0aGlzLmlzU2hvd24pIHtcbi8vICAgICAgIHRoaXMuJGVsZW1lbnQub2ZmKCdrZXlkb3duLmRpc21pc3MuYnMubW9kYWwnKVxuLy8gICAgIH1cbi8vICAgfVxuLy9cbi8vICAgTW9kYWwucHJvdG90eXBlLnJlc2l6ZSA9IGZ1bmN0aW9uICgpIHtcbi8vICAgICBpZiAodGhpcy5pc1Nob3duKSB7XG4vLyAgICAgICAkKHdpbmRvdykub24oJ3Jlc2l6ZS5icy5tb2RhbCcsICQucHJveHkodGhpcy5oYW5kbGVVcGRhdGUsIHRoaXMpKVxuLy8gICAgIH0gZWxzZSB7XG4vLyAgICAgICAkKHdpbmRvdykub2ZmKCdyZXNpemUuYnMubW9kYWwnKVxuLy8gICAgIH1cbi8vICAgfVxuLy9cbi8vICAgTW9kYWwucHJvdG90eXBlLmhpZGVNb2RhbCA9IGZ1bmN0aW9uICgpIHtcbi8vICAgICB2YXIgdGhhdCA9IHRoaXNcbi8vICAgICB0aGlzLiRlbGVtZW50LmhpZGUoKVxuLy8gICAgIHRoaXMuYmFja2Ryb3AoZnVuY3Rpb24gKCkge1xuLy8gICAgICAgdGhhdC4kYm9keS5yZW1vdmVDbGFzcygnbW9kYWwtb3BlbicpXG4vLyAgICAgICB0aGF0LnJlc2V0QWRqdXN0bWVudHMoKVxuLy8gICAgICAgdGhhdC5yZXNldFNjcm9sbGJhcigpXG4vLyAgICAgICB0aGF0LiRlbGVtZW50LnRyaWdnZXIoJ2hpZGRlbi5icy5tb2RhbCcpXG4vLyAgICAgfSlcbi8vICAgfVxuLy9cbi8vICAgTW9kYWwucHJvdG90eXBlLnJlbW92ZUJhY2tkcm9wID0gZnVuY3Rpb24gKCkge1xuLy8gICAgIHRoaXMuJGJhY2tkcm9wICYmIHRoaXMuJGJhY2tkcm9wLnJlbW92ZSgpXG4vLyAgICAgdGhpcy4kYmFja2Ryb3AgPSBudWxsXG4vLyAgIH1cbi8vXG4vLyAgIE1vZGFsLnByb3RvdHlwZS5iYWNrZHJvcCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuLy8gICAgIHZhciB0aGF0ID0gdGhpc1xuLy8gICAgIHZhciBhbmltYXRlID0gdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnZmFkZScpID8gJ2ZhZGUnIDogJydcbi8vXG4vLyAgICAgaWYgKHRoaXMuaXNTaG93biAmJiB0aGlzLm9wdGlvbnMuYmFja2Ryb3ApIHtcbi8vICAgICAgIHZhciBkb0FuaW1hdGUgPSAkLnN1cHBvcnQudHJhbnNpdGlvbiAmJiBhbmltYXRlXG4vL1xuLy8gICAgICAgdGhpcy4kYmFja2Ryb3AgPSAkKCc8ZGl2IGNsYXNzPVwibW9kYWwtYmFja2Ryb3AgJyArIGFuaW1hdGUgKyAnXCIgLz4nKVxuLy8gICAgICAgICAucHJlcGVuZFRvKHRoaXMuJGVsZW1lbnQpXG4vLyAgICAgICAgIC5vbignY2xpY2suZGlzbWlzcy5icy5tb2RhbCcsICQucHJveHkoZnVuY3Rpb24gKGUpIHtcbi8vICAgICAgICAgICBpZiAoZS50YXJnZXQgIT09IGUuY3VycmVudFRhcmdldCkgcmV0dXJuXG4vLyAgICAgICAgICAgdGhpcy5vcHRpb25zLmJhY2tkcm9wID09ICdzdGF0aWMnXG4vLyAgICAgICAgICAgICA/IHRoaXMuJGVsZW1lbnRbMF0uZm9jdXMuY2FsbCh0aGlzLiRlbGVtZW50WzBdKVxuLy8gICAgICAgICAgICAgOiB0aGlzLmhpZGUuY2FsbCh0aGlzKVxuLy8gICAgICAgICB9LCB0aGlzKSlcbi8vXG4vLyAgICAgICBpZiAoZG9BbmltYXRlKSB0aGlzLiRiYWNrZHJvcFswXS5vZmZzZXRXaWR0aCAvLyBmb3JjZSByZWZsb3dcbi8vXG4vLyAgICAgICB0aGlzLiRiYWNrZHJvcC5hZGRDbGFzcygnaW4nKVxuLy9cbi8vICAgICAgIGlmICghY2FsbGJhY2spIHJldHVyblxuLy9cbi8vICAgICAgIGRvQW5pbWF0ZSA/XG4vLyAgICAgICAgIHRoaXMuJGJhY2tkcm9wXG4vLyAgICAgICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgY2FsbGJhY2spXG4vLyAgICAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKE1vZGFsLkJBQ0tEUk9QX1RSQU5TSVRJT05fRFVSQVRJT04pIDpcbi8vICAgICAgICAgY2FsbGJhY2soKVxuLy9cbi8vICAgICB9IGVsc2UgaWYgKCF0aGlzLmlzU2hvd24gJiYgdGhpcy4kYmFja2Ryb3ApIHtcbi8vICAgICAgIHRoaXMuJGJhY2tkcm9wLnJlbW92ZUNsYXNzKCdpbicpXG4vL1xuLy8gICAgICAgdmFyIGNhbGxiYWNrUmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuLy8gICAgICAgICB0aGF0LnJlbW92ZUJhY2tkcm9wKClcbi8vICAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soKVxuLy8gICAgICAgfVxuLy8gICAgICAgJC5zdXBwb3J0LnRyYW5zaXRpb24gJiYgdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnZmFkZScpID9cbi8vICAgICAgICAgdGhpcy4kYmFja2Ryb3Bcbi8vICAgICAgICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCBjYWxsYmFja1JlbW92ZSlcbi8vICAgICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoTW9kYWwuQkFDS0RST1BfVFJBTlNJVElPTl9EVVJBVElPTikgOlxuLy8gICAgICAgICBjYWxsYmFja1JlbW92ZSgpXG4vL1xuLy8gICAgIH0gZWxzZSBpZiAoY2FsbGJhY2spIHtcbi8vICAgICAgIGNhbGxiYWNrKClcbi8vICAgICB9XG4vLyAgIH1cbi8vXG4vLyAgIC8vIHRoZXNlIGZvbGxvd2luZyBtZXRob2RzIGFyZSB1c2VkIHRvIGhhbmRsZSBvdmVyZmxvd2luZyBtb2RhbHNcbi8vXG4vLyAgIE1vZGFsLnByb3RvdHlwZS5oYW5kbGVVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4vLyAgICAgaWYgKHRoaXMub3B0aW9ucy5iYWNrZHJvcCkgdGhpcy5hZGp1c3RCYWNrZHJvcCgpXG4vLyAgICAgdGhpcy5hZGp1c3REaWFsb2coKVxuLy8gICB9XG4vL1xuLy8gICBNb2RhbC5wcm90b3R5cGUuYWRqdXN0QmFja2Ryb3AgPSBmdW5jdGlvbiAoKSB7XG4vLyAgICAgdGhpcy4kYmFja2Ryb3Bcbi8vICAgICAgIC5jc3MoJ2hlaWdodCcsIDApXG4vLyAgICAgICAuY3NzKCdoZWlnaHQnLCB0aGlzLiRlbGVtZW50WzBdLnNjcm9sbEhlaWdodClcbi8vICAgfVxuLy9cbi8vICAgTW9kYWwucHJvdG90eXBlLmFkanVzdERpYWxvZyA9IGZ1bmN0aW9uICgpIHtcbi8vICAgICB2YXIgbW9kYWxJc092ZXJmbG93aW5nID0gdGhpcy4kZWxlbWVudFswXS5zY3JvbGxIZWlnaHQgPiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0XG4vL1xuLy8gICAgIHRoaXMuJGVsZW1lbnQuY3NzKHtcbi8vICAgICAgIHBhZGRpbmdMZWZ0OiAgIXRoaXMuYm9keUlzT3ZlcmZsb3dpbmcgJiYgbW9kYWxJc092ZXJmbG93aW5nID8gdGhpcy5zY3JvbGxiYXJXaWR0aCA6ICcnLFxuLy8gICAgICAgcGFkZGluZ1JpZ2h0OiB0aGlzLmJvZHlJc092ZXJmbG93aW5nICYmICFtb2RhbElzT3ZlcmZsb3dpbmcgPyB0aGlzLnNjcm9sbGJhcldpZHRoIDogJydcbi8vICAgICB9KVxuLy8gICB9XG4vL1xuLy8gICBNb2RhbC5wcm90b3R5cGUucmVzZXRBZGp1c3RtZW50cyA9IGZ1bmN0aW9uICgpIHtcbi8vICAgICB0aGlzLiRlbGVtZW50LmNzcyh7XG4vLyAgICAgICBwYWRkaW5nTGVmdDogJycsXG4vLyAgICAgICBwYWRkaW5nUmlnaHQ6ICcnXG4vLyAgICAgfSlcbi8vICAgfVxuLy9cbi8vICAgTW9kYWwucHJvdG90eXBlLmNoZWNrU2Nyb2xsYmFyID0gZnVuY3Rpb24gKCkge1xuLy8gICAgIHRoaXMuYm9keUlzT3ZlcmZsb3dpbmcgPSBkb2N1bWVudC5ib2R5LnNjcm9sbEhlaWdodCA+IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHRcbi8vICAgICB0aGlzLnNjcm9sbGJhcldpZHRoID0gdGhpcy5tZWFzdXJlU2Nyb2xsYmFyKClcbi8vICAgfVxuLy9cbi8vICAgTW9kYWwucHJvdG90eXBlLnNldFNjcm9sbGJhciA9IGZ1bmN0aW9uICgpIHtcbi8vICAgICB2YXIgYm9keVBhZCA9IHBhcnNlSW50KCh0aGlzLiRib2R5LmNzcygncGFkZGluZy1yaWdodCcpIHx8IDApLCAxMClcbi8vICAgICBpZiAodGhpcy5ib2R5SXNPdmVyZmxvd2luZykgdGhpcy4kYm9keS5jc3MoJ3BhZGRpbmctcmlnaHQnLCBib2R5UGFkICsgdGhpcy5zY3JvbGxiYXJXaWR0aClcbi8vICAgfVxuLy9cbi8vICAgTW9kYWwucHJvdG90eXBlLnJlc2V0U2Nyb2xsYmFyID0gZnVuY3Rpb24gKCkge1xuLy8gICAgIHRoaXMuJGJvZHkuY3NzKCdwYWRkaW5nLXJpZ2h0JywgJycpXG4vLyAgIH1cbi8vXG4vLyAgIE1vZGFsLnByb3RvdHlwZS5tZWFzdXJlU2Nyb2xsYmFyID0gZnVuY3Rpb24gKCkgeyAvLyB0aHggd2Fsc2hcbi8vICAgICB2YXIgc2Nyb2xsRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jylcbi8vICAgICBzY3JvbGxEaXYuY2xhc3NOYW1lID0gJ21vZGFsLXNjcm9sbGJhci1tZWFzdXJlJ1xuLy8gICAgIHRoaXMuJGJvZHkuYXBwZW5kKHNjcm9sbERpdilcbi8vICAgICB2YXIgc2Nyb2xsYmFyV2lkdGggPSBzY3JvbGxEaXYub2Zmc2V0V2lkdGggLSBzY3JvbGxEaXYuY2xpZW50V2lkdGhcbi8vICAgICB0aGlzLiRib2R5WzBdLnJlbW92ZUNoaWxkKHNjcm9sbERpdilcbi8vICAgICByZXR1cm4gc2Nyb2xsYmFyV2lkdGhcbi8vICAgfVxuLy9cbi8vXG4vLyAgIC8vIE1PREFMIFBMVUdJTiBERUZJTklUSU9OXG4vLyAgIC8vID09PT09PT09PT09PT09PT09PT09PT09XG4vL1xuLy8gICBmdW5jdGlvbiBQbHVnaW4ob3B0aW9uLCBfcmVsYXRlZFRhcmdldCkge1xuLy8gICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xuLy8gICAgICAgdmFyICR0aGlzICAgPSAkKHRoaXMpXG4vLyAgICAgICB2YXIgZGF0YSAgICA9ICR0aGlzLmRhdGEoJ2JzLm1vZGFsJylcbi8vICAgICAgIHZhciBvcHRpb25zID0gJC5leHRlbmQoe30sIE1vZGFsLkRFRkFVTFRTLCAkdGhpcy5kYXRhKCksIHR5cGVvZiBvcHRpb24gPT0gJ29iamVjdCcgJiYgb3B0aW9uKVxuLy9cbi8vICAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMubW9kYWwnLCAoZGF0YSA9IG5ldyBNb2RhbCh0aGlzLCBvcHRpb25zKSkpXG4vLyAgICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dKF9yZWxhdGVkVGFyZ2V0KVxuLy8gICAgICAgZWxzZSBpZiAob3B0aW9ucy5zaG93KSBkYXRhLnNob3coX3JlbGF0ZWRUYXJnZXQpXG4vLyAgICAgfSlcbi8vICAgfVxuLy9cbi8vICAgdmFyIG9sZCA9ICQuZm4ubW9kYWxcbi8vXG4vLyAgICQuZm4ubW9kYWwgICAgICAgICAgICAgPSBQbHVnaW5cbi8vICAgJC5mbi5tb2RhbC5Db25zdHJ1Y3RvciA9IE1vZGFsXG4vL1xuLy9cbi8vICAgLy8gTU9EQUwgTk8gQ09ORkxJQ1Rcbi8vICAgLy8gPT09PT09PT09PT09PT09PT1cbi8vXG4vLyAgICQuZm4ubW9kYWwubm9Db25mbGljdCA9IGZ1bmN0aW9uICgpIHtcbi8vICAgICAkLmZuLm1vZGFsID0gb2xkXG4vLyAgICAgcmV0dXJuIHRoaXNcbi8vICAgfVxuLy9cbi8vXG4vLyAgIC8vIE1PREFMIERBVEEtQVBJXG4vLyAgIC8vID09PT09PT09PT09PT09XG4vL1xuLy8gICAkKGRvY3VtZW50KS5vbignY2xpY2suYnMubW9kYWwuZGF0YS1hcGknLCAnW2RhdGEtdG9nZ2xlPVwibW9kYWxcIl0nLCBmdW5jdGlvbiAoZSkge1xuLy8gICAgIHZhciAkdGhpcyAgID0gJCh0aGlzKVxuLy8gICAgIHZhciBocmVmICAgID0gJHRoaXMuYXR0cignaHJlZicpXG4vLyAgICAgdmFyICR0YXJnZXQgPSAkKCR0aGlzLmF0dHIoJ2RhdGEtdGFyZ2V0JykgfHwgKGhyZWYgJiYgaHJlZi5yZXBsYWNlKC8uKig/PSNbXlxcc10rJCkvLCAnJykpKSAvLyBzdHJpcCBmb3IgaWU3XG4vLyAgICAgdmFyIG9wdGlvbiAgPSAkdGFyZ2V0LmRhdGEoJ2JzLm1vZGFsJykgPyAndG9nZ2xlJyA6ICQuZXh0ZW5kKHsgcmVtb3RlOiAhLyMvLnRlc3QoaHJlZikgJiYgaHJlZiB9LCAkdGFyZ2V0LmRhdGEoKSwgJHRoaXMuZGF0YSgpKVxuLy9cbi8vICAgICBpZiAoJHRoaXMuaXMoJ2EnKSkgZS5wcmV2ZW50RGVmYXVsdCgpXG4vL1xuLy8gICAgICR0YXJnZXQub25lKCdzaG93LmJzLm1vZGFsJywgZnVuY3Rpb24gKHNob3dFdmVudCkge1xuLy8gICAgICAgaWYgKHNob3dFdmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkgcmV0dXJuIC8vIG9ubHkgcmVnaXN0ZXIgZm9jdXMgcmVzdG9yZXIgaWYgbW9kYWwgd2lsbCBhY3R1YWxseSBnZXQgc2hvd25cbi8vICAgICAgICR0YXJnZXQub25lKCdoaWRkZW4uYnMubW9kYWwnLCBmdW5jdGlvbiAoKSB7XG4vLyAgICAgICAgICR0aGlzLmlzKCc6dmlzaWJsZScpICYmICR0aGlzLnRyaWdnZXIoJ2ZvY3VzJylcbi8vICAgICAgIH0pXG4vLyAgICAgfSlcbi8vICAgICBQbHVnaW4uY2FsbCgkdGFyZ2V0LCBvcHRpb24sIHRoaXMpXG4vLyAgIH0pXG4vL1xuLy8gfShqUXVlcnkpO1xuLy9cbi8vIChmdW5jdGlvbiAodCkge1xuLy8gICAgIHQuYmFja2dyb3VuZFZpZGVvID0gZnVuY3Rpb24gKGUsIGkpIHtcbi8vICAgICAgICAgdmFyIG4gPSB7dmlkZW9pZDogXCJ2aWRlb19iYWNrZ3JvdW5kXCIsIGF1dG9wbGF5OiB0cnVlLCBsb29wOiB0cnVlLCBwcmVsb2FkOiB0cnVlfTtcbi8vICAgICAgICAgdmFyIHMgPSB0aGlzO1xuLy8gICAgICAgICBzLnNldHRpbmdzID0ge307XG4vLyAgICAgICAgIHZhciBvID0gZnVuY3Rpb24gKCkge1xuLy8gICAgICAgICAgICAgcy5zZXR0aW5ncyA9IHQuZXh0ZW5kKHt9LCBuLCBpKTtcbi8vICAgICAgICAgICAgIHMuZWwgPSBlO1xuLy8gICAgICAgICAgICAgZCgpXG4vLyAgICAgICAgIH07XG4vLyAgICAgICAgIHZhciBkID0gZnVuY3Rpb24gKCkge1xuLy8gICAgICAgICAgICAgdmFyIGUgPSBcIlwiLCBpID0gXCJcIiwgbiA9IFwiXCIsIG8gPSBcIlwiLCBkID0gcy5zZXR0aW5ncy5wcmVsb2FkLCBnID0gcy5zZXR0aW5ncy5hdXRvcGxheSwgYSA9IHMuc2V0dGluZ3MubG9vcDtcbi8vICAgICAgICAgICAgIGlmIChkKSB7XG4vLyAgICAgICAgICAgICAgICAgaSA9ICdwcmVsb2FkPVwiYXV0b1wiJ1xuLy8gICAgICAgICAgICAgfSBlbHNlIHtcbi8vICAgICAgICAgICAgICAgICBpID0gXCJcIlxuLy8gICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgaWYgKGcpIHtcbi8vICAgICAgICAgICAgICAgICBuID0gJ2F1dG9wbGF5PVwiYXV0b3BsYXlcIidcbi8vICAgICAgICAgICAgIH0gZWxzZSB7XG4vLyAgICAgICAgICAgICAgICAgbiA9IFwiXCJcbi8vICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgIGlmIChhKSB7XG4vLyAgICAgICAgICAgICAgICAgbyA9ICdsb29wPVwidHJ1ZVwiJ1xuLy8gICAgICAgICAgICAgfSBlbHNlIHtcbi8vICAgICAgICAgICAgICAgICBvID0gXCJcIlxuLy8gICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgZSArPSAnPHZpZGVvIGlkPVwiJyArIHMuc2V0dGluZ3MudmlkZW9pZCArICdcIicgKyBpICsgbiArIG87XG4vLyAgICAgICAgICAgICBpZiAocy5zZXR0aW5ncy5wb3N0ZXIpIHtcbi8vICAgICAgICAgICAgICAgICBlICs9ICcgcG9zdGVyPVwiJyArIHMuc2V0dGluZ3MucG9zdGVyICsgJ1wiICdcbi8vICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgIGUgKz0gJ3N0eWxlPVwiZGlzcGxheTpub25lO3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MDtib3R0b206MDtyaWdodDowO3otaW5kZXg6MDt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO1wiPic7XG4vLyAgICAgICAgICAgICBmb3IgKHZhciBsID0gMDsgbCA8IHMuc2V0dGluZ3MudHlwZXMubGVuZ3RoOyBsKyspIHtcbi8vICAgICAgICAgICAgICAgICBlICs9ICc8c291cmNlIHNyYz1cIicgKyBzLnNldHRpbmdzLnBhdGggKyBzLnNldHRpbmdzLmZpbGVuYW1lICsgXCIuXCIgKyBzLnNldHRpbmdzLnR5cGVzW2xdICsgJ1wiIHR5cGU9XCJ2aWRlby8nICsgcy5zZXR0aW5ncy50eXBlc1tsXSArICdcIiAvPidcbi8vICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgIGUgKz0gXCJiZ3ZpZGVvPC92aWRlbz5cIjtcbi8vICAgICAgICAgICAgIHMuZWwucHJlcGVuZChlKTtcbi8vICAgICAgICAgICAgIHMudmlkZW9FbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHMuc2V0dGluZ3MudmlkZW9pZCk7XG4vLyAgICAgICAgICAgICBzLiR2aWRlb0VsID0gdChzLnZpZGVvRWwpO1xuLy8gICAgICAgICAgICAgcy4kdmlkZW9FbC5mYWRlSW4oMmUzKTtcbi8vICAgICAgICAgICAgIHIoKVxuLy8gICAgICAgICB9O1xuLy8gICAgICAgICB2YXIgciA9IGZ1bmN0aW9uICgpIHtcbi8vICAgICAgICAgICAgIHZhciB0ID0gZygpO1xuLy8gICAgICAgICAgICAgcy4kdmlkZW9FbC53aWR0aCh0ICogcy5zZXR0aW5ncy53aWR0aCk7XG4vLyAgICAgICAgICAgICBzLiR2aWRlb0VsLmhlaWdodCh0ICogcy5zZXR0aW5ncy5oZWlnaHQpO1xuLy8gICAgICAgICAgICAgaWYgKHR5cGVvZiBzLnNldHRpbmdzLmFsaWduICE9PSBcInVuZGVmaW5lZFwiKSB7XG4vLyAgICAgICAgICAgICAgICAgYSgpXG4vLyAgICAgICAgICAgICB9XG4vLyAgICAgICAgIH07XG4vLyAgICAgICAgIHZhciBnID0gZnVuY3Rpb24gKCkge1xuLy8gICAgICAgICAgICAgdmFyIGUgPSB0KHdpbmRvdykud2lkdGgoKTtcbi8vICAgICAgICAgICAgIHZhciBpID0gdCh3aW5kb3cpLmhlaWdodCgpO1xuLy8gICAgICAgICAgICAgdmFyIG4gPSBlIC8gaTtcbi8vICAgICAgICAgICAgIHZhciBvID0gcy5zZXR0aW5ncy53aWR0aCAvIHMuc2V0dGluZ3MuaGVpZ2h0O1xuLy8gICAgICAgICAgICAgdmFyIGQgPSBpIC8gcy5zZXR0aW5ncy5oZWlnaHQ7XG4vLyAgICAgICAgICAgICBpZiAobiA+PSBvKSB7XG4vLyAgICAgICAgICAgICAgICAgZCA9IGUgLyBzLnNldHRpbmdzLndpZHRoXG4vLyAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICByZXR1cm4gZFxuLy8gICAgICAgICB9O1xuLy8gICAgICAgICB2YXIgYSA9IGZ1bmN0aW9uICgpIHtcbi8vICAgICAgICAgICAgIHZhciBlID0gKHQod2luZG93KS53aWR0aCgpID4+IDEpIC0gKHMuJHZpZGVvRWwud2lkdGgoKSA+PiAxKSB8IDA7XG4vLyAgICAgICAgICAgICB2YXIgaSA9ICh0KHdpbmRvdykuaGVpZ2h0KCkgPj4gMSkgLSAocy4kdmlkZW9FbC5oZWlnaHQoKSA+PiAxKSB8IDA7XG4vLyAgICAgICAgICAgICBpZiAocy5zZXR0aW5ncy5hbGlnbiA9PSBcImNlbnRlclhZXCIpIHtcbi8vICAgICAgICAgICAgICAgICBzLiR2aWRlb0VsLmNzcyh7bGVmdDogZSwgdG9wOiBpfSk7XG4vLyAgICAgICAgICAgICAgICAgcmV0dXJuXG4vLyAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgICBpZiAocy5zZXR0aW5ncy5hbGlnbiA9PSBcImNlbnRlclhcIikge1xuLy8gICAgICAgICAgICAgICAgIHMuJHZpZGVvRWwuY3NzKFwibGVmdFwiLCBlKTtcbi8vICAgICAgICAgICAgICAgICByZXR1cm5cbi8vICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICAgIGlmIChzLnNldHRpbmdzLmFsaWduID09IFwiY2VudGVyWVwiKSB7XG4vLyAgICAgICAgICAgICAgICAgcy4kdmlkZW9FbC5jc3MoXCJ0b3BcIiwgaSk7XG4vLyAgICAgICAgICAgICAgICAgcmV0dXJuXG4vLyAgICAgICAgICAgICB9XG4vLyAgICAgICAgIH07XG4vLyAgICAgICAgIG8oKTtcbi8vICAgICAgICAgdCh3aW5kb3cpLnJlc2l6ZShmdW5jdGlvbiAoKSB7XG4vLyAgICAgICAgICAgICByKClcbi8vICAgICAgICAgfSk7XG4vLyAgICAgICAgIHMuJHZpZGVvRWwuYmluZChcImVuZGVkXCIsIGZ1bmN0aW9uICgpIHtcbi8vICAgICAgICAgICAgIHRoaXMucGxheSgpXG4vLyAgICAgICAgIH0pXG4vLyAgICAgfVxuLy8gfSkoalF1ZXJ5KTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBCb290c3RyYXA6IG1vZGFsLmpzIHYzLjMuMlxuICogaHR0cDovL2dldGJvb3RzdHJhcC5jb20vamF2YXNjcmlwdC8jbW9kYWxzXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvcHlyaWdodCAyMDExLTIwMTUgVHdpdHRlciwgSW5jLlxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG5cbitmdW5jdGlvbiAoJCkge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLy8gTU9EQUwgQ0xBU1MgREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09XG5cbiAgdmFyIE1vZGFsID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHtcbiAgICB0aGlzLm9wdGlvbnMgICAgICAgID0gb3B0aW9uc1xuICAgIHRoaXMuJGJvZHkgICAgICAgICAgPSAkKGRvY3VtZW50LmJvZHkpXG4gICAgdGhpcy4kZWxlbWVudCAgICAgICA9ICQoZWxlbWVudClcbiAgICB0aGlzLiRiYWNrZHJvcCAgICAgID1cbiAgICB0aGlzLmlzU2hvd24gICAgICAgID0gbnVsbFxuICAgIHRoaXMuc2Nyb2xsYmFyV2lkdGggPSAwXG5cbiAgICBpZiAodGhpcy5vcHRpb25zLnJlbW90ZSkge1xuICAgICAgdGhpcy4kZWxlbWVudFxuICAgICAgICAuZmluZCgnLm1vZGFsLWNvbnRlbnQnKVxuICAgICAgICAubG9hZCh0aGlzLm9wdGlvbnMucmVtb3RlLCAkLnByb3h5KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoJ2xvYWRlZC5icy5tb2RhbCcpXG4gICAgICAgIH0sIHRoaXMpKVxuICAgIH1cbiAgfVxuXG4gIE1vZGFsLlZFUlNJT04gID0gJzMuMy4yJ1xuXG4gIE1vZGFsLlRSQU5TSVRJT05fRFVSQVRJT04gPSAzMDBcbiAgTW9kYWwuQkFDS0RST1BfVFJBTlNJVElPTl9EVVJBVElPTiA9IDE1MFxuXG4gIE1vZGFsLkRFRkFVTFRTID0ge1xuICAgIGJhY2tkcm9wOiB0cnVlLFxuICAgIGtleWJvYXJkOiB0cnVlLFxuICAgIHNob3c6IHRydWVcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS50b2dnbGUgPSBmdW5jdGlvbiAoX3JlbGF0ZWRUYXJnZXQpIHtcbiAgICByZXR1cm4gdGhpcy5pc1Nob3duID8gdGhpcy5oaWRlKCkgOiB0aGlzLnNob3coX3JlbGF0ZWRUYXJnZXQpXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uIChfcmVsYXRlZFRhcmdldCkge1xuICAgIHZhciB0aGF0ID0gdGhpc1xuICAgIHZhciBlICAgID0gJC5FdmVudCgnc2hvdy5icy5tb2RhbCcsIHsgcmVsYXRlZFRhcmdldDogX3JlbGF0ZWRUYXJnZXQgfSlcblxuICAgIHRoaXMuJGVsZW1lbnQudHJpZ2dlcihlKVxuXG4gICAgaWYgKHRoaXMuaXNTaG93biB8fCBlLmlzRGVmYXVsdFByZXZlbnRlZCgpKSByZXR1cm5cblxuICAgIHRoaXMuaXNTaG93biA9IHRydWVcblxuICAgIHRoaXMuY2hlY2tTY3JvbGxiYXIoKVxuICAgIHRoaXMuc2V0U2Nyb2xsYmFyKClcbiAgICB0aGlzLiRib2R5LmFkZENsYXNzKCdtb2RhbC1vcGVuJylcblxuICAgIHRoaXMuZXNjYXBlKClcbiAgICB0aGlzLnJlc2l6ZSgpXG5cbiAgICB0aGlzLiRlbGVtZW50Lm9uKCdjbGljay5kaXNtaXNzLmJzLm1vZGFsJywgJ1tkYXRhLWRpc21pc3M9XCJtb2RhbFwiXScsICQucHJveHkodGhpcy5oaWRlLCB0aGlzKSlcblxuICAgIHRoaXMuYmFja2Ryb3AoZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHRyYW5zaXRpb24gPSAkLnN1cHBvcnQudHJhbnNpdGlvbiAmJiB0aGF0LiRlbGVtZW50Lmhhc0NsYXNzKCdmYWRlJylcblxuICAgICAgaWYgKCF0aGF0LiRlbGVtZW50LnBhcmVudCgpLmxlbmd0aCkge1xuICAgICAgICB0aGF0LiRlbGVtZW50LmFwcGVuZFRvKHRoYXQuJGJvZHkpIC8vIGRvbid0IG1vdmUgbW9kYWxzIGRvbSBwb3NpdGlvblxuICAgICAgfVxuXG4gICAgICB0aGF0LiRlbGVtZW50XG4gICAgICAgIC5zaG93KClcbiAgICAgICAgLnNjcm9sbFRvcCgwKVxuXG4gICAgICBpZiAodGhhdC5vcHRpb25zLmJhY2tkcm9wKSB0aGF0LmFkanVzdEJhY2tkcm9wKClcbiAgICAgIHRoYXQuYWRqdXN0RGlhbG9nKClcblxuICAgICAgaWYgKHRyYW5zaXRpb24pIHtcbiAgICAgICAgdGhhdC4kZWxlbWVudFswXS5vZmZzZXRXaWR0aCAvLyBmb3JjZSByZWZsb3dcbiAgICAgIH1cblxuICAgICAgdGhhdC4kZWxlbWVudFxuICAgICAgICAuYWRkQ2xhc3MoJ2luJylcbiAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgZmFsc2UpXG5cbiAgICAgIHRoYXQuZW5mb3JjZUZvY3VzKClcblxuICAgICAgdmFyIGUgPSAkLkV2ZW50KCdzaG93bi5icy5tb2RhbCcsIHsgcmVsYXRlZFRhcmdldDogX3JlbGF0ZWRUYXJnZXQgfSlcblxuICAgICAgdHJhbnNpdGlvbiA/XG4gICAgICAgIHRoYXQuJGVsZW1lbnQuZmluZCgnLm1vZGFsLWRpYWxvZycpIC8vIHdhaXQgZm9yIG1vZGFsIHRvIHNsaWRlIGluXG4gICAgICAgICAgLm9uZSgnYnNUcmFuc2l0aW9uRW5kJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhhdC4kZWxlbWVudC50cmlnZ2VyKCdmb2N1cycpLnRyaWdnZXIoZSlcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZChNb2RhbC5UUkFOU0lUSU9OX0RVUkFUSU9OKSA6XG4gICAgICAgIHRoYXQuJGVsZW1lbnQudHJpZ2dlcignZm9jdXMnKS50cmlnZ2VyKGUpXG4gICAgfSlcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5oaWRlID0gZnVuY3Rpb24gKGUpIHtcbiAgICBpZiAoZSkgZS5wcmV2ZW50RGVmYXVsdCgpXG5cbiAgICBlID0gJC5FdmVudCgnaGlkZS5icy5tb2RhbCcpXG5cbiAgICB0aGlzLiRlbGVtZW50LnRyaWdnZXIoZSlcblxuICAgIGlmICghdGhpcy5pc1Nob3duIHx8IGUuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVyblxuXG4gICAgdGhpcy5pc1Nob3duID0gZmFsc2VcblxuICAgIHRoaXMuZXNjYXBlKClcbiAgICB0aGlzLnJlc2l6ZSgpXG5cbiAgICAkKGRvY3VtZW50KS5vZmYoJ2ZvY3VzaW4uYnMubW9kYWwnKVxuXG4gICAgdGhpcy4kZWxlbWVudFxuICAgICAgLnJlbW92ZUNsYXNzKCdpbicpXG4gICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCB0cnVlKVxuICAgICAgLm9mZignY2xpY2suZGlzbWlzcy5icy5tb2RhbCcpXG5cbiAgICAkLnN1cHBvcnQudHJhbnNpdGlvbiAmJiB0aGlzLiRlbGVtZW50Lmhhc0NsYXNzKCdmYWRlJykgP1xuICAgICAgdGhpcy4kZWxlbWVudFxuICAgICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCAkLnByb3h5KHRoaXMuaGlkZU1vZGFsLCB0aGlzKSlcbiAgICAgICAgLmVtdWxhdGVUcmFuc2l0aW9uRW5kKE1vZGFsLlRSQU5TSVRJT05fRFVSQVRJT04pIDpcbiAgICAgIHRoaXMuaGlkZU1vZGFsKClcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5lbmZvcmNlRm9jdXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgJChkb2N1bWVudClcbiAgICAgIC5vZmYoJ2ZvY3VzaW4uYnMubW9kYWwnKSAvLyBndWFyZCBhZ2FpbnN0IGluZmluaXRlIGZvY3VzIGxvb3BcbiAgICAgIC5vbignZm9jdXNpbi5icy5tb2RhbCcsICQucHJveHkoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgaWYgKHRoaXMuJGVsZW1lbnRbMF0gIT09IGUudGFyZ2V0ICYmICF0aGlzLiRlbGVtZW50LmhhcyhlLnRhcmdldCkubGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy4kZWxlbWVudC50cmlnZ2VyKCdmb2N1cycpXG4gICAgICAgIH1cbiAgICAgIH0sIHRoaXMpKVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLmVzY2FwZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5pc1Nob3duICYmIHRoaXMub3B0aW9ucy5rZXlib2FyZCkge1xuICAgICAgdGhpcy4kZWxlbWVudC5vbigna2V5ZG93bi5kaXNtaXNzLmJzLm1vZGFsJywgJC5wcm94eShmdW5jdGlvbiAoZSkge1xuICAgICAgICBlLndoaWNoID09IDI3ICYmIHRoaXMuaGlkZSgpXG4gICAgICB9LCB0aGlzKSlcbiAgICB9IGVsc2UgaWYgKCF0aGlzLmlzU2hvd24pIHtcbiAgICAgIHRoaXMuJGVsZW1lbnQub2ZmKCdrZXlkb3duLmRpc21pc3MuYnMubW9kYWwnKVxuICAgIH1cbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5yZXNpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuaXNTaG93bikge1xuICAgICAgJCh3aW5kb3cpLm9uKCdyZXNpemUuYnMubW9kYWwnLCAkLnByb3h5KHRoaXMuaGFuZGxlVXBkYXRlLCB0aGlzKSlcbiAgICB9IGVsc2Uge1xuICAgICAgJCh3aW5kb3cpLm9mZigncmVzaXplLmJzLm1vZGFsJylcbiAgICB9XG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUuaGlkZU1vZGFsID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0aGF0ID0gdGhpc1xuICAgIHRoaXMuJGVsZW1lbnQuaGlkZSgpXG4gICAgdGhpcy5iYWNrZHJvcChmdW5jdGlvbiAoKSB7XG4gICAgICB0aGF0LiRib2R5LnJlbW92ZUNsYXNzKCdtb2RhbC1vcGVuJylcbiAgICAgIHRoYXQucmVzZXRBZGp1c3RtZW50cygpXG4gICAgICB0aGF0LnJlc2V0U2Nyb2xsYmFyKClcbiAgICAgIHRoYXQuJGVsZW1lbnQudHJpZ2dlcignaGlkZGVuLmJzLm1vZGFsJylcbiAgICB9KVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLnJlbW92ZUJhY2tkcm9wID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuJGJhY2tkcm9wICYmIHRoaXMuJGJhY2tkcm9wLnJlbW92ZSgpXG4gICAgdGhpcy4kYmFja2Ryb3AgPSBudWxsXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUuYmFja2Ryb3AgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICB2YXIgdGhhdCA9IHRoaXNcbiAgICB2YXIgYW5pbWF0ZSA9IHRoaXMuJGVsZW1lbnQuaGFzQ2xhc3MoJ2ZhZGUnKSA/ICdmYWRlJyA6ICcnXG5cbiAgICBpZiAodGhpcy5pc1Nob3duICYmIHRoaXMub3B0aW9ucy5iYWNrZHJvcCkge1xuICAgICAgdmFyIGRvQW5pbWF0ZSA9ICQuc3VwcG9ydC50cmFuc2l0aW9uICYmIGFuaW1hdGVcblxuICAgICAgdGhpcy4kYmFja2Ryb3AgPSAkKCc8ZGl2IGNsYXNzPVwibW9kYWwtYmFja2Ryb3AgJyArIGFuaW1hdGUgKyAnXCIgLz4nKVxuICAgICAgICAucHJlcGVuZFRvKHRoaXMuJGVsZW1lbnQpXG4gICAgICAgIC5vbignY2xpY2suZGlzbWlzcy5icy5tb2RhbCcsICQucHJveHkoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBpZiAoZS50YXJnZXQgIT09IGUuY3VycmVudFRhcmdldCkgcmV0dXJuXG4gICAgICAgICAgdGhpcy5vcHRpb25zLmJhY2tkcm9wID09ICdzdGF0aWMnXG4gICAgICAgICAgICA/IHRoaXMuJGVsZW1lbnRbMF0uZm9jdXMuY2FsbCh0aGlzLiRlbGVtZW50WzBdKVxuICAgICAgICAgICAgOiB0aGlzLmhpZGUuY2FsbCh0aGlzKVxuICAgICAgICB9LCB0aGlzKSlcblxuICAgICAgaWYgKGRvQW5pbWF0ZSkgdGhpcy4kYmFja2Ryb3BbMF0ub2Zmc2V0V2lkdGggLy8gZm9yY2UgcmVmbG93XG5cbiAgICAgIHRoaXMuJGJhY2tkcm9wLmFkZENsYXNzKCdpbicpXG5cbiAgICAgIGlmICghY2FsbGJhY2spIHJldHVyblxuXG4gICAgICBkb0FuaW1hdGUgP1xuICAgICAgICB0aGlzLiRiYWNrZHJvcFxuICAgICAgICAgIC5vbmUoJ2JzVHJhbnNpdGlvbkVuZCcsIGNhbGxiYWNrKVxuICAgICAgICAgIC5lbXVsYXRlVHJhbnNpdGlvbkVuZChNb2RhbC5CQUNLRFJPUF9UUkFOU0lUSU9OX0RVUkFUSU9OKSA6XG4gICAgICAgIGNhbGxiYWNrKClcblxuICAgIH0gZWxzZSBpZiAoIXRoaXMuaXNTaG93biAmJiB0aGlzLiRiYWNrZHJvcCkge1xuICAgICAgdGhpcy4kYmFja2Ryb3AucmVtb3ZlQ2xhc3MoJ2luJylcblxuICAgICAgdmFyIGNhbGxiYWNrUmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGF0LnJlbW92ZUJhY2tkcm9wKClcbiAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soKVxuICAgICAgfVxuICAgICAgJC5zdXBwb3J0LnRyYW5zaXRpb24gJiYgdGhpcy4kZWxlbWVudC5oYXNDbGFzcygnZmFkZScpID9cbiAgICAgICAgdGhpcy4kYmFja2Ryb3BcbiAgICAgICAgICAub25lKCdic1RyYW5zaXRpb25FbmQnLCBjYWxsYmFja1JlbW92ZSlcbiAgICAgICAgICAuZW11bGF0ZVRyYW5zaXRpb25FbmQoTW9kYWwuQkFDS0RST1BfVFJBTlNJVElPTl9EVVJBVElPTikgOlxuICAgICAgICBjYWxsYmFja1JlbW92ZSgpXG5cbiAgICB9IGVsc2UgaWYgKGNhbGxiYWNrKSB7XG4gICAgICBjYWxsYmFjaygpXG4gICAgfVxuICB9XG5cbiAgLy8gdGhlc2UgZm9sbG93aW5nIG1ldGhvZHMgYXJlIHVzZWQgdG8gaGFuZGxlIG92ZXJmbG93aW5nIG1vZGFsc1xuXG4gIE1vZGFsLnByb3RvdHlwZS5oYW5kbGVVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5iYWNrZHJvcCkgdGhpcy5hZGp1c3RCYWNrZHJvcCgpXG4gICAgdGhpcy5hZGp1c3REaWFsb2coKVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLmFkanVzdEJhY2tkcm9wID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuJGJhY2tkcm9wXG4gICAgICAuY3NzKCdoZWlnaHQnLCAwKVxuICAgICAgLmNzcygnaGVpZ2h0JywgdGhpcy4kZWxlbWVudFswXS5zY3JvbGxIZWlnaHQpXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUuYWRqdXN0RGlhbG9nID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBtb2RhbElzT3ZlcmZsb3dpbmcgPSB0aGlzLiRlbGVtZW50WzBdLnNjcm9sbEhlaWdodCA+IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHRcblxuICAgIHRoaXMuJGVsZW1lbnQuY3NzKHtcbiAgICAgIHBhZGRpbmdMZWZ0OiAgIXRoaXMuYm9keUlzT3ZlcmZsb3dpbmcgJiYgbW9kYWxJc092ZXJmbG93aW5nID8gdGhpcy5zY3JvbGxiYXJXaWR0aCA6ICcnLFxuICAgICAgcGFkZGluZ1JpZ2h0OiB0aGlzLmJvZHlJc092ZXJmbG93aW5nICYmICFtb2RhbElzT3ZlcmZsb3dpbmcgPyB0aGlzLnNjcm9sbGJhcldpZHRoIDogJydcbiAgICB9KVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLnJlc2V0QWRqdXN0bWVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy4kZWxlbWVudC5jc3Moe1xuICAgICAgcGFkZGluZ0xlZnQ6ICcnLFxuICAgICAgcGFkZGluZ1JpZ2h0OiAnJ1xuICAgIH0pXG4gIH1cblxuICBNb2RhbC5wcm90b3R5cGUuY2hlY2tTY3JvbGxiYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5ib2R5SXNPdmVyZmxvd2luZyA9IGRvY3VtZW50LmJvZHkuc2Nyb2xsSGVpZ2h0ID4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodFxuICAgIHRoaXMuc2Nyb2xsYmFyV2lkdGggPSB0aGlzLm1lYXN1cmVTY3JvbGxiYXIoKVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLnNldFNjcm9sbGJhciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYm9keVBhZCA9IHBhcnNlSW50KCh0aGlzLiRib2R5LmNzcygncGFkZGluZy1yaWdodCcpIHx8IDApLCAxMClcbiAgICBpZiAodGhpcy5ib2R5SXNPdmVyZmxvd2luZykgdGhpcy4kYm9keS5jc3MoJ3BhZGRpbmctcmlnaHQnLCBib2R5UGFkICsgdGhpcy5zY3JvbGxiYXJXaWR0aClcbiAgfVxuXG4gIE1vZGFsLnByb3RvdHlwZS5yZXNldFNjcm9sbGJhciA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLiRib2R5LmNzcygncGFkZGluZy1yaWdodCcsICcnKVxuICB9XG5cbiAgTW9kYWwucHJvdG90eXBlLm1lYXN1cmVTY3JvbGxiYXIgPSBmdW5jdGlvbiAoKSB7IC8vIHRoeCB3YWxzaFxuICAgIHZhciBzY3JvbGxEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIHNjcm9sbERpdi5jbGFzc05hbWUgPSAnbW9kYWwtc2Nyb2xsYmFyLW1lYXN1cmUnXG4gICAgdGhpcy4kYm9keS5hcHBlbmQoc2Nyb2xsRGl2KVxuICAgIHZhciBzY3JvbGxiYXJXaWR0aCA9IHNjcm9sbERpdi5vZmZzZXRXaWR0aCAtIHNjcm9sbERpdi5jbGllbnRXaWR0aFxuICAgIHRoaXMuJGJvZHlbMF0ucmVtb3ZlQ2hpbGQoc2Nyb2xsRGl2KVxuICAgIHJldHVybiBzY3JvbGxiYXJXaWR0aFxuICB9XG5cblxuICAvLyBNT0RBTCBQTFVHSU4gREVGSU5JVElPTlxuICAvLyA9PT09PT09PT09PT09PT09PT09PT09PVxuXG4gIGZ1bmN0aW9uIFBsdWdpbihvcHRpb24sIF9yZWxhdGVkVGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHRoaXMgICA9ICQodGhpcylcbiAgICAgIHZhciBkYXRhICAgID0gJHRoaXMuZGF0YSgnYnMubW9kYWwnKVxuICAgICAgdmFyIG9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgTW9kYWwuREVGQVVMVFMsICR0aGlzLmRhdGEoKSwgdHlwZW9mIG9wdGlvbiA9PSAnb2JqZWN0JyAmJiBvcHRpb24pXG5cbiAgICAgIGlmICghZGF0YSkgJHRoaXMuZGF0YSgnYnMubW9kYWwnLCAoZGF0YSA9IG5ldyBNb2RhbCh0aGlzLCBvcHRpb25zKSkpXG4gICAgICBpZiAodHlwZW9mIG9wdGlvbiA9PSAnc3RyaW5nJykgZGF0YVtvcHRpb25dKF9yZWxhdGVkVGFyZ2V0KVxuICAgICAgZWxzZSBpZiAob3B0aW9ucy5zaG93KSBkYXRhLnNob3coX3JlbGF0ZWRUYXJnZXQpXG4gICAgfSlcbiAgfVxuXG4gIHZhciBvbGQgPSAkLmZuLm1vZGFsXG5cbiAgJC5mbi5tb2RhbCAgICAgICAgICAgICA9IFBsdWdpblxuICAkLmZuLm1vZGFsLkNvbnN0cnVjdG9yID0gTW9kYWxcblxuXG4gIC8vIE1PREFMIE5PIENPTkZMSUNUXG4gIC8vID09PT09PT09PT09PT09PT09XG5cbiAgJC5mbi5tb2RhbC5ub0NvbmZsaWN0ID0gZnVuY3Rpb24gKCkge1xuICAgICQuZm4ubW9kYWwgPSBvbGRcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cblxuICAvLyBNT0RBTCBEQVRBLUFQSVxuICAvLyA9PT09PT09PT09PT09PVxuXG4gICQoZG9jdW1lbnQpLm9uKCdjbGljay5icy5tb2RhbC5kYXRhLWFwaScsICdbZGF0YS10b2dnbGU9XCJtb2RhbFwiXScsIGZ1bmN0aW9uIChlKSB7XG4gICAgdmFyICR0aGlzICAgPSAkKHRoaXMpXG4gICAgdmFyIGhyZWYgICAgPSAkdGhpcy5hdHRyKCdocmVmJylcbiAgICB2YXIgJHRhcmdldCA9ICQoJHRoaXMuYXR0cignZGF0YS10YXJnZXQnKSB8fCAoaHJlZiAmJiBocmVmLnJlcGxhY2UoLy4qKD89I1teXFxzXSskKS8sICcnKSkpIC8vIHN0cmlwIGZvciBpZTdcbiAgICB2YXIgb3B0aW9uICA9ICR0YXJnZXQuZGF0YSgnYnMubW9kYWwnKSA/ICd0b2dnbGUnIDogJC5leHRlbmQoeyByZW1vdGU6ICEvIy8udGVzdChocmVmKSAmJiBocmVmIH0sICR0YXJnZXQuZGF0YSgpLCAkdGhpcy5kYXRhKCkpXG5cbiAgICBpZiAoJHRoaXMuaXMoJ2EnKSkgZS5wcmV2ZW50RGVmYXVsdCgpXG5cbiAgICAkdGFyZ2V0Lm9uZSgnc2hvdy5icy5tb2RhbCcsIGZ1bmN0aW9uIChzaG93RXZlbnQpIHtcbiAgICAgIGlmIChzaG93RXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkpIHJldHVybiAvLyBvbmx5IHJlZ2lzdGVyIGZvY3VzIHJlc3RvcmVyIGlmIG1vZGFsIHdpbGwgYWN0dWFsbHkgZ2V0IHNob3duXG4gICAgICAkdGFyZ2V0Lm9uZSgnaGlkZGVuLmJzLm1vZGFsJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAkdGhpcy5pcygnOnZpc2libGUnKSAmJiAkdGhpcy50cmlnZ2VyKCdmb2N1cycpXG4gICAgICB9KVxuICAgIH0pXG4gICAgUGx1Z2luLmNhbGwoJHRhcmdldCwgb3B0aW9uLCB0aGlzKVxuICB9KVxuXG59KGpRdWVyeSk7XG5cblxuXG4vLyAkKCcuc2hhcmUtbGlua3MtYmxvY2snKS5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4vLyAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbi8vICAgICBjb25zb2xlLmxvZyggJCh0aGlzKS5wYXJlbnQoKS5zaWJsaW5ncygnYScpKVxuLy8gICAgIGNvbnNvbGUubG9nKCAkKHRoaXMpLnBhcmVudCgpLnNpYmxpbmdzKCdhJykuY2hpbGRyZW4oJ21haW4taXRlbV90aXRsZScpKVxuLy8gICAgIHZhciBvZ1RleHQgPSAkKHRoaXMpLnBhcmVudCgpLnNpYmxpbmdzKCdhJykuY2hpbGRyZW4oJ21haW4taXRlbV90aXRsZScpLmh0bWwoKTtcbi8vICAgICBjb25zb2xlLmxvZyhvZ1RleHQpXG4vLyAgICAgalF1ZXJ5KFwibWV0YVtwcm9wZXJ0eT0nb2c6dGl0bGUnXVwiKS5hdHRyKCdjb250ZW50Jywgb2dUZXh0KTtcbi8vXG4vL1xuLy8gfSlcblxuLy8galF1ZXJ5KGZ1bmN0aW9uKCQpe1xuLy8gICAgICQoXCIjbWF1dGljZm9ybV9ib3VuZHN0YXJ0Zm9ybV9zaXRlXCIpLm1hc2soXCIqXCIpO1xuLy8gfSk7XG5cbi8vICQoJycpLm1hc2soJ3p6enp6enp6enp6Jylcbi8vXG4vLyAkKCcjbWF1dGljZm9ybV9ib3VuZHN0YXJ0Zm9ybV9zaXRlJykubWFzayhcIjAwcjAwcjAwMDBcIiwge1xuLy8gICAgIHRyYW5zbGF0aW9uOiB7XG4vLyAgICAgICAgICdyJzoge1xuLy8gICAgICAgICAgICAgcGF0dGVybjogL1tcXC9dLyxcbi8vICAgICAgICAgICAgIGZhbGxiYWNrOiAnLydcbi8vICAgICAgICAgfSxcbi8vICAgICAgICAgcGxhY2Vob2xkZXI6IFwiX18vX18vX19fX1wiXG4vLyAgICAgfVxuLy8gfSk7XG5cbiQoJy5mb290ZXItc2Nyb2xsLXRvcCcpLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAkKCdib2R5LCBodG1sJykuYW5pbWF0ZSh7c2Nyb2xsVG9wOiAwfSwgOTAwKTtcblxufSk7XG5cbiQoJy5zY3JvbGwtZG93bi1idXR0b24nKS5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgJCgnYm9keSwgaHRtbCcpLmFuaW1hdGUoe3Njcm9sbFRvcDokKCB3aW5kb3cgKS5oZWlnaHQoKSB9LCA1MDAsICdsaW5lYXInKTtcblxuXG59KTtcblxuJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xuICAgIGlmIChuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ01hYyBPUyBYJykgIT0gLTEgfHwgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mICgnTGludXgnKSE9IC0xKSB7XG4gICAgICAgICQoJ2JvZHknKS5hZGRDbGFzcygncGxhdGZvcm0taW9zJyk7XG4gICAgfVxuXG4gICAgaWYoJCgnYm9keScpLmhlaWdodCgpIDwgMTcwMCApe1xuICAgICAgICBjb25zb2xlLmxvZyhcIm1pblwiKVxuICAgICAgICAkKCcuc2Nyb2xsLWRvd24tYnV0dG9uJykuY3NzKFwiZGlzcGxheVwiLFwibm9uZVwiKTtcbiAgICAgICAgJCgnLmZvb3Rlci1idXR0b25fY292ZXInKS5jc3MoXCJkaXNwbGF5XCIsXCJub25lXCIpO1xuICAgIH1cbiAgICAkKCcuZmFrZS11cGxvYWQtYnV0dG9uJykub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInVwbG9hZC1idXR0b25cIikuY2xpY2soKVxuICAgIH0pXG5cbn0pO1xuXG5cbi8vIGlmICh3aW5kb3cuc2Nyb2xsVG9wPiA1MDApe1xuLy8gICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidmlkZW9cIikuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiXG4vLyB9XG4vLyBjb25zb2xlLmxvZyh3aW5kb3cuc2Nyb2xsVG9wKVxuLy9NT0RBTCBPUEVOXG4kKFwiLm1haW4tYnV0dG9uLCAucGFja2FnZS1kZXRhaWxzX2xpbmtcIikub24oXCJjbGlja1wiLCBmdW5jdGlvbiAoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgIC8vIGNvbnNvbGUubG9nKFwiTU9EQUxcIilcbiAgICAkKCcjbXlNb2RhbCcpLm1vZGFsKCdzaG93Jyk7XG59KTtcblxuXG5cblxuLy9IQU1CVVJHRVJcbiQoXCIjaGFtYnVyZ2VyXCIpLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAkKFwiI2hhbWJ1cmdlci1ibG9ja1wiKS50b2dnbGVDbGFzcyhcImhhbWJ1cmdlcl9fYWN0aXZlXCIpO1xuICAgICQoXCIjbmF2LWljb24yXCIpLnRvZ2dsZUNsYXNzKCdvcGVuJyk7XG59KTtcblxuJChkb2N1bWVudCkuYmluZCgndG91Y2hzdGFydCBjbGljaycsIGZ1bmN0aW9uIChlKSB7XG4gICAgdmFyIGRpdiA9ICQoXCIjaGFtYnVyZ2VyLWJsb2NrXCIpO1xuICAgIGlmICghZGl2LmlzKGUudGFyZ2V0KVxuICAgICAgICAmJiBkaXYuaGFzKGUudGFyZ2V0KS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgZGl2LnJlbW92ZUNsYXNzKFwiaGFtYnVyZ2VyX19hY3RpdmVcIik7XG4gICAgICAgICQoXCIjbmF2LWljb24yXCIpLnJlbW92ZUNsYXNzKCdvcGVuJyk7XG4gICAgfVxufSk7XG5cblxuLy8gTkFWSUdBVElPTlxuLy9cbi8vICQoJy5uYXZpZ2F0aW9uLWl0ZW0nKS5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4vL1xuLy8gICAgIHZhciBjdXJyZW50ID0gJCh0aGlzKS5pbmRleCgpLFxuLy8gICAgICAgICBtYXJrID0gXCJzZWN0aW9uLVwiICsgKDIgKyBjdXJyZW50KSxcbi8vICAgICAgICAgYW5jaG9yID0gJChcIiNcIiArIG1hcmspLm9mZnNldCgpO1xuLy8gICAgIGlmIChjdXJyZW50ID09MCB8fCBjdXJyZW50ID09IDQgKXtcbi8vICAgICAgICAgcmV0dXJuXG4vLyAgICAgfSBlbHNlIHtcbi8vICAgICAgICAgJCgnYm9keSwgaHRtbCcpLmFuaW1hdGUoe1xuLy8gICAgICAgICAgICAgc2Nyb2xsVG9wOiAoYW5jaG9yKS50b3Bcbi8vICAgICAgICAgfSwgOTAwKTtcbi8vICAgICB9XG4vL1xuLy8gfSk7XG5cbiQoXCIucGFja2FnZS1pdGVtXCIpLmhvdmVyKFxuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcygncGFja2FnZS1pdGVtX19ob3ZlcicpLnNpYmxpbmdzKCkucmVtb3ZlQ2xhc3MoJ3BhY2thZ2UtaXRlbV9faG92ZXInKTtcbiAgICB9LFxuICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgJChcIiNvcHRpbWFsXCIpLmFkZENsYXNzKCdwYWNrYWdlLWl0ZW1fX2hvdmVyJyk7XG4gICAgfVxuKTtcblxuLy9TTElERVItV29ya3NcbiQoJy5zbGlkZXItY29udHJvbCcpLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZGlyZWN0aW9uID0gJCh0aGlzKS5kYXRhKCdkaXJlY3Rpb24nKTtcbiAgICB2YXIgdGFyZ2V0ID0gJCh0aGlzKS5kYXRhKCd0YXJnZXQnKSB8fCBmYWxzZTtcblxuICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgY2hhbmdlU2xpZGUodGFyZ2V0LCBkaXJlY3Rpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGNoYW5nZVNsaWRlKCcud29ya3Mtc2xpZGVyLWJsb2NrJywgZGlyZWN0aW9uKTtcbiAgICAgICAgY2hhbmdlU2xpZGUoJy5zbGlkZXItY29udGVudC1ibG9jaycsIGRpcmVjdGlvbik7XG4gICAgfVxufSk7XG5cbmZ1bmN0aW9uIGNoYW5nZVNsaWRlKHRhcmdldCwgZGlyZWN0aW9uKSB7XG4gICAgdmFyIGFjdGl2ZVNsaWRlTnVtYmVyID0gJCh0YXJnZXQgKyAnIC5hY3RpdmUtc2xpZGUnKS5pbmRleCgpO1xuICAgIHZhciBzbGlkZXMgPSAkKHRhcmdldCArICcgLnNsaWRlJyk7XG4gICAgdmFyIHNsaWRlc1F1YW50aXR5ID0gc2xpZGVzLmxlbmd0aDtcblxuICAgIGlmIChkaXJlY3Rpb24gPT0gXCJuZXh0XCIpIHtcbiAgICAgICAgaWYgKGFjdGl2ZVNsaWRlTnVtYmVyID09IHNsaWRlc1F1YW50aXR5IC0gMSkge1xuICAgICAgICAgICAgbWFrZVNsaWRlQWN0aXZlKHNsaWRlcy5lcSgwKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtYWtlU2xpZGVBY3RpdmUoc2xpZGVzLmVxKGFjdGl2ZVNsaWRlTnVtYmVyICsgMSkpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGFjdGl2ZVNsaWRlTnVtYmVyID09IDApIHtcbiAgICAgICAgICAgIG1ha2VTbGlkZUFjdGl2ZShzbGlkZXMuZXEoc2xpZGVzUXVhbnRpdHkgLSAxKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtYWtlU2xpZGVBY3RpdmUoc2xpZGVzLmVxKGFjdGl2ZVNsaWRlTnVtYmVyIC0gMSkpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBtYWtlU2xpZGVBY3RpdmUoc2xpZGUpIHtcbiAgICBzbGlkZS5hZGRDbGFzcygnYWN0aXZlLXNsaWRlJykuc2libGluZ3MoKS5yZW1vdmVDbGFzcygnYWN0aXZlLXNsaWRlJyk7XG59XG5cbi8vVE9ETzo6cmVmYWN0b3IgdGhpcyBzaGl0XG5mdW5jdGlvbiBkZXRlY3RTd2lwZShlbCwgdGFyZ2V0LCBmdW5jKSB7XG5cbiAgICBzd2lwZV9kZXQgPSBuZXcgT2JqZWN0KCk7XG4gICAgc3dpcGVfZGV0LnNYID0gMDtcbiAgICBzd2lwZV9kZXQuZVggPSAwO1xuICAgIHZhciBtaW5feCA9IDUwO1xuXG4gICAgdmFyIGRpcmVjdGlvbiA9IFwiXCI7XG4gICAgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGVsKTtcbiAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICB2YXIgdCA9IGUudG91Y2hlc1swXTtcbiAgICAgICAgc3dpcGVfZGV0LnNYID0gdC5zY3JlZW5YO1xuICAgIH0sIGZhbHNlKTtcbiAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHZhciB0ID0gZS50b3VjaGVzWzBdO1xuICAgICAgICBzd2lwZV9kZXQuZVggPSB0LnNjcmVlblg7XG4gICAgfSwgZmFsc2UpO1xuICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vaG9yaXpvbnRhbCBkZXRlY3Rpb25cbiAgICAgICAgaWYgKCgoKHN3aXBlX2RldC5lWCAtIG1pbl94ID4gc3dpcGVfZGV0LnNYKSB8fCAoc3dpcGVfZGV0LmVYICsgbWluX3ggPCBzd2lwZV9kZXQuc1gpKSAmJiAoc3dpcGVfZGV0LmVYID4gMCkpKSB7XG4gICAgICAgICAgICBpZiAoc3dpcGVfZGV0LmVYID4gc3dpcGVfZGV0LnNYKSBkaXJlY3Rpb24gPSBcInByZXZcIjtcbiAgICAgICAgICAgIGVsc2UgZGlyZWN0aW9uID0gXCJuZXh0XCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRpcmVjdGlvbiAhPSBcIlwiKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGZ1bmMgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIC8vVE9ETzo6cmVmYWN0b3IgdGhpcyBibG9vZHkgY3JhcFxuICAgICAgICAgICAgICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuYyh0YXJnZXQsIGRpcmVjdGlvbik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZnVuYygnLndvcmtzLXNsaWRlci1ibG9jaycsIGRpcmVjdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIGZ1bmMoJy5zbGlkZXItY29udGVudC1ibG9jaycsIGRpcmVjdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGRpcmVjdGlvbiA9IFwiXCI7XG4gICAgICAgIHN3aXBlX2RldC5zWCA9IDA7XG4gICAgICAgIHN3aXBlX2RldC5zWSA9IDA7XG4gICAgICAgIHN3aXBlX2RldC5lWCA9IDA7XG4gICAgICAgIHN3aXBlX2RldC5lWSA9IDA7XG4gICAgfSwgZmFsc2UpO1xufVxuXG5cbmlmICgkKFwiI3NlY3Rpb24tM1wiKS5sZW5ndGggPiAwKSB7XG4gICAgZGV0ZWN0U3dpcGUoJ3NlY3Rpb24tMycsIGZhbHNlLCBjaGFuZ2VTbGlkZSk7XG59XG5cbmlmICgkKCcjc2VjdGlvbi1xdW90ZScpLmxlbmd0aCA+IDApIHtcbiAgICBkZXRlY3RTd2lwZSgnc2VjdGlvbi1xdW90ZScsICcjcXVvdGVzU2xpZGVyJywgY2hhbmdlU2xpZGUpO1xufVxuXG53aW5kb3cub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICgkKCcjdHJpYW5nbGUnKS5sZW5ndGggPiAwKXtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgbXlGdW5jdGlvbik7XG4gICAgfVxufTtcblxuXG5mdW5jdGlvbiBteUZ1bmN0aW9uKCkge1xuICAgIC8vTGluZSsgY2lyY2xlcyAtIGFuaW1hdGlvblxuICAgIHZhciB0cmlhbmdsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidHJpYW5nbGVcIiksXG4gICAgICAgIGxpdHRsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3QyXCIpLFxuICAgICAgICBsZW5ndGggPSB0cmlhbmdsZS5nZXRUb3RhbExlbmd0aCgpLFxuICAgICAgICBzdGFydFMgPSAkKHdpbmRvdykuaGVpZ2h0KCkgLyAyLFxuICAgICAgICBwb2ludDEgPSAkKFwiI2NpcmNsZS0xXCIpLm9mZnNldCgpLFxuICAgICAgICBwb2ludDIgPSAkKFwiI2NpcmNsZS0yXCIpLm9mZnNldCgpLFxuICAgICAgICBwb2ludDMgPSAkKFwiI2NpcmNsZS0zXCIpLm9mZnNldCgpLFxuICAgICAgICBwb2ludDQgPSAkKFwiI2NpcmNsZS00XCIpLm9mZnNldCgpLFxuICAgICAgICBwb2ludDUgPSAkKFwiI2NpcmNsZS01XCIpLm9mZnNldCgpLFxuICAgICAgICBwb2ludDYgPSAkKFwiI2NpcmNsZS02XCIpLm9mZnNldCgpLFxuICAgICAgICBkcmF3O1xuXG5cbiAgICB0cmlhbmdsZS5zdHlsZS5zdHJva2VEYXNoYXJyYXkgPSBsZW5ndGg7XG4gICAgdHJpYW5nbGUuc3R5bGUuc3Ryb2tlRGFzaG9mZnNldCA9IGxlbmd0aDtcblxuICAgIGlmICh3aW5kb3cuaW5uZXJXaWR0aCA9PSAxMDI0KSB7XG4gICAgICAgIGlmICh3aW5kb3cucGFnZVlPZmZzZXQgKyAxLjEgKiBzdGFydFMgPiBwb2ludDQudG9wKSB7XG4gICAgICAgICAgICBkcmF3ID0gd2luZG93LnBhZ2VZT2Zmc2V0IC0gcG9pbnQxLnRvcCArIDEuMzUgKiBzdGFydFM7XG4gICAgICAgICAgICB0cmlhbmdsZS5zdHlsZS5zdHJva2VEYXNob2Zmc2V0ID0gbGVuZ3RoIC0gMS4zNSAqIGRyYXc7XG4gICAgICAgICAgICBpZiAobmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdNYWMgT1MgWCcpICE9IC0xKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxlbmd0aCAtIDEuMzUgKiBkcmF3IDw9IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdHJpYW5nbGUuc3R5bGUuc3Ryb2tlRGFzaG9mZnNldCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGlmKCQoXCJsaW5lXCIpLmlzKFwiLnN0MlwiKSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaXR0bGUuc3R5bGUuc3Ryb2tlID0gXCIjRUU0NEE0XCI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJhcnJvdyBkcmF3XCIpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCQoXCIjY2lyY2xlLTRcIikuaGFzQ2xhc3MoXCJjaXJjbGUtNF9fYWN0aXZlXCIpID09IDEpIHtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgJChcIiNjaXJjbGUtNVwiKS5hZGRDbGFzcyhcImNpcmNsZS01X19hY3RpdmVcIilcbiAgICAgICAgICAgICAgICB9LCA2MDApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHdpbmRvdy5wYWdlWU9mZnNldCArIDEuMSAqIHN0YXJ0UyA+PSBwb2ludDEudG9wKSB7XG4gICAgICAgICAgICAgICAgZHJhdyA9IHdpbmRvdy5wYWdlWU9mZnNldCAtIHBvaW50MS50b3AgKyAxLjMgKiBzdGFydFM7XG4gICAgICAgICAgICAgICAgdHJpYW5nbGUuc3R5bGUuc3Ryb2tlRGFzaG9mZnNldCA9IGxlbmd0aCAtIGRyYXc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAod2luZG93LnBhZ2VZT2Zmc2V0ICsgMS4xICogc3RhcnRTID4gcG9pbnQ0LnRvcCkge1xuICAgICAgICAgICAgZHJhdyA9IHdpbmRvdy5wYWdlWU9mZnNldCAtIHBvaW50MS50b3AgKyAxLjEgKiBzdGFydFM7XG4gICAgICAgICAgICB0cmlhbmdsZS5zdHlsZS5zdHJva2VEYXNob2Zmc2V0ID0gbGVuZ3RoIC0gMS4yICogZHJhdztcbiAgICAgICAgICAgIGlmIChuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ01hYyBPUyBYJykgIT0gLTEpIHtcbiAgICAgICAgICAgICAgICBpZiAobGVuZ3RoIC0gMS4yICogZHJhdyA8PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyaWFuZ2xlLnN0eWxlLnN0cm9rZURhc2hvZmZzZXQgPSAwO1xuICAgICAgICAgICAgICAgICAgICBpZigkKFwibGluZVwiKS5pcyhcIi5zdDJcIikpe1xuICAgICAgICAgICAgICAgICAgICAgICAgbGl0dGxlLnN0eWxlLnN0cm9rZSA9IFwiI0VFNDRBNFwiO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiYXJyb3cgZHJhd1wiKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgkKFwiI2NpcmNsZS00XCIpLmhhc0NsYXNzKFwiY2lyY2xlLTRfX2FjdGl2ZVwiKSA9PSAxKSB7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICQoXCIjY2lyY2xlLTVcIikuYWRkQ2xhc3MoXCJjaXJjbGUtNV9fYWN0aXZlXCIpXG4gICAgICAgICAgICAgICAgfSwgNjAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh3aW5kb3cucGFnZVlPZmZzZXQgKyAxLjEgKiBzdGFydFMgPj0gcG9pbnQxLnRvcCkge1xuICAgICAgICAgICAgICAgIGRyYXcgPSB3aW5kb3cucGFnZVlPZmZzZXQgLSBwb2ludDEudG9wICsgMS4xICogc3RhcnRTO1xuICAgICAgICAgICAgICAgIHRyaWFuZ2xlLnN0eWxlLnN0cm9rZURhc2hvZmZzZXQgPSBsZW5ndGggLSBkcmF3O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmICh3aW5kb3cucGFnZVlPZmZzZXQgPT0gMCkge1xuICAgICAgICB0cmlhbmdsZS5zdHlsZS5zdHJva2VEYXNob2Zmc2V0ID0gbGVuZ3RoO1xuICAgIH1cbiAgICBpZiAodHJpYW5nbGUuc3R5bGUuc3Ryb2tlRGFzaG9mZnNldCA8PSAwIHx8IHRyaWFuZ2xlLnN0eWxlLnN0cm9rZURhc2hvZmZzZXQgPT0gJzBweCcgKSB7XG4gICAgICAgIGlmKCQoXCJsaW5lXCIpLmlzKFwiLnN0MlwiKSl7XG4gICAgICAgICAgICBsaXR0bGUuc3R5bGUuc3Ryb2tlID0gXCIjRUU0NEE0XCI7XG4gICAgICAgIH1cbiAgICAgICAgdHJpYW5nbGUuc3R5bGUudHJhbnNpdGlvbiA9IFwiMHNcIjtcbiAgICAgICAgdHJpYW5nbGUuc3R5bGUuc3Ryb2tlRGFzaGFycmF5ID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgICBpZigkKFwibGluZVwiKS5pcyhcIi5zdDJcIikpe1xuICAgICAgICAgICAgbGl0dGxlLnN0eWxlLnN0cm9rZSA9IFwibm9uZVwiO1xuICAgICAgICB9XG5cbiAgICB9XG4gICAgaWYgKHdpbmRvdy5wYWdlWU9mZnNldCArIDEuMSAqIHN0YXJ0UyA+IHBvaW50MS50b3ApIHtcbiAgICAgICAgJChcIiNjaXJjbGUtMVwiKS5hZGRDbGFzcyhcImNpcmNsZV9fYWN0aXZlXCIpO1xuICAgIH1cbiAgICBpZiAod2luZG93LnBhZ2VZT2Zmc2V0ICsgMS4xICogc3RhcnRTID4gcG9pbnQyLnRvcCkge1xuICAgICAgICAkKFwiI2NpcmNsZS0yXCIpLmFkZENsYXNzKFwiY2lyY2xlLTJfX2FjdGl2ZVwiKTtcbiAgICB9XG4gICAgaWYgKHdpbmRvdy5wYWdlWU9mZnNldCArIDEuMSAqIHN0YXJ0UyA+IHBvaW50My50b3ApIHtcbiAgICAgICAgJChcIiNjaXJjbGUtM1wiKS5hZGRDbGFzcyhcImNpcmNsZS0zX19hY3RpdmVcIik7XG4gICAgfVxuICAgIGlmICh3aW5kb3cucGFnZVlPZmZzZXQgKyAxLjEgKiBzdGFydFMgPiBwb2ludDQudG9wKSB7XG4gICAgICAgICQoXCIjY2lyY2xlLTRcIikuYWRkQ2xhc3MoXCJjaXJjbGUtNF9fYWN0aXZlXCIpO1xuICAgIH1cbiAgICBpZiAod2luZG93LnBhZ2VZT2Zmc2V0ICsgMS4xICogc3RhcnRTID4gcG9pbnQ1LnRvcCkge1xuICAgICAgICAkKFwiI2NpcmNsZS01XCIpLmFkZENsYXNzKFwiY2lyY2xlLTVfX2FjdGl2ZVwiKTtcbiAgICB9XG4gICAgaWYgKHdpbmRvdy5wYWdlWU9mZnNldCArIDEuMSAqIHN0YXJ0UyA+IHBvaW50NS50b3ApIHtcbiAgICAgICAgJChcIiNjaXJjbGUtNlwiKS5hZGRDbGFzcyhcImNpcmNsZS01X19hY3RpdmVcIik7XG4gICAgfVxufVxuXG5cblxuXG4vL01PREFMXG5cblxuJChcIi5pdGVtLWNvdmVyXCIpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xuICAgICQodGhpcykuYWRkQ2xhc3MoJ2l0ZW0tY292ZXJfX2FjdGl2ZScpLnJlbW92ZUNsYXNzKCdpdGVtLWNvdmVyX19lcnJvcicpLnNpYmxpbmdzKCkucmVtb3ZlQ2xhc3MoJ2l0ZW0tY292ZXJfX2FjdGl2ZScpXG59KTtcbi8vVE9ETzo6ZGVsZXRlIGF0ZXIgcmV2aWV3c1xuJCgnLnF1b3RlLWl0ZW1fbGluaycpLm9uKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xufSk7XG4vL1xuLy9cbihmdW5jdGlvbiAodCkge1xuICAgIHQuYmFja2dyb3VuZFZpZGVvID0gZnVuY3Rpb24gKGUsIGkpIHtcbiAgICAgICAgdmFyIG4gPSB7dmlkZW9pZDogXCJ2aWRlb19iYWNrZ3JvdW5kXCIsIGF1dG9wbGF5OiB0cnVlLCBsb29wOiB0cnVlLCBwcmVsb2FkOiB0cnVlfTtcbiAgICAgICAgdmFyIHMgPSB0aGlzO1xuICAgICAgICBzLnNldHRpbmdzID0ge307XG4gICAgICAgIHZhciBvID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcy5zZXR0aW5ncyA9IHQuZXh0ZW5kKHt9LCBuLCBpKTtcbiAgICAgICAgICAgIHMuZWwgPSBlO1xuICAgICAgICAgICAgZCgpXG4gICAgICAgIH07XG4gICAgICAgIHZhciBkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGUgPSBcIlwiLCBpID0gXCJcIiwgbiA9IFwiXCIsIG8gPSBcIlwiLCBkID0gcy5zZXR0aW5ncy5wcmVsb2FkLCBnID0gcy5zZXR0aW5ncy5hdXRvcGxheSwgYSA9IHMuc2V0dGluZ3MubG9vcDtcbiAgICAgICAgICAgIGlmIChkKSB7XG4gICAgICAgICAgICAgICAgaSA9ICdwcmVsb2FkPVwiYXV0b1wiJ1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpID0gXCJcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGcpIHtcbiAgICAgICAgICAgICAgICBuID0gJ2F1dG9wbGF5PVwiYXV0b3BsYXlcIidcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbiA9IFwiXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhKSB7XG4gICAgICAgICAgICAgICAgbyA9ICdsb29wPVwidHJ1ZVwiJ1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBvID0gXCJcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZSArPSAnPHZpZGVvIGlkPVwiJyArIHMuc2V0dGluZ3MudmlkZW9pZCArICdcIicgKyBpICsgbiArIG87XG4gICAgICAgICAgICBpZiAocy5zZXR0aW5ncy5wb3N0ZXIpIHtcbiAgICAgICAgICAgICAgICBlICs9ICcgcG9zdGVyPVwiJyArIHMuc2V0dGluZ3MucG9zdGVyICsgJ1wiICdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGUgKz0gJ3N0eWxlPVwiZGlzcGxheTpub25lO3Bvc2l0aW9uOnJlbGF0aXZlOzt0b3A6MDtsZWZ0OjA7Ym90dG9tOjA7cmlnaHQ6MDt6LWluZGV4Oi0xMDA7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtcIj4nO1xuICAgICAgICAgICAgZm9yICh2YXIgbCA9IDA7IGwgPCBzLnNldHRpbmdzLnR5cGVzLmxlbmd0aDsgbCsrKSB7XG4gICAgICAgICAgICAgICAgZSArPSAnPHNvdXJjZSBzcmM9XCInICsgcy5zZXR0aW5ncy5wYXRoICsgcy5zZXR0aW5ncy5maWxlbmFtZSArIFwiLlwiICsgcy5zZXR0aW5ncy50eXBlc1tsXSArICdcIiB0eXBlPVwidmlkZW8vJyArIHMuc2V0dGluZ3MudHlwZXNbbF0gKyAnXCIgLz4nXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlICs9IFwiYmd2aWRlbzwvdmlkZW8+XCI7XG4gICAgICAgICAgICBzLmVsLnByZXBlbmQoZSk7XG4gICAgICAgICAgICBzLnZpZGVvRWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChzLnNldHRpbmdzLnZpZGVvaWQpO1xuICAgICAgICAgICAgcy4kdmlkZW9FbCA9IHQocy52aWRlb0VsKTtcbiAgICAgICAgICAgIHMuJHZpZGVvRWwuZmFkZUluKDJlMyk7XG4gICAgICAgICAgICByKClcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIHIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgdCA9IGcoKTtcbiAgICAgICAgICAgIHMuJHZpZGVvRWwud2lkdGgodCAqIHMuc2V0dGluZ3Mud2lkdGgpO1xuICAgICAgICAgICAgcy4kdmlkZW9FbC5oZWlnaHQodCAqIHMuc2V0dGluZ3MuaGVpZ2h0KTtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygcy5zZXR0aW5ncy5hbGlnbiAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgIGEoKVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB2YXIgZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBlID0gdCh3aW5kb3cpLndpZHRoKCk7XG4gICAgICAgICAgICB2YXIgaSA9IHQod2luZG93KS5oZWlnaHQoKTtcbiAgICAgICAgICAgIHZhciBuID0gZSAvIGk7XG4gICAgICAgICAgICB2YXIgbyA9IHMuc2V0dGluZ3Mud2lkdGggLyBzLnNldHRpbmdzLmhlaWdodDtcbiAgICAgICAgICAgIHZhciBkID0gaSAvIHMuc2V0dGluZ3MuaGVpZ2h0O1xuICAgICAgICAgICAgaWYgKG4gPj0gbykge1xuICAgICAgICAgICAgICAgIGQgPSBlIC8gcy5zZXR0aW5ncy53aWR0aFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRcbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZSA9ICh0KHdpbmRvdykud2lkdGgoKSA+PiAxKSAtIChzLiR2aWRlb0VsLndpZHRoKCkgPj4gMSkgfCAwO1xuICAgICAgICAgICAgdmFyIGkgPSAodCh3aW5kb3cpLmhlaWdodCgpID4+IDEpIC0gKHMuJHZpZGVvRWwuaGVpZ2h0KCkgPj4gMSkgfCAwO1xuICAgICAgICAgICAgaWYgKHMuc2V0dGluZ3MuYWxpZ24gPT0gXCJjZW50ZXJYWVwiKSB7XG4gICAgICAgICAgICAgICAgcy4kdmlkZW9FbC5jc3Moe2xlZnQ6IGUsIHRvcDogaX0pO1xuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHMuc2V0dGluZ3MuYWxpZ24gPT0gXCJjZW50ZXJYXCIpIHtcbiAgICAgICAgICAgICAgICBzLiR2aWRlb0VsLmNzcyhcImxlZnRcIiwgZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocy5zZXR0aW5ncy5hbGlnbiA9PSBcImNlbnRlcllcIikge1xuICAgICAgICAgICAgICAgIHMuJHZpZGVvRWwuY3NzKFwidG9wXCIsIGkpO1xuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBvKCk7XG4gICAgICAgIHQod2luZG93KS5yZXNpemUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcigpXG4gICAgICAgIH0pO1xuICAgICAgICBzLiR2aWRlb0VsLmJpbmQoXCJlbmRlZFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLnBsYXkoKVxuICAgICAgICB9KVxuICAgIH1cbn0pKGpRdWVyeSk7XG5cbiQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmlkZW9iYWNrZ3JvdW5kID0gbmV3ICQuYmFja2dyb3VuZFZpZGVvKCQoJy52aWRlby1jb3ZlcicpLCB7XG4gICAgICAgIFwiYWxpZ25cIjogXCJjZW50ZXJYWVwiLFxuICAgICAgICBcIndpZHRoXCI6IDEyODAsXG4gICAgICAgIFwiaGVpZ2h0XCI6IDcyMCxcbiAgICAgICAgXCJwYXRoXCI6IFwiaW1nL2ltYWdlcy9cIixcbiAgICAgICAgXCJmaWxlbmFtZVwiOiBcIm1haW4tdmlkZW9cIixcbiAgICAgICAgXCJ0eXBlc1wiOiBbXCJtcDRcIiwgXCJvZ2dcIiwgXCJ3ZWJtXCJdLFxuICAgICAgICBcInByZWxvYWRcIjogdHJ1ZSxcbiAgICAgICAgXCJhdXRvcGxheVwiOiB0cnVlLFxuICAgICAgICBcImxvb3BcIjogdHJ1ZVxuICAgIH0pO1xufSk7XG5cblxuJCgnLnNhbGVzLWl0ZW0tYnV0dG9uJykub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgIHZhciBxdW9udGl0eSA9ICQodGhpcykucGFyZW50KCkuaW5kZXgoKS0xO1xuICAgIGNvbnNvbGUubG9nKHF1b250aXR5KVxuICAgICQoJyNzYWxlc01vZGFsJykubW9kYWwoJ3Nob3cnKTtcbiAgICAkKCcjbWF1dGljZm9ybV9pbnB1dF9ib3VuZHN0YXJ0c2FsZXNwb3B1cF9mX3NlbGVjdCcpLmNoaWxkcmVuKCkuZXEocXVvbnRpdHkrMikuYXR0cihcInNlbGVjdGVkXCIsIFwic2VsZWN0ZWRcIilcbn0pXG5cblxuaWYoJChcImRpdlwiKS5pcyhcIi5jdXN0b21lcnMtYmxvY2tcIikpe1xuXG4gICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKXtcbiAgICAgICAgJCgnLmN1c3RvbWVycy1ibG9jaycpLnNsaWNrKHtcbiAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMyxcbiAgICAgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAxLFxuICAgICAgICAgICAgYXV0b3BsYXk6IGZhbHNlLFxuICAgICAgICAgICAgYXV0b3BsYXlTcGVlZDogMjAwMCxcblx0ICAgICAgICByZXNwb25zaXZlOiBbXG5cdFx0ICAgICAgICB7XG5cdFx0XHQgICAgICAgIGJyZWFrcG9pbnQ6IDEwMjUsXG5cdFx0XHQgICAgICAgIHNldHRpbmdzOiB7XG5cdFx0XHRcdCAgICAgICAgc2xpZGVzVG9TaG93OiAyLFxuXHRcdFx0XHQgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAyLFxuXHRcdFx0XHQgICAgICAgIGluZmluaXRlOiB0cnVlLFxuXHRcdFx0XHQgICAgICAgIC8vIGRvdHM6IHRydWVcblx0XHRcdCAgICAgICAgfVxuXHRcdCAgICAgICAgfSxcblx0XHQgICAgICAgIHtcblx0XHRcdCAgICAgICAgYnJlYWtwb2ludDogNjAwLFxuXHRcdFx0ICAgICAgICBzZXR0aW5nczoge1xuXHRcdFx0XHQgICAgICAgIHNsaWRlc1RvU2hvdzogMSxcblx0XHRcdFx0ICAgICAgICBzbGlkZXNUb1Njcm9sbDogMVxuXHRcdFx0ICAgICAgICB9XG5cdFx0ICAgICAgICB9LFxuXHRcdCAgICAgICAge1xuXHRcdFx0ICAgICAgICBicmVha3BvaW50OiA0ODAsXG5cdFx0XHQgICAgICAgIHNldHRpbmdzOiB7XG5cdFx0XHRcdCAgICAgICAgc2xpZGVzVG9TaG93OiAxLFxuXHRcdFx0XHQgICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAxLFxuXHRcdFx0XHQgICAgICAgIGF1dG9wbGF5OiB0cnVlXG5cdFx0XHQgICAgICAgIH1cblx0XHQgICAgICAgIH1cblx0ICAgICAgICBdXG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG59XG5cbiQoJy5idXR0b24tam9pbi1ub3cnKS5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgJCgnYm9keSwgaHRtbCcpLmFuaW1hdGUoe3Njcm9sbFRvcDogJCgnaW5wdXQnKS5vZmZzZXQoKS50b3AgLSAzNTB9LCA5MDApO1xufSk7XG5cblxuLypcbiAgICAgXyBfICAgICAgXyAgICAgICBfXG4gX19ffCAoXykgX19ffCB8IF9fICAoXylfX19cbi8gX198IHwgfC8gX198IHwvIC8gIHwgLyBfX3xcblxcX18gXFwgfCB8IChfX3wgICA8IF8gfCBcXF9fIFxcXG58X19fL198X3xcXF9fX3xffFxcXyhfKS8gfF9fXy9cbiAgICAgICAgICAgICAgICAgICB8X18vXG5cbiBWZXJzaW9uOiAxLjguMFxuICBBdXRob3I6IEtlbiBXaGVlbGVyXG4gV2Vic2l0ZTogaHR0cDovL2tlbndoZWVsZXIuZ2l0aHViLmlvXG4gICAgRG9jczogaHR0cDovL2tlbndoZWVsZXIuZ2l0aHViLmlvL3NsaWNrXG4gICAgUmVwbzogaHR0cDovL2dpdGh1Yi5jb20va2Vud2hlZWxlci9zbGlja1xuICBJc3N1ZXM6IGh0dHA6Ly9naXRodWIuY29tL2tlbndoZWVsZXIvc2xpY2svaXNzdWVzXG5cbiAqL1xuLyogZ2xvYmFsIHdpbmRvdywgZG9jdW1lbnQsIGRlZmluZSwgalF1ZXJ5LCBzZXRJbnRlcnZhbCwgY2xlYXJJbnRlcnZhbCAqL1xuOyhmdW5jdGlvbihmYWN0b3J5KSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgZGVmaW5lKFsnanF1ZXJ5J10sIGZhY3RvcnkpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKCdqcXVlcnknKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZmFjdG9yeShqUXVlcnkpO1xuICAgIH1cblxufShmdW5jdGlvbigkKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIHZhciBTbGljayA9IHdpbmRvdy5TbGljayB8fCB7fTtcblxuICAgIFNsaWNrID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBpbnN0YW5jZVVpZCA9IDA7XG5cbiAgICAgICAgZnVuY3Rpb24gU2xpY2soZWxlbWVudCwgc2V0dGluZ3MpIHtcblxuICAgICAgICAgICAgdmFyIF8gPSB0aGlzLCBkYXRhU2V0dGluZ3M7XG5cbiAgICAgICAgICAgIF8uZGVmYXVsdHMgPSB7XG4gICAgICAgICAgICAgICAgYWNjZXNzaWJpbGl0eTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBhZGFwdGl2ZUhlaWdodDogZmFsc2UsXG4gICAgICAgICAgICAgICAgYXBwZW5kQXJyb3dzOiAkKGVsZW1lbnQpLFxuICAgICAgICAgICAgICAgIGFwcGVuZERvdHM6ICQoZWxlbWVudCksXG4gICAgICAgICAgICAgICAgYXJyb3dzOiB0cnVlLFxuICAgICAgICAgICAgICAgIGFzTmF2Rm9yOiBudWxsLFxuICAgICAgICAgICAgICAgIHByZXZBcnJvdzogJzxidXR0b24gY2xhc3M9XCJzbGljay1wcmV2XCIgYXJpYS1sYWJlbD1cIlByZXZpb3VzXCIgdHlwZT1cImJ1dHRvblwiPlByZXZpb3VzPC9idXR0b24+JyxcbiAgICAgICAgICAgICAgICBuZXh0QXJyb3c6ICc8YnV0dG9uIGNsYXNzPVwic2xpY2stbmV4dFwiIGFyaWEtbGFiZWw9XCJOZXh0XCIgdHlwZT1cImJ1dHRvblwiPk5leHQ8L2J1dHRvbj4nLFxuICAgICAgICAgICAgICAgIGF1dG9wbGF5OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBhdXRvcGxheVNwZWVkOiAzMDAwLFxuICAgICAgICAgICAgICAgIGNlbnRlck1vZGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGNlbnRlclBhZGRpbmc6ICc1MHB4JyxcbiAgICAgICAgICAgICAgICBjc3NFYXNlOiAnZWFzZScsXG4gICAgICAgICAgICAgICAgY3VzdG9tUGFnaW5nOiBmdW5jdGlvbihzbGlkZXIsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQoJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIC8+JykudGV4dChpICsgMSk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBkb3RzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBkb3RzQ2xhc3M6ICdzbGljay1kb3RzJyxcbiAgICAgICAgICAgICAgICBkcmFnZ2FibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgZWFzaW5nOiAnbGluZWFyJyxcbiAgICAgICAgICAgICAgICBlZGdlRnJpY3Rpb246IDAuMzUsXG4gICAgICAgICAgICAgICAgZmFkZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgZm9jdXNPblNlbGVjdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgZm9jdXNPbkNoYW5nZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgaW5maW5pdGU6IHRydWUsXG4gICAgICAgICAgICAgICAgaW5pdGlhbFNsaWRlOiAwLFxuICAgICAgICAgICAgICAgIGxhenlMb2FkOiAnb25kZW1hbmQnLFxuICAgICAgICAgICAgICAgIG1vYmlsZUZpcnN0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICBwYXVzZU9uSG92ZXI6IHRydWUsXG4gICAgICAgICAgICAgICAgcGF1c2VPbkZvY3VzOiB0cnVlLFxuICAgICAgICAgICAgICAgIHBhdXNlT25Eb3RzSG92ZXI6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHJlc3BvbmRUbzogJ3dpbmRvdycsXG4gICAgICAgICAgICAgICAgcmVzcG9uc2l2ZTogbnVsbCxcbiAgICAgICAgICAgICAgICByb3dzOiAxLFxuICAgICAgICAgICAgICAgIHJ0bDogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2xpZGU6ICcnLFxuICAgICAgICAgICAgICAgIHNsaWRlc1BlclJvdzogMSxcbiAgICAgICAgICAgICAgICBzbGlkZXNUb1Nob3c6IDEsXG4gICAgICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDEsXG4gICAgICAgICAgICAgICAgc3BlZWQ6IDUwMCxcbiAgICAgICAgICAgICAgICBzd2lwZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzd2lwZVRvU2xpZGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHRvdWNoTW92ZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB0b3VjaFRocmVzaG9sZDogNSxcbiAgICAgICAgICAgICAgICB1c2VDU1M6IHRydWUsXG4gICAgICAgICAgICAgICAgdXNlVHJhbnNmb3JtOiB0cnVlLFxuICAgICAgICAgICAgICAgIHZhcmlhYmxlV2lkdGg6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHZlcnRpY2FsOiBmYWxzZSxcbiAgICAgICAgICAgICAgICB2ZXJ0aWNhbFN3aXBpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHdhaXRGb3JBbmltYXRlOiB0cnVlLFxuICAgICAgICAgICAgICAgIHpJbmRleDogMTAwMFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgXy5pbml0aWFscyA9IHtcbiAgICAgICAgICAgICAgICBhbmltYXRpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGRyYWdnaW5nOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBhdXRvUGxheVRpbWVyOiBudWxsLFxuICAgICAgICAgICAgICAgIGN1cnJlbnREaXJlY3Rpb246IDAsXG4gICAgICAgICAgICAgICAgY3VycmVudExlZnQ6IG51bGwsXG4gICAgICAgICAgICAgICAgY3VycmVudFNsaWRlOiAwLFxuICAgICAgICAgICAgICAgIGRpcmVjdGlvbjogMSxcbiAgICAgICAgICAgICAgICAkZG90czogbnVsbCxcbiAgICAgICAgICAgICAgICBsaXN0V2lkdGg6IG51bGwsXG4gICAgICAgICAgICAgICAgbGlzdEhlaWdodDogbnVsbCxcbiAgICAgICAgICAgICAgICBsb2FkSW5kZXg6IDAsXG4gICAgICAgICAgICAgICAgJG5leHRBcnJvdzogbnVsbCxcbiAgICAgICAgICAgICAgICAkcHJldkFycm93OiBudWxsLFxuICAgICAgICAgICAgICAgIHNjcm9sbGluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2xpZGVDb3VudDogbnVsbCxcbiAgICAgICAgICAgICAgICBzbGlkZVdpZHRoOiBudWxsLFxuICAgICAgICAgICAgICAgICRzbGlkZVRyYWNrOiBudWxsLFxuICAgICAgICAgICAgICAgICRzbGlkZXM6IG51bGwsXG4gICAgICAgICAgICAgICAgc2xpZGluZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2xpZGVPZmZzZXQ6IDAsXG4gICAgICAgICAgICAgICAgc3dpcGVMZWZ0OiBudWxsLFxuICAgICAgICAgICAgICAgIHN3aXBpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICAgICRsaXN0OiBudWxsLFxuICAgICAgICAgICAgICAgIHRvdWNoT2JqZWN0OiB7fSxcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1zRW5hYmxlZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgdW5zbGlja2VkOiBmYWxzZVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgJC5leHRlbmQoXywgXy5pbml0aWFscyk7XG5cbiAgICAgICAgICAgIF8uYWN0aXZlQnJlYWtwb2ludCA9IG51bGw7XG4gICAgICAgICAgICBfLmFuaW1UeXBlID0gbnVsbDtcbiAgICAgICAgICAgIF8uYW5pbVByb3AgPSBudWxsO1xuICAgICAgICAgICAgXy5icmVha3BvaW50cyA9IFtdO1xuICAgICAgICAgICAgXy5icmVha3BvaW50U2V0dGluZ3MgPSBbXTtcbiAgICAgICAgICAgIF8uY3NzVHJhbnNpdGlvbnMgPSBmYWxzZTtcbiAgICAgICAgICAgIF8uZm9jdXNzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIF8uaW50ZXJydXB0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIF8uaGlkZGVuID0gJ2hpZGRlbic7XG4gICAgICAgICAgICBfLnBhdXNlZCA9IHRydWU7XG4gICAgICAgICAgICBfLnBvc2l0aW9uUHJvcCA9IG51bGw7XG4gICAgICAgICAgICBfLnJlc3BvbmRUbyA9IG51bGw7XG4gICAgICAgICAgICBfLnJvd0NvdW50ID0gMTtcbiAgICAgICAgICAgIF8uc2hvdWxkQ2xpY2sgPSB0cnVlO1xuICAgICAgICAgICAgXy4kc2xpZGVyID0gJChlbGVtZW50KTtcbiAgICAgICAgICAgIF8uJHNsaWRlc0NhY2hlID0gbnVsbDtcbiAgICAgICAgICAgIF8udHJhbnNmb3JtVHlwZSA9IG51bGw7XG4gICAgICAgICAgICBfLnRyYW5zaXRpb25UeXBlID0gbnVsbDtcbiAgICAgICAgICAgIF8udmlzaWJpbGl0eUNoYW5nZSA9ICd2aXNpYmlsaXR5Y2hhbmdlJztcbiAgICAgICAgICAgIF8ud2luZG93V2lkdGggPSAwO1xuICAgICAgICAgICAgXy53aW5kb3dUaW1lciA9IG51bGw7XG5cbiAgICAgICAgICAgIGRhdGFTZXR0aW5ncyA9ICQoZWxlbWVudCkuZGF0YSgnc2xpY2snKSB8fCB7fTtcblxuICAgICAgICAgICAgXy5vcHRpb25zID0gJC5leHRlbmQoe30sIF8uZGVmYXVsdHMsIHNldHRpbmdzLCBkYXRhU2V0dGluZ3MpO1xuXG4gICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IF8ub3B0aW9ucy5pbml0aWFsU2xpZGU7XG5cbiAgICAgICAgICAgIF8ub3JpZ2luYWxTZXR0aW5ncyA9IF8ub3B0aW9ucztcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudC5tb3pIaWRkZW4gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgXy5oaWRkZW4gPSAnbW96SGlkZGVuJztcbiAgICAgICAgICAgICAgICBfLnZpc2liaWxpdHlDaGFuZ2UgPSAnbW96dmlzaWJpbGl0eWNoYW5nZSc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBkb2N1bWVudC53ZWJraXRIaWRkZW4gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgXy5oaWRkZW4gPSAnd2Via2l0SGlkZGVuJztcbiAgICAgICAgICAgICAgICBfLnZpc2liaWxpdHlDaGFuZ2UgPSAnd2Via2l0dmlzaWJpbGl0eWNoYW5nZSc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF8uYXV0b1BsYXkgPSAkLnByb3h5KF8uYXV0b1BsYXksIF8pO1xuICAgICAgICAgICAgXy5hdXRvUGxheUNsZWFyID0gJC5wcm94eShfLmF1dG9QbGF5Q2xlYXIsIF8pO1xuICAgICAgICAgICAgXy5hdXRvUGxheUl0ZXJhdG9yID0gJC5wcm94eShfLmF1dG9QbGF5SXRlcmF0b3IsIF8pO1xuICAgICAgICAgICAgXy5jaGFuZ2VTbGlkZSA9ICQucHJveHkoXy5jaGFuZ2VTbGlkZSwgXyk7XG4gICAgICAgICAgICBfLmNsaWNrSGFuZGxlciA9ICQucHJveHkoXy5jbGlja0hhbmRsZXIsIF8pO1xuICAgICAgICAgICAgXy5zZWxlY3RIYW5kbGVyID0gJC5wcm94eShfLnNlbGVjdEhhbmRsZXIsIF8pO1xuICAgICAgICAgICAgXy5zZXRQb3NpdGlvbiA9ICQucHJveHkoXy5zZXRQb3NpdGlvbiwgXyk7XG4gICAgICAgICAgICBfLnN3aXBlSGFuZGxlciA9ICQucHJveHkoXy5zd2lwZUhhbmRsZXIsIF8pO1xuICAgICAgICAgICAgXy5kcmFnSGFuZGxlciA9ICQucHJveHkoXy5kcmFnSGFuZGxlciwgXyk7XG4gICAgICAgICAgICBfLmtleUhhbmRsZXIgPSAkLnByb3h5KF8ua2V5SGFuZGxlciwgXyk7XG5cbiAgICAgICAgICAgIF8uaW5zdGFuY2VVaWQgPSBpbnN0YW5jZVVpZCsrO1xuXG4gICAgICAgICAgICAvLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5nc1xuICAgICAgICAgICAgLy8gU3RyaWN0IEhUTUwgcmVjb2duaXRpb24gKG11c3Qgc3RhcnQgd2l0aCA8KVxuICAgICAgICAgICAgLy8gRXh0cmFjdGVkIGZyb20galF1ZXJ5IHYxLjExIHNvdXJjZVxuICAgICAgICAgICAgXy5odG1sRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKikkLztcblxuXG4gICAgICAgICAgICBfLnJlZ2lzdGVyQnJlYWtwb2ludHMoKTtcbiAgICAgICAgICAgIF8uaW5pdCh0cnVlKTtcblxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFNsaWNrO1xuXG4gICAgfSgpKTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hY3RpdmF0ZUFEQSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy4kc2xpZGVUcmFjay5maW5kKCcuc2xpY2stYWN0aXZlJykuYXR0cih7XG4gICAgICAgICAgICAnYXJpYS1oaWRkZW4nOiAnZmFsc2UnXG4gICAgICAgIH0pLmZpbmQoJ2EsIGlucHV0LCBidXR0b24sIHNlbGVjdCcpLmF0dHIoe1xuICAgICAgICAgICAgJ3RhYmluZGV4JzogJzAnXG4gICAgICAgIH0pO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hZGRTbGlkZSA9IFNsaWNrLnByb3RvdHlwZS5zbGlja0FkZCA9IGZ1bmN0aW9uKG1hcmt1cCwgaW5kZXgsIGFkZEJlZm9yZSkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAodHlwZW9mKGluZGV4KSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICBhZGRCZWZvcmUgPSBpbmRleDtcbiAgICAgICAgICAgIGluZGV4ID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIGlmIChpbmRleCA8IDAgfHwgKGluZGV4ID49IF8uc2xpZGVDb3VudCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8udW5sb2FkKCk7XG5cbiAgICAgICAgaWYgKHR5cGVvZihpbmRleCkgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IDAgJiYgXy4kc2xpZGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICQobWFya3VwKS5hcHBlbmRUbyhfLiRzbGlkZVRyYWNrKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYWRkQmVmb3JlKSB7XG4gICAgICAgICAgICAgICAgJChtYXJrdXApLmluc2VydEJlZm9yZShfLiRzbGlkZXMuZXEoaW5kZXgpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgJChtYXJrdXApLmluc2VydEFmdGVyKF8uJHNsaWRlcy5lcShpbmRleCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGFkZEJlZm9yZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICQobWFya3VwKS5wcmVwZW5kVG8oXy4kc2xpZGVUcmFjayk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICQobWFya3VwKS5hcHBlbmRUbyhfLiRzbGlkZVRyYWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIF8uJHNsaWRlcyA9IF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKTtcblxuICAgICAgICBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSkuZGV0YWNoKCk7XG5cbiAgICAgICAgXy4kc2xpZGVUcmFjay5hcHBlbmQoXy4kc2xpZGVzKTtcblxuICAgICAgICBfLiRzbGlkZXMuZWFjaChmdW5jdGlvbihpbmRleCwgZWxlbWVudCkge1xuICAgICAgICAgICAgJChlbGVtZW50KS5hdHRyKCdkYXRhLXNsaWNrLWluZGV4JywgaW5kZXgpO1xuICAgICAgICB9KTtcblxuICAgICAgICBfLiRzbGlkZXNDYWNoZSA9IF8uJHNsaWRlcztcblxuICAgICAgICBfLnJlaW5pdCgpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hbmltYXRlSGVpZ2h0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBfID0gdGhpcztcbiAgICAgICAgaWYgKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgPT09IDEgJiYgXy5vcHRpb25zLmFkYXB0aXZlSGVpZ2h0ID09PSB0cnVlICYmIF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHZhciB0YXJnZXRIZWlnaHQgPSBfLiRzbGlkZXMuZXEoXy5jdXJyZW50U2xpZGUpLm91dGVySGVpZ2h0KHRydWUpO1xuICAgICAgICAgICAgXy4kbGlzdC5hbmltYXRlKHtcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IHRhcmdldEhlaWdodFxuICAgICAgICAgICAgfSwgXy5vcHRpb25zLnNwZWVkKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYW5pbWF0ZVNsaWRlID0gZnVuY3Rpb24odGFyZ2V0TGVmdCwgY2FsbGJhY2spIHtcblxuICAgICAgICB2YXIgYW5pbVByb3BzID0ge30sXG4gICAgICAgICAgICBfID0gdGhpcztcblxuICAgICAgICBfLmFuaW1hdGVIZWlnaHQoKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLnJ0bCA9PT0gdHJ1ZSAmJiBfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB0YXJnZXRMZWZ0ID0gLXRhcmdldExlZnQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKF8udHJhbnNmb3Jtc0VuYWJsZWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suYW5pbWF0ZSh7XG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IHRhcmdldExlZnRcbiAgICAgICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQsIF8ub3B0aW9ucy5lYXNpbmcsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5hbmltYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgdG9wOiB0YXJnZXRMZWZ0XG4gICAgICAgICAgICAgICAgfSwgXy5vcHRpb25zLnNwZWVkLCBfLm9wdGlvbnMuZWFzaW5nLCBjYWxsYmFjayk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgaWYgKF8uY3NzVHJhbnNpdGlvbnMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5ydGwgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5jdXJyZW50TGVmdCA9IC0oXy5jdXJyZW50TGVmdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICQoe1xuICAgICAgICAgICAgICAgICAgICBhbmltU3RhcnQ6IF8uY3VycmVudExlZnRcbiAgICAgICAgICAgICAgICB9KS5hbmltYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgYW5pbVN0YXJ0OiB0YXJnZXRMZWZ0XG4gICAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogXy5vcHRpb25zLnNwZWVkLFxuICAgICAgICAgICAgICAgICAgICBlYXNpbmc6IF8ub3B0aW9ucy5lYXNpbmcsXG4gICAgICAgICAgICAgICAgICAgIHN0ZXA6IGZ1bmN0aW9uKG5vdykge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm93ID0gTWF0aC5jZWlsKG5vdyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1Qcm9wc1tfLmFuaW1UeXBlXSA9ICd0cmFuc2xhdGUoJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdyArICdweCwgMHB4KSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jc3MoYW5pbVByb3BzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbVByb3BzW18uYW5pbVR5cGVdID0gJ3RyYW5zbGF0ZSgwcHgsJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdyArICdweCknO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKGFuaW1Qcm9wcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgXy5hcHBseVRyYW5zaXRpb24oKTtcbiAgICAgICAgICAgICAgICB0YXJnZXRMZWZ0ID0gTWF0aC5jZWlsKHRhcmdldExlZnQpO1xuXG4gICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgYW5pbVByb3BzW18uYW5pbVR5cGVdID0gJ3RyYW5zbGF0ZTNkKCcgKyB0YXJnZXRMZWZ0ICsgJ3B4LCAwcHgsIDBweCknO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGFuaW1Qcm9wc1tfLmFuaW1UeXBlXSA9ICd0cmFuc2xhdGUzZCgwcHgsJyArIHRhcmdldExlZnQgKyAncHgsIDBweCknO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyhhbmltUHJvcHMpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIF8uZGlzYWJsZVRyYW5zaXRpb24oKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbCgpO1xuICAgICAgICAgICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZ2V0TmF2VGFyZ2V0ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgYXNOYXZGb3IgPSBfLm9wdGlvbnMuYXNOYXZGb3I7XG5cbiAgICAgICAgaWYgKCBhc05hdkZvciAmJiBhc05hdkZvciAhPT0gbnVsbCApIHtcbiAgICAgICAgICAgIGFzTmF2Rm9yID0gJChhc05hdkZvcikubm90KF8uJHNsaWRlcik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYXNOYXZGb3I7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmFzTmF2Rm9yID0gZnVuY3Rpb24oaW5kZXgpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBhc05hdkZvciA9IF8uZ2V0TmF2VGFyZ2V0KCk7XG5cbiAgICAgICAgaWYgKCBhc05hdkZvciAhPT0gbnVsbCAmJiB0eXBlb2YgYXNOYXZGb3IgPT09ICdvYmplY3QnICkge1xuICAgICAgICAgICAgYXNOYXZGb3IuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gJCh0aGlzKS5zbGljaygnZ2V0U2xpY2snKTtcbiAgICAgICAgICAgICAgICBpZighdGFyZ2V0LnVuc2xpY2tlZCkge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQuc2xpZGVIYW5kbGVyKGluZGV4LCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hcHBseVRyYW5zaXRpb24gPSBmdW5jdGlvbihzbGlkZSkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIHRyYW5zaXRpb24gPSB7fTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB0cmFuc2l0aW9uW18udHJhbnNpdGlvblR5cGVdID0gXy50cmFuc2Zvcm1UeXBlICsgJyAnICsgXy5vcHRpb25zLnNwZWVkICsgJ21zICcgKyBfLm9wdGlvbnMuY3NzRWFzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRyYW5zaXRpb25bXy50cmFuc2l0aW9uVHlwZV0gPSAnb3BhY2l0eSAnICsgXy5vcHRpb25zLnNwZWVkICsgJ21zICcgKyBfLm9wdGlvbnMuY3NzRWFzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKHRyYW5zaXRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy4kc2xpZGVzLmVxKHNsaWRlKS5jc3ModHJhbnNpdGlvbik7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYXV0b1BsYXkgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5hdXRvUGxheUNsZWFyKCk7XG5cbiAgICAgICAgaWYgKCBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICkge1xuICAgICAgICAgICAgXy5hdXRvUGxheVRpbWVyID0gc2V0SW50ZXJ2YWwoIF8uYXV0b1BsYXlJdGVyYXRvciwgXy5vcHRpb25zLmF1dG9wbGF5U3BlZWQgKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hdXRvUGxheUNsZWFyID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLmF1dG9QbGF5VGltZXIpIHtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoXy5hdXRvUGxheVRpbWVyKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5hdXRvUGxheUl0ZXJhdG9yID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgc2xpZGVUbyA9IF8uY3VycmVudFNsaWRlICsgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuXG4gICAgICAgIGlmICggIV8ucGF1c2VkICYmICFfLmludGVycnVwdGVkICYmICFfLmZvY3Vzc2VkICkge1xuXG4gICAgICAgICAgICBpZiAoIF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gZmFsc2UgKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoIF8uZGlyZWN0aW9uID09PSAxICYmICggXy5jdXJyZW50U2xpZGUgKyAxICkgPT09ICggXy5zbGlkZUNvdW50IC0gMSApKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uZGlyZWN0aW9uID0gMDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBlbHNlIGlmICggXy5kaXJlY3Rpb24gPT09IDAgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgc2xpZGVUbyA9IF8uY3VycmVudFNsaWRlIC0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICggXy5jdXJyZW50U2xpZGUgLSAxID09PSAwICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5kaXJlY3Rpb24gPSAxO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoIHNsaWRlVG8gKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmJ1aWxkQXJyb3dzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYXJyb3dzID09PSB0cnVlICkge1xuXG4gICAgICAgICAgICBfLiRwcmV2QXJyb3cgPSAkKF8ub3B0aW9ucy5wcmV2QXJyb3cpLmFkZENsYXNzKCdzbGljay1hcnJvdycpO1xuICAgICAgICAgICAgXy4kbmV4dEFycm93ID0gJChfLm9wdGlvbnMubmV4dEFycm93KS5hZGRDbGFzcygnc2xpY2stYXJyb3cnKTtcblxuICAgICAgICAgICAgaWYoIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKSB7XG5cbiAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cucmVtb3ZlQ2xhc3MoJ3NsaWNrLWhpZGRlbicpLnJlbW92ZUF0dHIoJ2FyaWEtaGlkZGVuIHRhYmluZGV4Jyk7XG4gICAgICAgICAgICAgICAgXy4kbmV4dEFycm93LnJlbW92ZUNsYXNzKCdzbGljay1oaWRkZW4nKS5yZW1vdmVBdHRyKCdhcmlhLWhpZGRlbiB0YWJpbmRleCcpO1xuXG4gICAgICAgICAgICAgICAgaWYgKF8uaHRtbEV4cHIudGVzdChfLm9wdGlvbnMucHJldkFycm93KSkge1xuICAgICAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cucHJlcGVuZFRvKF8ub3B0aW9ucy5hcHBlbmRBcnJvd3MpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChfLmh0bWxFeHByLnRlc3QoXy5vcHRpb25zLm5leHRBcnJvdykpIHtcbiAgICAgICAgICAgICAgICAgICAgXy4kbmV4dEFycm93LmFwcGVuZFRvKF8ub3B0aW9ucy5hcHBlbmRBcnJvd3MpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgXy4kcHJldkFycm93XG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ3RydWUnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cuYWRkKCBfLiRuZXh0QXJyb3cgKVxuXG4gICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2staGlkZGVuJylcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2FyaWEtZGlzYWJsZWQnOiAndHJ1ZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAndGFiaW5kZXgnOiAnLTEnXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5idWlsZERvdHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBpLCBkb3Q7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5kb3RzID09PSB0cnVlKSB7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlci5hZGRDbGFzcygnc2xpY2stZG90dGVkJyk7XG5cbiAgICAgICAgICAgIGRvdCA9ICQoJzx1bCAvPicpLmFkZENsYXNzKF8ub3B0aW9ucy5kb3RzQ2xhc3MpO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDw9IF8uZ2V0RG90Q291bnQoKTsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgZG90LmFwcGVuZCgkKCc8bGkgLz4nKS5hcHBlbmQoXy5vcHRpb25zLmN1c3RvbVBhZ2luZy5jYWxsKHRoaXMsIF8sIGkpKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF8uJGRvdHMgPSBkb3QuYXBwZW5kVG8oXy5vcHRpb25zLmFwcGVuZERvdHMpO1xuXG4gICAgICAgICAgICBfLiRkb3RzLmZpbmQoJ2xpJykuZmlyc3QoKS5hZGRDbGFzcygnc2xpY2stYWN0aXZlJyk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5idWlsZE91dCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLiRzbGlkZXMgPVxuICAgICAgICAgICAgXy4kc2xpZGVyXG4gICAgICAgICAgICAgICAgLmNoaWxkcmVuKCBfLm9wdGlvbnMuc2xpZGUgKyAnOm5vdCguc2xpY2stY2xvbmVkKScpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1zbGlkZScpO1xuXG4gICAgICAgIF8uc2xpZGVDb3VudCA9IF8uJHNsaWRlcy5sZW5ndGg7XG5cbiAgICAgICAgXy4kc2xpZGVzLmVhY2goZnVuY3Rpb24oaW5kZXgsIGVsZW1lbnQpIHtcbiAgICAgICAgICAgICQoZWxlbWVudClcbiAgICAgICAgICAgICAgICAuYXR0cignZGF0YS1zbGljay1pbmRleCcsIGluZGV4KVxuICAgICAgICAgICAgICAgIC5kYXRhKCdvcmlnaW5hbFN0eWxpbmcnLCAkKGVsZW1lbnQpLmF0dHIoJ3N0eWxlJykgfHwgJycpO1xuICAgICAgICB9KTtcblxuICAgICAgICBfLiRzbGlkZXIuYWRkQ2xhc3MoJ3NsaWNrLXNsaWRlcicpO1xuXG4gICAgICAgIF8uJHNsaWRlVHJhY2sgPSAoXy5zbGlkZUNvdW50ID09PSAwKSA/XG4gICAgICAgICAgICAkKCc8ZGl2IGNsYXNzPVwic2xpY2stdHJhY2tcIi8+JykuYXBwZW5kVG8oXy4kc2xpZGVyKSA6XG4gICAgICAgICAgICBfLiRzbGlkZXMud3JhcEFsbCgnPGRpdiBjbGFzcz1cInNsaWNrLXRyYWNrXCIvPicpLnBhcmVudCgpO1xuXG4gICAgICAgIF8uJGxpc3QgPSBfLiRzbGlkZVRyYWNrLndyYXAoXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNsaWNrLWxpc3RcIi8+JykucGFyZW50KCk7XG4gICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKCdvcGFjaXR5JywgMCk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlIHx8IF8ub3B0aW9ucy5zd2lwZVRvU2xpZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA9IDE7XG4gICAgICAgIH1cblxuICAgICAgICAkKCdpbWdbZGF0YS1sYXp5XScsIF8uJHNsaWRlcikubm90KCdbc3JjXScpLmFkZENsYXNzKCdzbGljay1sb2FkaW5nJyk7XG5cbiAgICAgICAgXy5zZXR1cEluZmluaXRlKCk7XG5cbiAgICAgICAgXy5idWlsZEFycm93cygpO1xuXG4gICAgICAgIF8uYnVpbGREb3RzKCk7XG5cbiAgICAgICAgXy51cGRhdGVEb3RzKCk7XG5cblxuICAgICAgICBfLnNldFNsaWRlQ2xhc3Nlcyh0eXBlb2YgXy5jdXJyZW50U2xpZGUgPT09ICdudW1iZXInID8gXy5jdXJyZW50U2xpZGUgOiAwKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmRyYWdnYWJsZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy4kbGlzdC5hZGRDbGFzcygnZHJhZ2dhYmxlJyk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuYnVpbGRSb3dzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLCBhLCBiLCBjLCBuZXdTbGlkZXMsIG51bU9mU2xpZGVzLCBvcmlnaW5hbFNsaWRlcyxzbGlkZXNQZXJTZWN0aW9uO1xuXG4gICAgICAgIG5ld1NsaWRlcyA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgICAgICAgb3JpZ2luYWxTbGlkZXMgPSBfLiRzbGlkZXIuY2hpbGRyZW4oKTtcblxuICAgICAgICBpZihfLm9wdGlvbnMucm93cyA+IDEpIHtcblxuICAgICAgICAgICAgc2xpZGVzUGVyU2VjdGlvbiA9IF8ub3B0aW9ucy5zbGlkZXNQZXJSb3cgKiBfLm9wdGlvbnMucm93cztcbiAgICAgICAgICAgIG51bU9mU2xpZGVzID0gTWF0aC5jZWlsKFxuICAgICAgICAgICAgICAgIG9yaWdpbmFsU2xpZGVzLmxlbmd0aCAvIHNsaWRlc1BlclNlY3Rpb25cbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGZvcihhID0gMDsgYSA8IG51bU9mU2xpZGVzOyBhKyspe1xuICAgICAgICAgICAgICAgIHZhciBzbGlkZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgIGZvcihiID0gMDsgYiA8IF8ub3B0aW9ucy5yb3dzOyBiKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICAgICAgICAgICAgICBmb3IoYyA9IDA7IGMgPCBfLm9wdGlvbnMuc2xpZGVzUGVyUm93OyBjKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSAoYSAqIHNsaWRlc1BlclNlY3Rpb24gKyAoKGIgKiBfLm9wdGlvbnMuc2xpZGVzUGVyUm93KSArIGMpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcmlnaW5hbFNsaWRlcy5nZXQodGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdy5hcHBlbmRDaGlsZChvcmlnaW5hbFNsaWRlcy5nZXQodGFyZ2V0KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc2xpZGUuYXBwZW5kQ2hpbGQocm93KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbmV3U2xpZGVzLmFwcGVuZENoaWxkKHNsaWRlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgXy4kc2xpZGVyLmVtcHR5KCkuYXBwZW5kKG5ld1NsaWRlcyk7XG4gICAgICAgICAgICBfLiRzbGlkZXIuY2hpbGRyZW4oKS5jaGlsZHJlbigpLmNoaWxkcmVuKClcbiAgICAgICAgICAgICAgICAuY3NzKHtcbiAgICAgICAgICAgICAgICAgICAgJ3dpZHRoJzooMTAwIC8gXy5vcHRpb25zLnNsaWRlc1BlclJvdykgKyAnJScsXG4gICAgICAgICAgICAgICAgICAgICdkaXNwbGF5JzogJ2lubGluZS1ibG9jaydcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmNoZWNrUmVzcG9uc2l2ZSA9IGZ1bmN0aW9uKGluaXRpYWwsIGZvcmNlVXBkYXRlKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgYnJlYWtwb2ludCwgdGFyZ2V0QnJlYWtwb2ludCwgcmVzcG9uZFRvV2lkdGgsIHRyaWdnZXJCcmVha3BvaW50ID0gZmFsc2U7XG4gICAgICAgIHZhciBzbGlkZXJXaWR0aCA9IF8uJHNsaWRlci53aWR0aCgpO1xuICAgICAgICB2YXIgd2luZG93V2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aCB8fCAkKHdpbmRvdykud2lkdGgoKTtcblxuICAgICAgICBpZiAoXy5yZXNwb25kVG8gPT09ICd3aW5kb3cnKSB7XG4gICAgICAgICAgICByZXNwb25kVG9XaWR0aCA9IHdpbmRvd1dpZHRoO1xuICAgICAgICB9IGVsc2UgaWYgKF8ucmVzcG9uZFRvID09PSAnc2xpZGVyJykge1xuICAgICAgICAgICAgcmVzcG9uZFRvV2lkdGggPSBzbGlkZXJXaWR0aDtcbiAgICAgICAgfSBlbHNlIGlmIChfLnJlc3BvbmRUbyA9PT0gJ21pbicpIHtcbiAgICAgICAgICAgIHJlc3BvbmRUb1dpZHRoID0gTWF0aC5taW4od2luZG93V2lkdGgsIHNsaWRlcldpZHRoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggXy5vcHRpb25zLnJlc3BvbnNpdmUgJiZcbiAgICAgICAgICAgIF8ub3B0aW9ucy5yZXNwb25zaXZlLmxlbmd0aCAmJlxuICAgICAgICAgICAgXy5vcHRpb25zLnJlc3BvbnNpdmUgIT09IG51bGwpIHtcblxuICAgICAgICAgICAgdGFyZ2V0QnJlYWtwb2ludCA9IG51bGw7XG5cbiAgICAgICAgICAgIGZvciAoYnJlYWtwb2ludCBpbiBfLmJyZWFrcG9pbnRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKF8uYnJlYWtwb2ludHMuaGFzT3duUHJvcGVydHkoYnJlYWtwb2ludCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF8ub3JpZ2luYWxTZXR0aW5ncy5tb2JpbGVGaXJzdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25kVG9XaWR0aCA8IF8uYnJlYWtwb2ludHNbYnJlYWtwb2ludF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRCcmVha3BvaW50ID0gXy5icmVha3BvaW50c1ticmVha3BvaW50XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25kVG9XaWR0aCA+IF8uYnJlYWtwb2ludHNbYnJlYWtwb2ludF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRCcmVha3BvaW50ID0gXy5icmVha3BvaW50c1ticmVha3BvaW50XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRhcmdldEJyZWFrcG9pbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoXy5hY3RpdmVCcmVha3BvaW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRCcmVha3BvaW50ICE9PSBfLmFjdGl2ZUJyZWFrcG9pbnQgfHwgZm9yY2VVcGRhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8uYWN0aXZlQnJlYWtwb2ludCA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0QnJlYWtwb2ludDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfLmJyZWFrcG9pbnRTZXR0aW5nc1t0YXJnZXRCcmVha3BvaW50XSA9PT0gJ3Vuc2xpY2snKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy51bnNsaWNrKHRhcmdldEJyZWFrcG9pbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgXy5vcmlnaW5hbFNldHRpbmdzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmJyZWFrcG9pbnRTZXR0aW5nc1tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEJyZWFrcG9pbnRdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5pdGlhbCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IF8ub3B0aW9ucy5pbml0aWFsU2xpZGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8ucmVmcmVzaChpbml0aWFsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRyaWdnZXJCcmVha3BvaW50ID0gdGFyZ2V0QnJlYWtwb2ludDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF8uYWN0aXZlQnJlYWtwb2ludCA9IHRhcmdldEJyZWFrcG9pbnQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfLmJyZWFrcG9pbnRTZXR0aW5nc1t0YXJnZXRCcmVha3BvaW50XSA9PT0gJ3Vuc2xpY2snKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLnVuc2xpY2sodGFyZ2V0QnJlYWtwb2ludCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLm9wdGlvbnMgPSAkLmV4dGVuZCh7fSwgXy5vcmlnaW5hbFNldHRpbmdzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uYnJlYWtwb2ludFNldHRpbmdzW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRCcmVha3BvaW50XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5pdGlhbCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uY3VycmVudFNsaWRlID0gXy5vcHRpb25zLmluaXRpYWxTbGlkZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIF8ucmVmcmVzaChpbml0aWFsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0cmlnZ2VyQnJlYWtwb2ludCA9IHRhcmdldEJyZWFrcG9pbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoXy5hY3RpdmVCcmVha3BvaW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uYWN0aXZlQnJlYWtwb2ludCA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucyA9IF8ub3JpZ2luYWxTZXR0aW5ncztcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluaXRpYWwgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8uY3VycmVudFNsaWRlID0gXy5vcHRpb25zLmluaXRpYWxTbGlkZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBfLnJlZnJlc2goaW5pdGlhbCk7XG4gICAgICAgICAgICAgICAgICAgIHRyaWdnZXJCcmVha3BvaW50ID0gdGFyZ2V0QnJlYWtwb2ludDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIG9ubHkgdHJpZ2dlciBicmVha3BvaW50cyBkdXJpbmcgYW4gYWN0dWFsIGJyZWFrLiBub3Qgb24gaW5pdGlhbGl6ZS5cbiAgICAgICAgICAgIGlmKCAhaW5pdGlhbCAmJiB0cmlnZ2VyQnJlYWtwb2ludCAhPT0gZmFsc2UgKSB7XG4gICAgICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2JyZWFrcG9pbnQnLCBbXywgdHJpZ2dlckJyZWFrcG9pbnRdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5jaGFuZ2VTbGlkZSA9IGZ1bmN0aW9uKGV2ZW50LCBkb250QW5pbWF0ZSkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgICR0YXJnZXQgPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLFxuICAgICAgICAgICAgaW5kZXhPZmZzZXQsIHNsaWRlT2Zmc2V0LCB1bmV2ZW5PZmZzZXQ7XG5cbiAgICAgICAgLy8gSWYgdGFyZ2V0IGlzIGEgbGluaywgcHJldmVudCBkZWZhdWx0IGFjdGlvbi5cbiAgICAgICAgaWYoJHRhcmdldC5pcygnYScpKSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgdGFyZ2V0IGlzIG5vdCB0aGUgPGxpPiBlbGVtZW50IChpZTogYSBjaGlsZCksIGZpbmQgdGhlIDxsaT4uXG4gICAgICAgIGlmKCEkdGFyZ2V0LmlzKCdsaScpKSB7XG4gICAgICAgICAgICAkdGFyZ2V0ID0gJHRhcmdldC5jbG9zZXN0KCdsaScpO1xuICAgICAgICB9XG5cbiAgICAgICAgdW5ldmVuT2Zmc2V0ID0gKF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCAhPT0gMCk7XG4gICAgICAgIGluZGV4T2Zmc2V0ID0gdW5ldmVuT2Zmc2V0ID8gMCA6IChfLnNsaWRlQ291bnQgLSBfLmN1cnJlbnRTbGlkZSkgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG5cbiAgICAgICAgc3dpdGNoIChldmVudC5kYXRhLm1lc3NhZ2UpIHtcblxuICAgICAgICAgICAgY2FzZSAncHJldmlvdXMnOlxuICAgICAgICAgICAgICAgIHNsaWRlT2Zmc2V0ID0gaW5kZXhPZmZzZXQgPT09IDAgPyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgOiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC0gaW5kZXhPZmZzZXQ7XG4gICAgICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoXy5jdXJyZW50U2xpZGUgLSBzbGlkZU9mZnNldCwgZmFsc2UsIGRvbnRBbmltYXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ25leHQnOlxuICAgICAgICAgICAgICAgIHNsaWRlT2Zmc2V0ID0gaW5kZXhPZmZzZXQgPT09IDAgPyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgOiBpbmRleE9mZnNldDtcbiAgICAgICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgICAgICAgICBfLnNsaWRlSGFuZGxlcihfLmN1cnJlbnRTbGlkZSArIHNsaWRlT2Zmc2V0LCBmYWxzZSwgZG9udEFuaW1hdGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAnaW5kZXgnOlxuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IGV2ZW50LmRhdGEuaW5kZXggPT09IDAgPyAwIDpcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQuZGF0YS5pbmRleCB8fCAkdGFyZ2V0LmluZGV4KCkgKiBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG5cbiAgICAgICAgICAgICAgICBfLnNsaWRlSGFuZGxlcihfLmNoZWNrTmF2aWdhYmxlKGluZGV4KSwgZmFsc2UsIGRvbnRBbmltYXRlKTtcbiAgICAgICAgICAgICAgICAkdGFyZ2V0LmNoaWxkcmVuKCkudHJpZ2dlcignZm9jdXMnKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuY2hlY2tOYXZpZ2FibGUgPSBmdW5jdGlvbihpbmRleCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIG5hdmlnYWJsZXMsIHByZXZOYXZpZ2FibGU7XG5cbiAgICAgICAgbmF2aWdhYmxlcyA9IF8uZ2V0TmF2aWdhYmxlSW5kZXhlcygpO1xuICAgICAgICBwcmV2TmF2aWdhYmxlID0gMDtcbiAgICAgICAgaWYgKGluZGV4ID4gbmF2aWdhYmxlc1tuYXZpZ2FibGVzLmxlbmd0aCAtIDFdKSB7XG4gICAgICAgICAgICBpbmRleCA9IG5hdmlnYWJsZXNbbmF2aWdhYmxlcy5sZW5ndGggLSAxXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvciAodmFyIG4gaW4gbmF2aWdhYmxlcykge1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCA8IG5hdmlnYWJsZXNbbl0pIHtcbiAgICAgICAgICAgICAgICAgICAgaW5kZXggPSBwcmV2TmF2aWdhYmxlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcHJldk5hdmlnYWJsZSA9IG5hdmlnYWJsZXNbbl07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5jbGVhblVwRXZlbnRzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZG90cyAmJiBfLiRkb3RzICE9PSBudWxsKSB7XG5cbiAgICAgICAgICAgICQoJ2xpJywgXy4kZG90cylcbiAgICAgICAgICAgICAgICAub2ZmKCdjbGljay5zbGljaycsIF8uY2hhbmdlU2xpZGUpXG4gICAgICAgICAgICAgICAgLm9mZignbW91c2VlbnRlci5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIHRydWUpKVxuICAgICAgICAgICAgICAgIC5vZmYoJ21vdXNlbGVhdmUuc2xpY2snLCAkLnByb3h5KF8uaW50ZXJydXB0LCBfLCBmYWxzZSkpO1xuXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLiRkb3RzLm9mZigna2V5ZG93bi5zbGljaycsIF8ua2V5SGFuZGxlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBfLiRzbGlkZXIub2ZmKCdmb2N1cy5zbGljayBibHVyLnNsaWNrJyk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5hcnJvd3MgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgXy4kcHJldkFycm93ICYmIF8uJHByZXZBcnJvdy5vZmYoJ2NsaWNrLnNsaWNrJywgXy5jaGFuZ2VTbGlkZSk7XG4gICAgICAgICAgICBfLiRuZXh0QXJyb3cgJiYgXy4kbmV4dEFycm93Lm9mZignY2xpY2suc2xpY2snLCBfLmNoYW5nZVNsaWRlKTtcblxuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgXy4kcHJldkFycm93ICYmIF8uJHByZXZBcnJvdy5vZmYoJ2tleWRvd24uc2xpY2snLCBfLmtleUhhbmRsZXIpO1xuICAgICAgICAgICAgICAgIF8uJG5leHRBcnJvdyAmJiBfLiRuZXh0QXJyb3cub2ZmKCdrZXlkb3duLnNsaWNrJywgXy5rZXlIYW5kbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIF8uJGxpc3Qub2ZmKCd0b3VjaHN0YXJ0LnNsaWNrIG1vdXNlZG93bi5zbGljaycsIF8uc3dpcGVIYW5kbGVyKTtcbiAgICAgICAgXy4kbGlzdC5vZmYoJ3RvdWNobW92ZS5zbGljayBtb3VzZW1vdmUuc2xpY2snLCBfLnN3aXBlSGFuZGxlcik7XG4gICAgICAgIF8uJGxpc3Qub2ZmKCd0b3VjaGVuZC5zbGljayBtb3VzZXVwLnNsaWNrJywgXy5zd2lwZUhhbmRsZXIpO1xuICAgICAgICBfLiRsaXN0Lm9mZigndG91Y2hjYW5jZWwuc2xpY2sgbW91c2VsZWF2ZS5zbGljaycsIF8uc3dpcGVIYW5kbGVyKTtcblxuICAgICAgICBfLiRsaXN0Lm9mZignY2xpY2suc2xpY2snLCBfLmNsaWNrSGFuZGxlcik7XG5cbiAgICAgICAgJChkb2N1bWVudCkub2ZmKF8udmlzaWJpbGl0eUNoYW5nZSwgXy52aXNpYmlsaXR5KTtcblxuICAgICAgICBfLmNsZWFuVXBTbGlkZUV2ZW50cygpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy4kbGlzdC5vZmYoJ2tleWRvd24uc2xpY2snLCBfLmtleUhhbmRsZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mb2N1c09uU2VsZWN0ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAkKF8uJHNsaWRlVHJhY2spLmNoaWxkcmVuKCkub2ZmKCdjbGljay5zbGljaycsIF8uc2VsZWN0SGFuZGxlcik7XG4gICAgICAgIH1cblxuICAgICAgICAkKHdpbmRvdykub2ZmKCdvcmllbnRhdGlvbmNoYW5nZS5zbGljay5zbGljay0nICsgXy5pbnN0YW5jZVVpZCwgXy5vcmllbnRhdGlvbkNoYW5nZSk7XG5cbiAgICAgICAgJCh3aW5kb3cpLm9mZigncmVzaXplLnNsaWNrLnNsaWNrLScgKyBfLmluc3RhbmNlVWlkLCBfLnJlc2l6ZSk7XG5cbiAgICAgICAgJCgnW2RyYWdnYWJsZSE9dHJ1ZV0nLCBfLiRzbGlkZVRyYWNrKS5vZmYoJ2RyYWdzdGFydCcsIF8ucHJldmVudERlZmF1bHQpO1xuXG4gICAgICAgICQod2luZG93KS5vZmYoJ2xvYWQuc2xpY2suc2xpY2stJyArIF8uaW5zdGFuY2VVaWQsIF8uc2V0UG9zaXRpb24pO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5jbGVhblVwU2xpZGVFdmVudHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy4kbGlzdC5vZmYoJ21vdXNlZW50ZXIuc2xpY2snLCAkLnByb3h5KF8uaW50ZXJydXB0LCBfLCB0cnVlKSk7XG4gICAgICAgIF8uJGxpc3Qub2ZmKCdtb3VzZWxlYXZlLnNsaWNrJywgJC5wcm94eShfLmludGVycnVwdCwgXywgZmFsc2UpKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuY2xlYW5VcFJvd3MgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsIG9yaWdpbmFsU2xpZGVzO1xuXG4gICAgICAgIGlmKF8ub3B0aW9ucy5yb3dzID4gMSkge1xuICAgICAgICAgICAgb3JpZ2luYWxTbGlkZXMgPSBfLiRzbGlkZXMuY2hpbGRyZW4oKS5jaGlsZHJlbigpO1xuICAgICAgICAgICAgb3JpZ2luYWxTbGlkZXMucmVtb3ZlQXR0cignc3R5bGUnKTtcbiAgICAgICAgICAgIF8uJHNsaWRlci5lbXB0eSgpLmFwcGVuZChvcmlnaW5hbFNsaWRlcyk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuY2xpY2tIYW5kbGVyID0gZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8uc2hvdWxkQ2xpY2sgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24ocmVmcmVzaCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmF1dG9QbGF5Q2xlYXIoKTtcblxuICAgICAgICBfLnRvdWNoT2JqZWN0ID0ge307XG5cbiAgICAgICAgXy5jbGVhblVwRXZlbnRzKCk7XG5cbiAgICAgICAgJCgnLnNsaWNrLWNsb25lZCcsIF8uJHNsaWRlcikuZGV0YWNoKCk7XG5cbiAgICAgICAgaWYgKF8uJGRvdHMpIHtcbiAgICAgICAgICAgIF8uJGRvdHMucmVtb3ZlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIF8uJHByZXZBcnJvdyAmJiBfLiRwcmV2QXJyb3cubGVuZ3RoICkge1xuXG4gICAgICAgICAgICBfLiRwcmV2QXJyb3dcbiAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRpc2FibGVkIHNsaWNrLWFycm93IHNsaWNrLWhpZGRlbicpXG4gICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2FyaWEtaGlkZGVuIGFyaWEtZGlzYWJsZWQgdGFiaW5kZXgnKVxuICAgICAgICAgICAgICAgIC5jc3MoJ2Rpc3BsYXknLCcnKTtcblxuICAgICAgICAgICAgaWYgKCBfLmh0bWxFeHByLnRlc3QoIF8ub3B0aW9ucy5wcmV2QXJyb3cgKSkge1xuICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5yZW1vdmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggXy4kbmV4dEFycm93ICYmIF8uJG5leHRBcnJvdy5sZW5ndGggKSB7XG5cbiAgICAgICAgICAgIF8uJG5leHRBcnJvd1xuICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2xpY2stZGlzYWJsZWQgc2xpY2stYXJyb3cgc2xpY2staGlkZGVuJylcbiAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignYXJpYS1oaWRkZW4gYXJpYS1kaXNhYmxlZCB0YWJpbmRleCcpXG4gICAgICAgICAgICAgICAgLmNzcygnZGlzcGxheScsJycpO1xuXG4gICAgICAgICAgICBpZiAoIF8uaHRtbEV4cHIudGVzdCggXy5vcHRpb25zLm5leHRBcnJvdyApKSB7XG4gICAgICAgICAgICAgICAgXy4kbmV4dEFycm93LnJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cblxuICAgICAgICBpZiAoXy4kc2xpZGVzKSB7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlc1xuICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2xpY2stc2xpZGUgc2xpY2stYWN0aXZlIHNsaWNrLWNlbnRlciBzbGljay12aXNpYmxlIHNsaWNrLWN1cnJlbnQnKVxuICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdhcmlhLWhpZGRlbicpXG4gICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoJ2RhdGEtc2xpY2staW5kZXgnKVxuICAgICAgICAgICAgICAgIC5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICQodGhpcykuYXR0cignc3R5bGUnLCAkKHRoaXMpLmRhdGEoJ29yaWdpbmFsU3R5bGluZycpKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmRldGFjaCgpO1xuXG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmRldGFjaCgpO1xuXG4gICAgICAgICAgICBfLiRsaXN0LmRldGFjaCgpO1xuXG4gICAgICAgICAgICBfLiRzbGlkZXIuYXBwZW5kKF8uJHNsaWRlcyk7XG4gICAgICAgIH1cblxuICAgICAgICBfLmNsZWFuVXBSb3dzKCk7XG5cbiAgICAgICAgXy4kc2xpZGVyLnJlbW92ZUNsYXNzKCdzbGljay1zbGlkZXInKTtcbiAgICAgICAgXy4kc2xpZGVyLnJlbW92ZUNsYXNzKCdzbGljay1pbml0aWFsaXplZCcpO1xuICAgICAgICBfLiRzbGlkZXIucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRvdHRlZCcpO1xuXG4gICAgICAgIF8udW5zbGlja2VkID0gdHJ1ZTtcblxuICAgICAgICBpZighcmVmcmVzaCkge1xuICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2Rlc3Ryb3knLCBbX10pO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmRpc2FibGVUcmFuc2l0aW9uID0gZnVuY3Rpb24oc2xpZGUpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICB0cmFuc2l0aW9uID0ge307XG5cbiAgICAgICAgdHJhbnNpdGlvbltfLnRyYW5zaXRpb25UeXBlXSA9ICcnO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKHRyYW5zaXRpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy4kc2xpZGVzLmVxKHNsaWRlKS5jc3ModHJhbnNpdGlvbik7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZmFkZVNsaWRlID0gZnVuY3Rpb24oc2xpZGVJbmRleCwgY2FsbGJhY2spIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKF8uY3NzVHJhbnNpdGlvbnMgPT09IGZhbHNlKSB7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShzbGlkZUluZGV4KS5jc3Moe1xuICAgICAgICAgICAgICAgIHpJbmRleDogXy5vcHRpb25zLnpJbmRleFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlcy5lcShzbGlkZUluZGV4KS5hbmltYXRlKHtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAxXG4gICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQsIF8ub3B0aW9ucy5lYXNpbmcsIGNhbGxiYWNrKTtcblxuICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICBfLmFwcGx5VHJhbnNpdGlvbihzbGlkZUluZGV4KTtcblxuICAgICAgICAgICAgXy4kc2xpZGVzLmVxKHNsaWRlSW5kZXgpLmNzcyh7XG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgICAgICAgICB6SW5kZXg6IF8ub3B0aW9ucy56SW5kZXhcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgIF8uZGlzYWJsZVRyYW5zaXRpb24oc2xpZGVJbmRleCk7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbCgpO1xuICAgICAgICAgICAgICAgIH0sIF8ub3B0aW9ucy5zcGVlZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5mYWRlU2xpZGVPdXQgPSBmdW5jdGlvbihzbGlkZUluZGV4KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLmNzc1RyYW5zaXRpb25zID09PSBmYWxzZSkge1xuXG4gICAgICAgICAgICBfLiRzbGlkZXMuZXEoc2xpZGVJbmRleCkuYW5pbWF0ZSh7XG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMCxcbiAgICAgICAgICAgICAgICB6SW5kZXg6IF8ub3B0aW9ucy56SW5kZXggLSAyXG4gICAgICAgICAgICB9LCBfLm9wdGlvbnMuc3BlZWQsIF8ub3B0aW9ucy5lYXNpbmcpO1xuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIF8uYXBwbHlUcmFuc2l0aW9uKHNsaWRlSW5kZXgpO1xuXG4gICAgICAgICAgICBfLiRzbGlkZXMuZXEoc2xpZGVJbmRleCkuY3NzKHtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLFxuICAgICAgICAgICAgICAgIHpJbmRleDogXy5vcHRpb25zLnpJbmRleCAtIDJcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZmlsdGVyU2xpZGVzID0gU2xpY2sucHJvdG90eXBlLnNsaWNrRmlsdGVyID0gZnVuY3Rpb24oZmlsdGVyKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChmaWx0ZXIgIT09IG51bGwpIHtcblxuICAgICAgICAgICAgXy4kc2xpZGVzQ2FjaGUgPSBfLiRzbGlkZXM7XG5cbiAgICAgICAgICAgIF8udW5sb2FkKCk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5kZXRhY2goKTtcblxuICAgICAgICAgICAgXy4kc2xpZGVzQ2FjaGUuZmlsdGVyKGZpbHRlcikuYXBwZW5kVG8oXy4kc2xpZGVUcmFjayk7XG5cbiAgICAgICAgICAgIF8ucmVpbml0KCk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5mb2N1c0hhbmRsZXIgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy4kc2xpZGVyXG4gICAgICAgICAgICAub2ZmKCdmb2N1cy5zbGljayBibHVyLnNsaWNrJylcbiAgICAgICAgICAgIC5vbignZm9jdXMuc2xpY2sgYmx1ci5zbGljaycsICcqJywgZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgICAgICAgICAgZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICB2YXIgJHNmID0gJCh0aGlzKTtcblxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgIGlmKCBfLm9wdGlvbnMucGF1c2VPbkZvY3VzICkge1xuICAgICAgICAgICAgICAgICAgICBfLmZvY3Vzc2VkID0gJHNmLmlzKCc6Zm9jdXMnKTtcbiAgICAgICAgICAgICAgICAgICAgXy5hdXRvUGxheSgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfSwgMCk7XG5cbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nZXRDdXJyZW50ID0gU2xpY2sucHJvdG90eXBlLnNsaWNrQ3VycmVudFNsaWRlID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuICAgICAgICByZXR1cm4gXy5jdXJyZW50U2xpZGU7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmdldERvdENvdW50ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIHZhciBicmVha1BvaW50ID0gMDtcbiAgICAgICAgdmFyIGNvdW50ZXIgPSAwO1xuICAgICAgICB2YXIgcGFnZXJRdHkgPSAwO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgICAgICArK3BhZ2VyUXR5O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB3aGlsZSAoYnJlYWtQb2ludCA8IF8uc2xpZGVDb3VudCkge1xuICAgICAgICAgICAgICAgICAgICArK3BhZ2VyUXR5O1xuICAgICAgICAgICAgICAgICAgICBicmVha1BvaW50ID0gY291bnRlciArIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtcbiAgICAgICAgICAgICAgICAgICAgY291bnRlciArPSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA/IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA6IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3c7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBwYWdlclF0eSA9IF8uc2xpZGVDb3VudDtcbiAgICAgICAgfSBlbHNlIGlmKCFfLm9wdGlvbnMuYXNOYXZGb3IpIHtcbiAgICAgICAgICAgIHBhZ2VyUXR5ID0gMSArIE1hdGguY2VpbCgoXy5zbGlkZUNvdW50IC0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykgLyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpO1xuICAgICAgICB9ZWxzZSB7XG4gICAgICAgICAgICB3aGlsZSAoYnJlYWtQb2ludCA8IF8uc2xpZGVDb3VudCkge1xuICAgICAgICAgICAgICAgICsrcGFnZXJRdHk7XG4gICAgICAgICAgICAgICAgYnJlYWtQb2ludCA9IGNvdW50ZXIgKyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG4gICAgICAgICAgICAgICAgY291bnRlciArPSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA/IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA6IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3c7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcGFnZXJRdHkgLSAxO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5nZXRMZWZ0ID0gZnVuY3Rpb24oc2xpZGVJbmRleCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIHRhcmdldExlZnQsXG4gICAgICAgICAgICB2ZXJ0aWNhbEhlaWdodCxcbiAgICAgICAgICAgIHZlcnRpY2FsT2Zmc2V0ID0gMCxcbiAgICAgICAgICAgIHRhcmdldFNsaWRlLFxuICAgICAgICAgICAgY29lZjtcblxuICAgICAgICBfLnNsaWRlT2Zmc2V0ID0gMDtcbiAgICAgICAgdmVydGljYWxIZWlnaHQgPSBfLiRzbGlkZXMuZmlyc3QoKS5vdXRlckhlaWdodCh0cnVlKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgPSAoXy5zbGlkZVdpZHRoICogXy5vcHRpb25zLnNsaWRlc1RvU2hvdykgKiAtMTtcbiAgICAgICAgICAgICAgICBjb2VmID0gLTFcblxuICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWwgPT09IHRydWUgJiYgXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZWYgPSAtMS41O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZWYgPSAtMlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZlcnRpY2FsT2Zmc2V0ID0gKHZlcnRpY2FsSGVpZ2h0ICogXy5vcHRpb25zLnNsaWRlc1RvU2hvdykgKiBjb2VmO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGlmIChzbGlkZUluZGV4ICsgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsID4gXy5zbGlkZUNvdW50ICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNsaWRlSW5kZXggPiBfLnNsaWRlQ291bnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgPSAoKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLSAoc2xpZGVJbmRleCAtIF8uc2xpZGVDb3VudCkpICogXy5zbGlkZVdpZHRoKSAqIC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmVydGljYWxPZmZzZXQgPSAoKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLSAoc2xpZGVJbmRleCAtIF8uc2xpZGVDb3VudCkpICogdmVydGljYWxIZWlnaHQpICogLTE7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLnNsaWRlT2Zmc2V0ID0gKChfLnNsaWRlQ291bnQgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpICogXy5zbGlkZVdpZHRoKSAqIC0xO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmVydGljYWxPZmZzZXQgPSAoKF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCkgKiB2ZXJ0aWNhbEhlaWdodCkgKiAtMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChzbGlkZUluZGV4ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA+IF8uc2xpZGVDb3VudCkge1xuICAgICAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgPSAoKHNsaWRlSW5kZXggKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSAtIF8uc2xpZGVDb3VudCkgKiBfLnNsaWRlV2lkdGg7XG4gICAgICAgICAgICAgICAgdmVydGljYWxPZmZzZXQgPSAoKHNsaWRlSW5kZXggKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSAtIF8uc2xpZGVDb3VudCkgKiB2ZXJ0aWNhbEhlaWdodDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgXy5zbGlkZU9mZnNldCA9IDA7XG4gICAgICAgICAgICB2ZXJ0aWNhbE9mZnNldCA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgPSAoKF8uc2xpZGVXaWR0aCAqIE1hdGguZmxvb3IoXy5vcHRpb25zLnNsaWRlc1RvU2hvdykpIC8gMikgLSAoKF8uc2xpZGVXaWR0aCAqIF8uc2xpZGVDb3VudCkgLyAyKTtcbiAgICAgICAgfSBlbHNlIGlmIChfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSAmJiBfLm9wdGlvbnMuaW5maW5pdGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgKz0gXy5zbGlkZVdpZHRoICogTWF0aC5mbG9vcihfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC8gMikgLSBfLnNsaWRlV2lkdGg7XG4gICAgICAgIH0gZWxzZSBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uc2xpZGVPZmZzZXQgPSAwO1xuICAgICAgICAgICAgXy5zbGlkZU9mZnNldCArPSBfLnNsaWRlV2lkdGggKiBNYXRoLmZsb29yKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLyAyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB0YXJnZXRMZWZ0ID0gKChzbGlkZUluZGV4ICogXy5zbGlkZVdpZHRoKSAqIC0xKSArIF8uc2xpZGVPZmZzZXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0YXJnZXRMZWZ0ID0gKChzbGlkZUluZGV4ICogdmVydGljYWxIZWlnaHQpICogLTEpICsgdmVydGljYWxPZmZzZXQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLnZhcmlhYmxlV2lkdGggPT09IHRydWUpIHtcblxuICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93IHx8IF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRTbGlkZSA9IF8uJHNsaWRlVHJhY2suY2hpbGRyZW4oJy5zbGljay1zbGlkZScpLmVxKHNsaWRlSW5kZXgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRTbGlkZSA9IF8uJHNsaWRlVHJhY2suY2hpbGRyZW4oJy5zbGljay1zbGlkZScpLmVxKHNsaWRlSW5kZXggKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5ydGwgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0U2xpZGVbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0TGVmdCA9IChfLiRzbGlkZVRyYWNrLndpZHRoKCkgLSB0YXJnZXRTbGlkZVswXS5vZmZzZXRMZWZ0IC0gdGFyZ2V0U2xpZGUud2lkdGgoKSkgKiAtMTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRMZWZ0ID0gIDA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRMZWZ0ID0gdGFyZ2V0U2xpZGVbMF0gPyB0YXJnZXRTbGlkZVswXS5vZmZzZXRMZWZ0ICogLTEgOiAwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgfHwgXy5vcHRpb25zLmluZmluaXRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRTbGlkZSA9IF8uJHNsaWRlVHJhY2suY2hpbGRyZW4oJy5zbGljay1zbGlkZScpLmVxKHNsaWRlSW5kZXgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldFNsaWRlID0gXy4kc2xpZGVUcmFjay5jaGlsZHJlbignLnNsaWNrLXNsaWRlJykuZXEoc2xpZGVJbmRleCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKyAxKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLnJ0bCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0U2xpZGVbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldExlZnQgPSAoXy4kc2xpZGVUcmFjay53aWR0aCgpIC0gdGFyZ2V0U2xpZGVbMF0ub2Zmc2V0TGVmdCAtIHRhcmdldFNsaWRlLndpZHRoKCkpICogLTE7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRMZWZ0ID0gIDA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRMZWZ0ID0gdGFyZ2V0U2xpZGVbMF0gPyB0YXJnZXRTbGlkZVswXS5vZmZzZXRMZWZ0ICogLTEgOiAwO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRhcmdldExlZnQgKz0gKF8uJGxpc3Qud2lkdGgoKSAtIHRhcmdldFNsaWRlLm91dGVyV2lkdGgoKSkgLyAyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldExlZnQ7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmdldE9wdGlvbiA9IFNsaWNrLnByb3RvdHlwZS5zbGlja0dldE9wdGlvbiA9IGZ1bmN0aW9uKG9wdGlvbikge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICByZXR1cm4gXy5vcHRpb25zW29wdGlvbl07XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmdldE5hdmlnYWJsZUluZGV4ZXMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBicmVha1BvaW50ID0gMCxcbiAgICAgICAgICAgIGNvdW50ZXIgPSAwLFxuICAgICAgICAgICAgaW5kZXhlcyA9IFtdLFxuICAgICAgICAgICAgbWF4O1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBtYXggPSBfLnNsaWRlQ291bnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBicmVha1BvaW50ID0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsICogLTE7XG4gICAgICAgICAgICBjb3VudGVyID0gXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsICogLTE7XG4gICAgICAgICAgICBtYXggPSBfLnNsaWRlQ291bnQgKiAyO1xuICAgICAgICB9XG5cbiAgICAgICAgd2hpbGUgKGJyZWFrUG9pbnQgPCBtYXgpIHtcbiAgICAgICAgICAgIGluZGV4ZXMucHVzaChicmVha1BvaW50KTtcbiAgICAgICAgICAgIGJyZWFrUG9pbnQgPSBjb3VudGVyICsgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsO1xuICAgICAgICAgICAgY291bnRlciArPSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA/IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCA6IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3c7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaW5kZXhlcztcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZ2V0U2xpY2sgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZ2V0U2xpZGVDb3VudCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIHNsaWRlc1RyYXZlcnNlZCwgc3dpcGVkU2xpZGUsIGNlbnRlck9mZnNldDtcblxuICAgICAgICBjZW50ZXJPZmZzZXQgPSBfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gdHJ1ZSA/IF8uc2xpZGVXaWR0aCAqIE1hdGguZmxvb3IoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIpIDogMDtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLnN3aXBlVG9TbGlkZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5maW5kKCcuc2xpY2stc2xpZGUnKS5lYWNoKGZ1bmN0aW9uKGluZGV4LCBzbGlkZSkge1xuICAgICAgICAgICAgICAgIGlmIChzbGlkZS5vZmZzZXRMZWZ0IC0gY2VudGVyT2Zmc2V0ICsgKCQoc2xpZGUpLm91dGVyV2lkdGgoKSAvIDIpID4gKF8uc3dpcGVMZWZ0ICogLTEpKSB7XG4gICAgICAgICAgICAgICAgICAgIHN3aXBlZFNsaWRlID0gc2xpZGU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgc2xpZGVzVHJhdmVyc2VkID0gTWF0aC5hYnMoJChzd2lwZWRTbGlkZSkuYXR0cignZGF0YS1zbGljay1pbmRleCcpIC0gXy5jdXJyZW50U2xpZGUpIHx8IDE7XG5cbiAgICAgICAgICAgIHJldHVybiBzbGlkZXNUcmF2ZXJzZWQ7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuZ29UbyA9IFNsaWNrLnByb3RvdHlwZS5zbGlja0dvVG8gPSBmdW5jdGlvbihzbGlkZSwgZG9udEFuaW1hdGUpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5jaGFuZ2VTbGlkZSh7XG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ2luZGV4JyxcbiAgICAgICAgICAgICAgICBpbmRleDogcGFyc2VJbnQoc2xpZGUpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGRvbnRBbmltYXRlKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uKGNyZWF0aW9uKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmICghJChfLiRzbGlkZXIpLmhhc0NsYXNzKCdzbGljay1pbml0aWFsaXplZCcpKSB7XG5cbiAgICAgICAgICAgICQoXy4kc2xpZGVyKS5hZGRDbGFzcygnc2xpY2staW5pdGlhbGl6ZWQnKTtcblxuICAgICAgICAgICAgXy5idWlsZFJvd3MoKTtcbiAgICAgICAgICAgIF8uYnVpbGRPdXQoKTtcbiAgICAgICAgICAgIF8uc2V0UHJvcHMoKTtcbiAgICAgICAgICAgIF8uc3RhcnRMb2FkKCk7XG4gICAgICAgICAgICBfLmxvYWRTbGlkZXIoKTtcbiAgICAgICAgICAgIF8uaW5pdGlhbGl6ZUV2ZW50cygpO1xuICAgICAgICAgICAgXy51cGRhdGVBcnJvd3MoKTtcbiAgICAgICAgICAgIF8udXBkYXRlRG90cygpO1xuICAgICAgICAgICAgXy5jaGVja1Jlc3BvbnNpdmUodHJ1ZSk7XG4gICAgICAgICAgICBfLmZvY3VzSGFuZGxlcigpO1xuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY3JlYXRpb24pIHtcbiAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdpbml0JywgW19dKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy5pbml0QURBKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIF8ub3B0aW9ucy5hdXRvcGxheSApIHtcblxuICAgICAgICAgICAgXy5wYXVzZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIF8uYXV0b1BsYXkoKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmluaXRBREEgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgICAgIG51bURvdEdyb3VwcyA9IE1hdGguY2VpbChfLnNsaWRlQ291bnQgLyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSxcbiAgICAgICAgICAgICAgICB0YWJDb250cm9sSW5kZXhlcyA9IF8uZ2V0TmF2aWdhYmxlSW5kZXhlcygpLmZpbHRlcihmdW5jdGlvbih2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICh2YWwgPj0gMCkgJiYgKHZhbCA8IF8uc2xpZGVDb3VudCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgXy4kc2xpZGVzLmFkZChfLiRzbGlkZVRyYWNrLmZpbmQoJy5zbGljay1jbG9uZWQnKSkuYXR0cih7XG4gICAgICAgICAgICAnYXJpYS1oaWRkZW4nOiAndHJ1ZScsXG4gICAgICAgICAgICAndGFiaW5kZXgnOiAnLTEnXG4gICAgICAgIH0pLmZpbmQoJ2EsIGlucHV0LCBidXR0b24sIHNlbGVjdCcpLmF0dHIoe1xuICAgICAgICAgICAgJ3RhYmluZGV4JzogJy0xJ1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoXy4kZG90cyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgXy4kc2xpZGVzLm5vdChfLiRzbGlkZVRyYWNrLmZpbmQoJy5zbGljay1jbG9uZWQnKSkuZWFjaChmdW5jdGlvbihpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNsaWRlQ29udHJvbEluZGV4ID0gdGFiQ29udHJvbEluZGV4ZXMuaW5kZXhPZihpKTtcblxuICAgICAgICAgICAgICAgICQodGhpcykuYXR0cih7XG4gICAgICAgICAgICAgICAgICAgICdyb2xlJzogJ3RhYnBhbmVsJyxcbiAgICAgICAgICAgICAgICAgICAgJ2lkJzogJ3NsaWNrLXNsaWRlJyArIF8uaW5zdGFuY2VVaWQgKyBpLFxuICAgICAgICAgICAgICAgICAgICAndGFiaW5kZXgnOiAtMVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgaWYgKHNsaWRlQ29udHJvbEluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmF0dHIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2FyaWEtZGVzY3JpYmVkYnknOiAnc2xpY2stc2xpZGUtY29udHJvbCcgKyBfLmluc3RhbmNlVWlkICsgc2xpZGVDb250cm9sSW5kZXhcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIF8uJGRvdHMuYXR0cigncm9sZScsICd0YWJsaXN0JykuZmluZCgnbGknKS5lYWNoKGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgICAgICAgICB2YXIgbWFwcGVkU2xpZGVJbmRleCA9IHRhYkNvbnRyb2xJbmRleGVzW2ldO1xuXG4gICAgICAgICAgICAgICAgJCh0aGlzKS5hdHRyKHtcbiAgICAgICAgICAgICAgICAgICAgJ3JvbGUnOiAncHJlc2VudGF0aW9uJ1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgJCh0aGlzKS5maW5kKCdidXR0b24nKS5maXJzdCgpLmF0dHIoe1xuICAgICAgICAgICAgICAgICAgICAncm9sZSc6ICd0YWInLFxuICAgICAgICAgICAgICAgICAgICAnaWQnOiAnc2xpY2stc2xpZGUtY29udHJvbCcgKyBfLmluc3RhbmNlVWlkICsgaSxcbiAgICAgICAgICAgICAgICAgICAgJ2FyaWEtY29udHJvbHMnOiAnc2xpY2stc2xpZGUnICsgXy5pbnN0YW5jZVVpZCArIG1hcHBlZFNsaWRlSW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICdhcmlhLWxhYmVsJzogKGkgKyAxKSArICcgb2YgJyArIG51bURvdEdyb3VwcyxcbiAgICAgICAgICAgICAgICAgICAgJ2FyaWEtc2VsZWN0ZWQnOiBudWxsLFxuICAgICAgICAgICAgICAgICAgICAndGFiaW5kZXgnOiAnLTEnXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH0pLmVxKF8uY3VycmVudFNsaWRlKS5maW5kKCdidXR0b24nKS5hdHRyKHtcbiAgICAgICAgICAgICAgICAnYXJpYS1zZWxlY3RlZCc6ICd0cnVlJyxcbiAgICAgICAgICAgICAgICAndGFiaW5kZXgnOiAnMCdcbiAgICAgICAgICAgIH0pLmVuZCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaT1fLmN1cnJlbnRTbGlkZSwgbWF4PWkrXy5vcHRpb25zLnNsaWRlc1RvU2hvdzsgaSA8IG1heDsgaSsrKSB7XG4gICAgICAgICAgICBfLiRzbGlkZXMuZXEoaSkuYXR0cigndGFiaW5kZXgnLCAwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8uYWN0aXZhdGVBREEoKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuaW5pdEFycm93RXZlbnRzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYXJyb3dzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgIF8uJHByZXZBcnJvd1xuICAgICAgICAgICAgICAgLm9mZignY2xpY2suc2xpY2snKVxuICAgICAgICAgICAgICAgLm9uKCdjbGljay5zbGljaycsIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ3ByZXZpb3VzJ1xuICAgICAgICAgICAgICAgfSwgXy5jaGFuZ2VTbGlkZSk7XG4gICAgICAgICAgICBfLiRuZXh0QXJyb3dcbiAgICAgICAgICAgICAgIC5vZmYoJ2NsaWNrLnNsaWNrJylcbiAgICAgICAgICAgICAgIC5vbignY2xpY2suc2xpY2snLCB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICduZXh0J1xuICAgICAgICAgICAgICAgfSwgXy5jaGFuZ2VTbGlkZSk7XG5cbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF8uJHByZXZBcnJvdy5vbigna2V5ZG93bi5zbGljaycsIF8ua2V5SGFuZGxlcik7XG4gICAgICAgICAgICAgICAgXy4kbmV4dEFycm93Lm9uKCdrZXlkb3duLnNsaWNrJywgXy5rZXlIYW5kbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5pbml0RG90RXZlbnRzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZG90cyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgJCgnbGknLCBfLiRkb3RzKS5vbignY2xpY2suc2xpY2snLCB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ2luZGV4J1xuICAgICAgICAgICAgfSwgXy5jaGFuZ2VTbGlkZSk7XG5cbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuYWNjZXNzaWJpbGl0eSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIF8uJGRvdHMub24oJ2tleWRvd24uc2xpY2snLCBfLmtleUhhbmRsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCBfLm9wdGlvbnMuZG90cyA9PT0gdHJ1ZSAmJiBfLm9wdGlvbnMucGF1c2VPbkRvdHNIb3ZlciA9PT0gdHJ1ZSApIHtcblxuICAgICAgICAgICAgJCgnbGknLCBfLiRkb3RzKVxuICAgICAgICAgICAgICAgIC5vbignbW91c2VlbnRlci5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIHRydWUpKVxuICAgICAgICAgICAgICAgIC5vbignbW91c2VsZWF2ZS5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIGZhbHNlKSk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5pbml0U2xpZGVFdmVudHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKCBfLm9wdGlvbnMucGF1c2VPbkhvdmVyICkge1xuXG4gICAgICAgICAgICBfLiRsaXN0Lm9uKCdtb3VzZWVudGVyLnNsaWNrJywgJC5wcm94eShfLmludGVycnVwdCwgXywgdHJ1ZSkpO1xuICAgICAgICAgICAgXy4kbGlzdC5vbignbW91c2VsZWF2ZS5zbGljaycsICQucHJveHkoXy5pbnRlcnJ1cHQsIF8sIGZhbHNlKSk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5pbml0aWFsaXplRXZlbnRzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uaW5pdEFycm93RXZlbnRzKCk7XG5cbiAgICAgICAgXy5pbml0RG90RXZlbnRzKCk7XG4gICAgICAgIF8uaW5pdFNsaWRlRXZlbnRzKCk7XG5cbiAgICAgICAgXy4kbGlzdC5vbigndG91Y2hzdGFydC5zbGljayBtb3VzZWRvd24uc2xpY2snLCB7XG4gICAgICAgICAgICBhY3Rpb246ICdzdGFydCdcbiAgICAgICAgfSwgXy5zd2lwZUhhbmRsZXIpO1xuICAgICAgICBfLiRsaXN0Lm9uKCd0b3VjaG1vdmUuc2xpY2sgbW91c2Vtb3ZlLnNsaWNrJywge1xuICAgICAgICAgICAgYWN0aW9uOiAnbW92ZSdcbiAgICAgICAgfSwgXy5zd2lwZUhhbmRsZXIpO1xuICAgICAgICBfLiRsaXN0Lm9uKCd0b3VjaGVuZC5zbGljayBtb3VzZXVwLnNsaWNrJywge1xuICAgICAgICAgICAgYWN0aW9uOiAnZW5kJ1xuICAgICAgICB9LCBfLnN3aXBlSGFuZGxlcik7XG4gICAgICAgIF8uJGxpc3Qub24oJ3RvdWNoY2FuY2VsLnNsaWNrIG1vdXNlbGVhdmUuc2xpY2snLCB7XG4gICAgICAgICAgICBhY3Rpb246ICdlbmQnXG4gICAgICAgIH0sIF8uc3dpcGVIYW5kbGVyKTtcblxuICAgICAgICBfLiRsaXN0Lm9uKCdjbGljay5zbGljaycsIF8uY2xpY2tIYW5kbGVyKTtcblxuICAgICAgICAkKGRvY3VtZW50KS5vbihfLnZpc2liaWxpdHlDaGFuZ2UsICQucHJveHkoXy52aXNpYmlsaXR5LCBfKSk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLiRsaXN0Lm9uKCdrZXlkb3duLnNsaWNrJywgXy5rZXlIYW5kbGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZm9jdXNPblNlbGVjdCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgJChfLiRzbGlkZVRyYWNrKS5jaGlsZHJlbigpLm9uKCdjbGljay5zbGljaycsIF8uc2VsZWN0SGFuZGxlcik7XG4gICAgICAgIH1cblxuICAgICAgICAkKHdpbmRvdykub24oJ29yaWVudGF0aW9uY2hhbmdlLnNsaWNrLnNsaWNrLScgKyBfLmluc3RhbmNlVWlkLCAkLnByb3h5KF8ub3JpZW50YXRpb25DaGFuZ2UsIF8pKTtcblxuICAgICAgICAkKHdpbmRvdykub24oJ3Jlc2l6ZS5zbGljay5zbGljay0nICsgXy5pbnN0YW5jZVVpZCwgJC5wcm94eShfLnJlc2l6ZSwgXykpO1xuXG4gICAgICAgICQoJ1tkcmFnZ2FibGUhPXRydWVdJywgXy4kc2xpZGVUcmFjaykub24oJ2RyYWdzdGFydCcsIF8ucHJldmVudERlZmF1bHQpO1xuXG4gICAgICAgICQod2luZG93KS5vbignbG9hZC5zbGljay5zbGljay0nICsgXy5pbnN0YW5jZVVpZCwgXy5zZXRQb3NpdGlvbik7XG4gICAgICAgICQoXy5zZXRQb3NpdGlvbik7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmluaXRVSSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmFycm93cyA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgIF8uJHByZXZBcnJvdy5zaG93KCk7XG4gICAgICAgICAgICBfLiRuZXh0QXJyb3cuc2hvdygpO1xuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmRvdHMgPT09IHRydWUgJiYgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICBfLiRkb3RzLnNob3coKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmtleUhhbmRsZXIgPSBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcbiAgICAgICAgIC8vRG9udCBzbGlkZSBpZiB0aGUgY3Vyc29yIGlzIGluc2lkZSB0aGUgZm9ybSBmaWVsZHMgYW5kIGFycm93IGtleXMgYXJlIHByZXNzZWRcbiAgICAgICAgaWYoIWV2ZW50LnRhcmdldC50YWdOYW1lLm1hdGNoKCdURVhUQVJFQXxJTlBVVHxTRUxFQ1QnKSkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT09IDM3ICYmIF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgXy5jaGFuZ2VTbGlkZSh7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IF8ub3B0aW9ucy5ydGwgPT09IHRydWUgPyAnbmV4dCcgOiAgJ3ByZXZpb3VzJ1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGV2ZW50LmtleUNvZGUgPT09IDM5ICYmIF8ub3B0aW9ucy5hY2Nlc3NpYmlsaXR5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgXy5jaGFuZ2VTbGlkZSh7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IF8ub3B0aW9ucy5ydGwgPT09IHRydWUgPyAncHJldmlvdXMnIDogJ25leHQnXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5sYXp5TG9hZCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGxvYWRSYW5nZSwgY2xvbmVSYW5nZSwgcmFuZ2VTdGFydCwgcmFuZ2VFbmQ7XG5cbiAgICAgICAgZnVuY3Rpb24gbG9hZEltYWdlcyhpbWFnZXNTY29wZSkge1xuXG4gICAgICAgICAgICAkKCdpbWdbZGF0YS1sYXp5XScsIGltYWdlc1Njb3BlKS5lYWNoKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgdmFyIGltYWdlID0gJCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VTb3VyY2UgPSAkKHRoaXMpLmF0dHIoJ2RhdGEtbGF6eScpLFxuICAgICAgICAgICAgICAgICAgICBpbWFnZVNyY1NldCA9ICQodGhpcykuYXR0cignZGF0YS1zcmNzZXQnKSxcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VTaXplcyAgPSAkKHRoaXMpLmF0dHIoJ2RhdGEtc2l6ZXMnKSB8fCBfLiRzbGlkZXIuYXR0cignZGF0YS1zaXplcycpLFxuICAgICAgICAgICAgICAgICAgICBpbWFnZVRvTG9hZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuXG4gICAgICAgICAgICAgICAgaW1hZ2VUb0xvYWQub25sb2FkID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hbmltYXRlKHsgb3BhY2l0eTogMCB9LCAxMDAsIGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGltYWdlU3JjU2V0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignc3Jjc2V0JywgaW1hZ2VTcmNTZXQgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW1hZ2VTaXplcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignc2l6ZXMnLCBpbWFnZVNpemVzICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignc3JjJywgaW1hZ2VTb3VyY2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hbmltYXRlKHsgb3BhY2l0eTogMSB9LCAyMDAsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGF0YS1sYXp5IGRhdGEtc3Jjc2V0IGRhdGEtc2l6ZXMnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2xpY2stbG9hZGluZycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignbGF6eUxvYWRlZCcsIFtfLCBpbWFnZSwgaW1hZ2VTb3VyY2VdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGltYWdlVG9Mb2FkLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgICAgICAgICBpbWFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUF0dHIoICdkYXRhLWxhenknIClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcyggJ3NsaWNrLWxvYWRpbmcnIClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcyggJ3NsaWNrLWxhenlsb2FkLWVycm9yJyApO1xuXG4gICAgICAgICAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdsYXp5TG9hZEVycm9yJywgWyBfLCBpbWFnZSwgaW1hZ2VTb3VyY2UgXSk7XG5cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgaW1hZ2VUb0xvYWQuc3JjID0gaW1hZ2VTb3VyY2U7XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICByYW5nZVN0YXJ0ID0gXy5jdXJyZW50U2xpZGUgKyAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIgKyAxKTtcbiAgICAgICAgICAgICAgICByYW5nZUVuZCA9IHJhbmdlU3RhcnQgKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICsgMjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmFuZ2VTdGFydCA9IE1hdGgubWF4KDAsIF8uY3VycmVudFNsaWRlIC0gKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLyAyICsgMSkpO1xuICAgICAgICAgICAgICAgIHJhbmdlRW5kID0gMiArIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93IC8gMiArIDEpICsgXy5jdXJyZW50U2xpZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByYW5nZVN0YXJ0ID0gXy5vcHRpb25zLmluZmluaXRlID8gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyArIF8uY3VycmVudFNsaWRlIDogXy5jdXJyZW50U2xpZGU7XG4gICAgICAgICAgICByYW5nZUVuZCA9IE1hdGguY2VpbChyYW5nZVN0YXJ0ICsgXy5vcHRpb25zLnNsaWRlc1RvU2hvdyk7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBpZiAocmFuZ2VTdGFydCA+IDApIHJhbmdlU3RhcnQtLTtcbiAgICAgICAgICAgICAgICBpZiAocmFuZ2VFbmQgPD0gXy5zbGlkZUNvdW50KSByYW5nZUVuZCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbG9hZFJhbmdlID0gXy4kc2xpZGVyLmZpbmQoJy5zbGljay1zbGlkZScpLnNsaWNlKHJhbmdlU3RhcnQsIHJhbmdlRW5kKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmxhenlMb2FkID09PSAnYW50aWNpcGF0ZWQnKSB7XG4gICAgICAgICAgICB2YXIgcHJldlNsaWRlID0gcmFuZ2VTdGFydCAtIDEsXG4gICAgICAgICAgICAgICAgbmV4dFNsaWRlID0gcmFuZ2VFbmQsXG4gICAgICAgICAgICAgICAgJHNsaWRlcyA9IF8uJHNsaWRlci5maW5kKCcuc2xpY2stc2xpZGUnKTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGw7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChwcmV2U2xpZGUgPCAwKSBwcmV2U2xpZGUgPSBfLnNsaWRlQ291bnQgLSAxO1xuICAgICAgICAgICAgICAgIGxvYWRSYW5nZSA9IGxvYWRSYW5nZS5hZGQoJHNsaWRlcy5lcShwcmV2U2xpZGUpKTtcbiAgICAgICAgICAgICAgICBsb2FkUmFuZ2UgPSBsb2FkUmFuZ2UuYWRkKCRzbGlkZXMuZXEobmV4dFNsaWRlKSk7XG4gICAgICAgICAgICAgICAgcHJldlNsaWRlLS07XG4gICAgICAgICAgICAgICAgbmV4dFNsaWRlKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsb2FkSW1hZ2VzKGxvYWRSYW5nZSk7XG5cbiAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICBjbG9uZVJhbmdlID0gXy4kc2xpZGVyLmZpbmQoJy5zbGljay1zbGlkZScpO1xuICAgICAgICAgICAgbG9hZEltYWdlcyhjbG9uZVJhbmdlKTtcbiAgICAgICAgfSBlbHNlXG4gICAgICAgIGlmIChfLmN1cnJlbnRTbGlkZSA+PSBfLnNsaWRlQ291bnQgLSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG4gICAgICAgICAgICBjbG9uZVJhbmdlID0gXy4kc2xpZGVyLmZpbmQoJy5zbGljay1jbG9uZWQnKS5zbGljZSgwLCBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KTtcbiAgICAgICAgICAgIGxvYWRJbWFnZXMoY2xvbmVSYW5nZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoXy5jdXJyZW50U2xpZGUgPT09IDApIHtcbiAgICAgICAgICAgIGNsb25lUmFuZ2UgPSBfLiRzbGlkZXIuZmluZCgnLnNsaWNrLWNsb25lZCcpLnNsaWNlKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKiAtMSk7XG4gICAgICAgICAgICBsb2FkSW1hZ2VzKGNsb25lUmFuZ2UpO1xuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLmxvYWRTbGlkZXIgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5zZXRQb3NpdGlvbigpO1xuXG4gICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKHtcbiAgICAgICAgICAgIG9wYWNpdHk6IDFcbiAgICAgICAgfSk7XG5cbiAgICAgICAgXy4kc2xpZGVyLnJlbW92ZUNsYXNzKCdzbGljay1sb2FkaW5nJyk7XG5cbiAgICAgICAgXy5pbml0VUkoKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmxhenlMb2FkID09PSAncHJvZ3Jlc3NpdmUnKSB7XG4gICAgICAgICAgICBfLnByb2dyZXNzaXZlTGF6eUxvYWQoKTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5uZXh0ID0gU2xpY2sucHJvdG90eXBlLnNsaWNrTmV4dCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmNoYW5nZVNsaWRlKHtcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnbmV4dCdcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLm9yaWVudGF0aW9uQ2hhbmdlID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIF8uY2hlY2tSZXNwb25zaXZlKCk7XG4gICAgICAgIF8uc2V0UG9zaXRpb24oKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucGF1c2UgPSBTbGljay5wcm90b3R5cGUuc2xpY2tQYXVzZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmF1dG9QbGF5Q2xlYXIoKTtcbiAgICAgICAgXy5wYXVzZWQgPSB0cnVlO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5wbGF5ID0gU2xpY2sucHJvdG90eXBlLnNsaWNrUGxheSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLmF1dG9QbGF5KCk7XG4gICAgICAgIF8ub3B0aW9ucy5hdXRvcGxheSA9IHRydWU7XG4gICAgICAgIF8ucGF1c2VkID0gZmFsc2U7XG4gICAgICAgIF8uZm9jdXNzZWQgPSBmYWxzZTtcbiAgICAgICAgXy5pbnRlcnJ1cHRlZCA9IGZhbHNlO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5wb3N0U2xpZGUgPSBmdW5jdGlvbihpbmRleCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiggIV8udW5zbGlja2VkICkge1xuXG4gICAgICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignYWZ0ZXJDaGFuZ2UnLCBbXywgaW5kZXhdKTtcblxuICAgICAgICAgICAgXy5hbmltYXRpbmcgPSBmYWxzZTtcblxuICAgICAgICAgICAgaWYgKF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgICAgICBfLnNldFBvc2l0aW9uKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF8uc3dpcGVMZWZ0ID0gbnVsbDtcblxuICAgICAgICAgICAgaWYgKCBfLm9wdGlvbnMuYXV0b3BsYXkgKSB7XG4gICAgICAgICAgICAgICAgXy5hdXRvUGxheSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmFjY2Vzc2liaWxpdHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLmluaXRBREEoKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLmZvY3VzT25DaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyICRjdXJyZW50U2xpZGUgPSAkKF8uJHNsaWRlcy5nZXQoXy5jdXJyZW50U2xpZGUpKTtcbiAgICAgICAgICAgICAgICAgICAgJGN1cnJlbnRTbGlkZS5hdHRyKCd0YWJpbmRleCcsIDApLmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucHJldiA9IFNsaWNrLnByb3RvdHlwZS5zbGlja1ByZXYgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5jaGFuZ2VTbGlkZSh7XG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ3ByZXZpb3VzJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucHJldmVudERlZmF1bHQgPSBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnByb2dyZXNzaXZlTGF6eUxvYWQgPSBmdW5jdGlvbiggdHJ5Q291bnQgKSB7XG5cbiAgICAgICAgdHJ5Q291bnQgPSB0cnlDb3VudCB8fCAxO1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgICRpbWdzVG9Mb2FkID0gJCggJ2ltZ1tkYXRhLWxhenldJywgXy4kc2xpZGVyICksXG4gICAgICAgICAgICBpbWFnZSxcbiAgICAgICAgICAgIGltYWdlU291cmNlLFxuICAgICAgICAgICAgaW1hZ2VTcmNTZXQsXG4gICAgICAgICAgICBpbWFnZVNpemVzLFxuICAgICAgICAgICAgaW1hZ2VUb0xvYWQ7XG5cbiAgICAgICAgaWYgKCAkaW1nc1RvTG9hZC5sZW5ndGggKSB7XG5cbiAgICAgICAgICAgIGltYWdlID0gJGltZ3NUb0xvYWQuZmlyc3QoKTtcbiAgICAgICAgICAgIGltYWdlU291cmNlID0gaW1hZ2UuYXR0cignZGF0YS1sYXp5Jyk7XG4gICAgICAgICAgICBpbWFnZVNyY1NldCA9IGltYWdlLmF0dHIoJ2RhdGEtc3Jjc2V0Jyk7XG4gICAgICAgICAgICBpbWFnZVNpemVzICA9IGltYWdlLmF0dHIoJ2RhdGEtc2l6ZXMnKSB8fCBfLiRzbGlkZXIuYXR0cignZGF0YS1zaXplcycpO1xuICAgICAgICAgICAgaW1hZ2VUb0xvYWQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcblxuICAgICAgICAgICAgaW1hZ2VUb0xvYWQub25sb2FkID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoaW1hZ2VTcmNTZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdzcmNzZXQnLCBpbWFnZVNyY1NldCApO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbWFnZVNpemVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbWFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdzaXplcycsIGltYWdlU2l6ZXMgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGltYWdlXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCAnc3JjJywgaW1hZ2VTb3VyY2UgKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0cignZGF0YS1sYXp5IGRhdGEtc3Jjc2V0IGRhdGEtc2l6ZXMnKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLWxvYWRpbmcnKTtcblxuICAgICAgICAgICAgICAgIGlmICggXy5vcHRpb25zLmFkYXB0aXZlSGVpZ2h0ID09PSB0cnVlICkge1xuICAgICAgICAgICAgICAgICAgICBfLnNldFBvc2l0aW9uKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2xhenlMb2FkZWQnLCBbIF8sIGltYWdlLCBpbWFnZVNvdXJjZSBdKTtcbiAgICAgICAgICAgICAgICBfLnByb2dyZXNzaXZlTGF6eUxvYWQoKTtcblxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaW1hZ2VUb0xvYWQub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgaWYgKCB0cnlDb3VudCA8IDMgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICAgICAqIHRyeSB0byBsb2FkIHRoZSBpbWFnZSAzIHRpbWVzLFxuICAgICAgICAgICAgICAgICAgICAgKiBsZWF2ZSBhIHNsaWdodCBkZWxheSBzbyB3ZSBkb24ndCBnZXRcbiAgICAgICAgICAgICAgICAgICAgICogc2VydmVycyBibG9ja2luZyB0aGUgcmVxdWVzdC5cbiAgICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5wcm9ncmVzc2l2ZUxhenlMb2FkKCB0cnlDb3VudCArIDEgKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgNTAwICk7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICAgIGltYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQXR0ciggJ2RhdGEtbGF6eScgKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCAnc2xpY2stbG9hZGluZycgKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCAnc2xpY2stbGF6eWxvYWQtZXJyb3InICk7XG5cbiAgICAgICAgICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2xhenlMb2FkRXJyb3InLCBbIF8sIGltYWdlLCBpbWFnZVNvdXJjZSBdKTtcblxuICAgICAgICAgICAgICAgICAgICBfLnByb2dyZXNzaXZlTGF6eUxvYWQoKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgaW1hZ2VUb0xvYWQuc3JjID0gaW1hZ2VTb3VyY2U7XG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ2FsbEltYWdlc0xvYWRlZCcsIFsgXyBdKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnJlZnJlc2ggPSBmdW5jdGlvbiggaW5pdGlhbGl6aW5nICkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcywgY3VycmVudFNsaWRlLCBsYXN0VmlzaWJsZUluZGV4O1xuXG4gICAgICAgIGxhc3RWaXNpYmxlSW5kZXggPSBfLnNsaWRlQ291bnQgLSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93O1xuXG4gICAgICAgIC8vIGluIG5vbi1pbmZpbml0ZSBzbGlkZXJzLCB3ZSBkb24ndCB3YW50IHRvIGdvIHBhc3QgdGhlXG4gICAgICAgIC8vIGxhc3QgdmlzaWJsZSBpbmRleC5cbiAgICAgICAgaWYoICFfLm9wdGlvbnMuaW5maW5pdGUgJiYgKCBfLmN1cnJlbnRTbGlkZSA+IGxhc3RWaXNpYmxlSW5kZXggKSkge1xuICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSBsYXN0VmlzaWJsZUluZGV4O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaWYgbGVzcyBzbGlkZXMgdGhhbiB0byBzaG93LCBnbyB0byBzdGFydC5cbiAgICAgICAgaWYgKCBfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyApIHtcbiAgICAgICAgICAgIF8uY3VycmVudFNsaWRlID0gMDtcblxuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudFNsaWRlID0gXy5jdXJyZW50U2xpZGU7XG5cbiAgICAgICAgXy5kZXN0cm95KHRydWUpO1xuXG4gICAgICAgICQuZXh0ZW5kKF8sIF8uaW5pdGlhbHMsIHsgY3VycmVudFNsaWRlOiBjdXJyZW50U2xpZGUgfSk7XG5cbiAgICAgICAgXy5pbml0KCk7XG5cbiAgICAgICAgaWYoICFpbml0aWFsaXppbmcgKSB7XG5cbiAgICAgICAgICAgIF8uY2hhbmdlU2xpZGUoe1xuICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ2luZGV4JyxcbiAgICAgICAgICAgICAgICAgICAgaW5kZXg6IGN1cnJlbnRTbGlkZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIGZhbHNlKTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnJlZ2lzdGVyQnJlYWtwb2ludHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsIGJyZWFrcG9pbnQsIGN1cnJlbnRCcmVha3BvaW50LCBsLFxuICAgICAgICAgICAgcmVzcG9uc2l2ZVNldHRpbmdzID0gXy5vcHRpb25zLnJlc3BvbnNpdmUgfHwgbnVsbDtcblxuICAgICAgICBpZiAoICQudHlwZShyZXNwb25zaXZlU2V0dGluZ3MpID09PSAnYXJyYXknICYmIHJlc3BvbnNpdmVTZXR0aW5ncy5sZW5ndGggKSB7XG5cbiAgICAgICAgICAgIF8ucmVzcG9uZFRvID0gXy5vcHRpb25zLnJlc3BvbmRUbyB8fCAnd2luZG93JztcblxuICAgICAgICAgICAgZm9yICggYnJlYWtwb2ludCBpbiByZXNwb25zaXZlU2V0dGluZ3MgKSB7XG5cbiAgICAgICAgICAgICAgICBsID0gXy5icmVha3BvaW50cy5sZW5ndGgtMTtcblxuICAgICAgICAgICAgICAgIGlmIChyZXNwb25zaXZlU2V0dGluZ3MuaGFzT3duUHJvcGVydHkoYnJlYWtwb2ludCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudEJyZWFrcG9pbnQgPSByZXNwb25zaXZlU2V0dGluZ3NbYnJlYWtwb2ludF0uYnJlYWtwb2ludDtcblxuICAgICAgICAgICAgICAgICAgICAvLyBsb29wIHRocm91Z2ggdGhlIGJyZWFrcG9pbnRzIGFuZCBjdXQgb3V0IGFueSBleGlzdGluZ1xuICAgICAgICAgICAgICAgICAgICAvLyBvbmVzIHdpdGggdGhlIHNhbWUgYnJlYWtwb2ludCBudW1iZXIsIHdlIGRvbid0IHdhbnQgZHVwZXMuXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlKCBsID49IDAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggXy5icmVha3BvaW50c1tsXSAmJiBfLmJyZWFrcG9pbnRzW2xdID09PSBjdXJyZW50QnJlYWtwb2ludCApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmJyZWFrcG9pbnRzLnNwbGljZShsLDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbC0tO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgXy5icmVha3BvaW50cy5wdXNoKGN1cnJlbnRCcmVha3BvaW50KTtcbiAgICAgICAgICAgICAgICAgICAgXy5icmVha3BvaW50U2V0dGluZ3NbY3VycmVudEJyZWFrcG9pbnRdID0gcmVzcG9uc2l2ZVNldHRpbmdzW2JyZWFrcG9pbnRdLnNldHRpbmdzO1xuXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIF8uYnJlYWtwb2ludHMuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICggXy5vcHRpb25zLm1vYmlsZUZpcnN0ICkgPyBhLWIgOiBiLWE7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICB9XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnJlaW5pdCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBfLiRzbGlkZXMgPVxuICAgICAgICAgICAgXy4kc2xpZGVUcmFja1xuICAgICAgICAgICAgICAgIC5jaGlsZHJlbihfLm9wdGlvbnMuc2xpZGUpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1zbGlkZScpO1xuXG4gICAgICAgIF8uc2xpZGVDb3VudCA9IF8uJHNsaWRlcy5sZW5ndGg7XG5cbiAgICAgICAgaWYgKF8uY3VycmVudFNsaWRlID49IF8uc2xpZGVDb3VudCAmJiBfLmN1cnJlbnRTbGlkZSAhPT0gMCkge1xuICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSBfLmN1cnJlbnRTbGlkZSAtIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLnNsaWRlQ291bnQgPD0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuICAgICAgICAgICAgXy5jdXJyZW50U2xpZGUgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgXy5yZWdpc3RlckJyZWFrcG9pbnRzKCk7XG5cbiAgICAgICAgXy5zZXRQcm9wcygpO1xuICAgICAgICBfLnNldHVwSW5maW5pdGUoKTtcbiAgICAgICAgXy5idWlsZEFycm93cygpO1xuICAgICAgICBfLnVwZGF0ZUFycm93cygpO1xuICAgICAgICBfLmluaXRBcnJvd0V2ZW50cygpO1xuICAgICAgICBfLmJ1aWxkRG90cygpO1xuICAgICAgICBfLnVwZGF0ZURvdHMoKTtcbiAgICAgICAgXy5pbml0RG90RXZlbnRzKCk7XG4gICAgICAgIF8uY2xlYW5VcFNsaWRlRXZlbnRzKCk7XG4gICAgICAgIF8uaW5pdFNsaWRlRXZlbnRzKCk7XG5cbiAgICAgICAgXy5jaGVja1Jlc3BvbnNpdmUoZmFsc2UsIHRydWUpO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZm9jdXNPblNlbGVjdCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgJChfLiRzbGlkZVRyYWNrKS5jaGlsZHJlbigpLm9uKCdjbGljay5zbGljaycsIF8uc2VsZWN0SGFuZGxlcik7XG4gICAgICAgIH1cblxuICAgICAgICBfLnNldFNsaWRlQ2xhc3Nlcyh0eXBlb2YgXy5jdXJyZW50U2xpZGUgPT09ICdudW1iZXInID8gXy5jdXJyZW50U2xpZGUgOiAwKTtcblxuICAgICAgICBfLnNldFBvc2l0aW9uKCk7XG4gICAgICAgIF8uZm9jdXNIYW5kbGVyKCk7XG5cbiAgICAgICAgXy5wYXVzZWQgPSAhXy5vcHRpb25zLmF1dG9wbGF5O1xuICAgICAgICBfLmF1dG9QbGF5KCk7XG5cbiAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ3JlSW5pdCcsIFtfXSk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnJlc2l6ZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoJCh3aW5kb3cpLndpZHRoKCkgIT09IF8ud2luZG93V2lkdGgpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dChfLndpbmRvd0RlbGF5KTtcbiAgICAgICAgICAgIF8ud2luZG93RGVsYXkgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBfLndpbmRvd1dpZHRoID0gJCh3aW5kb3cpLndpZHRoKCk7XG4gICAgICAgICAgICAgICAgXy5jaGVja1Jlc3BvbnNpdmUoKTtcbiAgICAgICAgICAgICAgICBpZiggIV8udW5zbGlja2VkICkgeyBfLnNldFBvc2l0aW9uKCk7IH1cbiAgICAgICAgICAgIH0sIDUwKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUucmVtb3ZlU2xpZGUgPSBTbGljay5wcm90b3R5cGUuc2xpY2tSZW1vdmUgPSBmdW5jdGlvbihpbmRleCwgcmVtb3ZlQmVmb3JlLCByZW1vdmVBbGwpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKHR5cGVvZihpbmRleCkgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgcmVtb3ZlQmVmb3JlID0gaW5kZXg7XG4gICAgICAgICAgICBpbmRleCA9IHJlbW92ZUJlZm9yZSA9PT0gdHJ1ZSA/IDAgOiBfLnNsaWRlQ291bnQgLSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW5kZXggPSByZW1vdmVCZWZvcmUgPT09IHRydWUgPyAtLWluZGV4IDogaW5kZXg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDwgMSB8fCBpbmRleCA8IDAgfHwgaW5kZXggPiBfLnNsaWRlQ291bnQgLSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBfLnVubG9hZCgpO1xuXG4gICAgICAgIGlmIChyZW1vdmVBbGwgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4oKS5yZW1vdmUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY2hpbGRyZW4odGhpcy5vcHRpb25zLnNsaWRlKS5lcShpbmRleCkucmVtb3ZlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBfLiRzbGlkZXMgPSBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSk7XG5cbiAgICAgICAgXy4kc2xpZGVUcmFjay5jaGlsZHJlbih0aGlzLm9wdGlvbnMuc2xpZGUpLmRldGFjaCgpO1xuXG4gICAgICAgIF8uJHNsaWRlVHJhY2suYXBwZW5kKF8uJHNsaWRlcyk7XG5cbiAgICAgICAgXy4kc2xpZGVzQ2FjaGUgPSBfLiRzbGlkZXM7XG5cbiAgICAgICAgXy5yZWluaXQoKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2V0Q1NTID0gZnVuY3Rpb24ocG9zaXRpb24pIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBwb3NpdGlvblByb3BzID0ge30sXG4gICAgICAgICAgICB4LCB5O1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMucnRsID09PSB0cnVlKSB7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IC1wb3NpdGlvbjtcbiAgICAgICAgfVxuICAgICAgICB4ID0gXy5wb3NpdGlvblByb3AgPT0gJ2xlZnQnID8gTWF0aC5jZWlsKHBvc2l0aW9uKSArICdweCcgOiAnMHB4JztcbiAgICAgICAgeSA9IF8ucG9zaXRpb25Qcm9wID09ICd0b3AnID8gTWF0aC5jZWlsKHBvc2l0aW9uKSArICdweCcgOiAnMHB4JztcblxuICAgICAgICBwb3NpdGlvblByb3BzW18ucG9zaXRpb25Qcm9wXSA9IHBvc2l0aW9uO1xuXG4gICAgICAgIGlmIChfLnRyYW5zZm9ybXNFbmFibGVkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay5jc3MocG9zaXRpb25Qcm9wcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwb3NpdGlvblByb3BzID0ge307XG4gICAgICAgICAgICBpZiAoXy5jc3NUcmFuc2l0aW9ucyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvblByb3BzW18uYW5pbVR5cGVdID0gJ3RyYW5zbGF0ZSgnICsgeCArICcsICcgKyB5ICsgJyknO1xuICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suY3NzKHBvc2l0aW9uUHJvcHMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwb3NpdGlvblByb3BzW18uYW5pbVR5cGVdID0gJ3RyYW5zbGF0ZTNkKCcgKyB4ICsgJywgJyArIHkgKyAnLCAwcHgpJztcbiAgICAgICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNzcyhwb3NpdGlvblByb3BzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXREaW1lbnNpb25zID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMudmVydGljYWwgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLiRsaXN0LmNzcyh7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6ICgnMHB4ICcgKyBfLm9wdGlvbnMuY2VudGVyUGFkZGluZylcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uJGxpc3QuaGVpZ2h0KF8uJHNsaWRlcy5maXJzdCgpLm91dGVySGVpZ2h0KHRydWUpICogXy5vcHRpb25zLnNsaWRlc1RvU2hvdyk7XG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLiRsaXN0LmNzcyh7XG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IChfLm9wdGlvbnMuY2VudGVyUGFkZGluZyArICcgMHB4JylcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIF8ubGlzdFdpZHRoID0gXy4kbGlzdC53aWR0aCgpO1xuICAgICAgICBfLmxpc3RIZWlnaHQgPSBfLiRsaXN0LmhlaWdodCgpO1xuXG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UgJiYgXy5vcHRpb25zLnZhcmlhYmxlV2lkdGggPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBfLnNsaWRlV2lkdGggPSBNYXRoLmNlaWwoXy5saXN0V2lkdGggLyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KTtcbiAgICAgICAgICAgIF8uJHNsaWRlVHJhY2sud2lkdGgoTWF0aC5jZWlsKChfLnNsaWRlV2lkdGggKiBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCcuc2xpY2stc2xpZGUnKS5sZW5ndGgpKSk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChfLm9wdGlvbnMudmFyaWFibGVXaWR0aCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy4kc2xpZGVUcmFjay53aWR0aCg1MDAwICogXy5zbGlkZUNvdW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uc2xpZGVXaWR0aCA9IE1hdGguY2VpbChfLmxpc3RXaWR0aCk7XG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmhlaWdodChNYXRoLmNlaWwoKF8uJHNsaWRlcy5maXJzdCgpLm91dGVySGVpZ2h0KHRydWUpICogXy4kc2xpZGVUcmFjay5jaGlsZHJlbignLnNsaWNrLXNsaWRlJykubGVuZ3RoKSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG9mZnNldCA9IF8uJHNsaWRlcy5maXJzdCgpLm91dGVyV2lkdGgodHJ1ZSkgLSBfLiRzbGlkZXMuZmlyc3QoKS53aWR0aCgpO1xuICAgICAgICBpZiAoXy5vcHRpb25zLnZhcmlhYmxlV2lkdGggPT09IGZhbHNlKSBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKCcuc2xpY2stc2xpZGUnKS53aWR0aChfLnNsaWRlV2lkdGggLSBvZmZzZXQpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXRGYWRlID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgdGFyZ2V0TGVmdDtcblxuICAgICAgICBfLiRzbGlkZXMuZWFjaChmdW5jdGlvbihpbmRleCwgZWxlbWVudCkge1xuICAgICAgICAgICAgdGFyZ2V0TGVmdCA9IChfLnNsaWRlV2lkdGggKiBpbmRleCkgKiAtMTtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMucnRsID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgJChlbGVtZW50KS5jc3Moe1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3JlbGF0aXZlJyxcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IHRhcmdldExlZnQsXG4gICAgICAgICAgICAgICAgICAgIHRvcDogMCxcbiAgICAgICAgICAgICAgICAgICAgekluZGV4OiBfLm9wdGlvbnMuekluZGV4IC0gMixcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkKGVsZW1lbnQpLmNzcyh7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiB0YXJnZXRMZWZ0LFxuICAgICAgICAgICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICAgICAgICAgIHpJbmRleDogXy5vcHRpb25zLnpJbmRleCAtIDIsXG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDBcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgXy4kc2xpZGVzLmVxKF8uY3VycmVudFNsaWRlKS5jc3Moe1xuICAgICAgICAgICAgekluZGV4OiBfLm9wdGlvbnMuekluZGV4IC0gMSxcbiAgICAgICAgICAgIG9wYWNpdHk6IDFcbiAgICAgICAgfSk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnNldEhlaWdodCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiAoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyA9PT0gMSAmJiBfLm9wdGlvbnMuYWRhcHRpdmVIZWlnaHQgPT09IHRydWUgJiYgXy5vcHRpb25zLnZlcnRpY2FsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdmFyIHRhcmdldEhlaWdodCA9IF8uJHNsaWRlcy5lcShfLmN1cnJlbnRTbGlkZSkub3V0ZXJIZWlnaHQodHJ1ZSk7XG4gICAgICAgICAgICBfLiRsaXN0LmNzcygnaGVpZ2h0JywgdGFyZ2V0SGVpZ2h0KTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXRPcHRpb24gPVxuICAgIFNsaWNrLnByb3RvdHlwZS5zbGlja1NldE9wdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBhY2NlcHRzIGFyZ3VtZW50cyBpbiBmb3JtYXQgb2Y6XG4gICAgICAgICAqXG4gICAgICAgICAqICAtIGZvciBjaGFuZ2luZyBhIHNpbmdsZSBvcHRpb24ncyB2YWx1ZTpcbiAgICAgICAgICogICAgIC5zbGljayhcInNldE9wdGlvblwiLCBvcHRpb24sIHZhbHVlLCByZWZyZXNoIClcbiAgICAgICAgICpcbiAgICAgICAgICogIC0gZm9yIGNoYW5naW5nIGEgc2V0IG9mIHJlc3BvbnNpdmUgb3B0aW9uczpcbiAgICAgICAgICogICAgIC5zbGljayhcInNldE9wdGlvblwiLCAncmVzcG9uc2l2ZScsIFt7fSwgLi4uXSwgcmVmcmVzaCApXG4gICAgICAgICAqXG4gICAgICAgICAqICAtIGZvciB1cGRhdGluZyBtdWx0aXBsZSB2YWx1ZXMgYXQgb25jZSAobm90IHJlc3BvbnNpdmUpXG4gICAgICAgICAqICAgICAuc2xpY2soXCJzZXRPcHRpb25cIiwgeyAnb3B0aW9uJzogdmFsdWUsIC4uLiB9LCByZWZyZXNoIClcbiAgICAgICAgICovXG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLCBsLCBpdGVtLCBvcHRpb24sIHZhbHVlLCByZWZyZXNoID0gZmFsc2UsIHR5cGU7XG5cbiAgICAgICAgaWYoICQudHlwZSggYXJndW1lbnRzWzBdICkgPT09ICdvYmplY3QnICkge1xuXG4gICAgICAgICAgICBvcHRpb24gPSAgYXJndW1lbnRzWzBdO1xuICAgICAgICAgICAgcmVmcmVzaCA9IGFyZ3VtZW50c1sxXTtcbiAgICAgICAgICAgIHR5cGUgPSAnbXVsdGlwbGUnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoICQudHlwZSggYXJndW1lbnRzWzBdICkgPT09ICdzdHJpbmcnICkge1xuXG4gICAgICAgICAgICBvcHRpb24gPSAgYXJndW1lbnRzWzBdO1xuICAgICAgICAgICAgdmFsdWUgPSBhcmd1bWVudHNbMV07XG4gICAgICAgICAgICByZWZyZXNoID0gYXJndW1lbnRzWzJdO1xuXG4gICAgICAgICAgICBpZiAoIGFyZ3VtZW50c1swXSA9PT0gJ3Jlc3BvbnNpdmUnICYmICQudHlwZSggYXJndW1lbnRzWzFdICkgPT09ICdhcnJheScgKSB7XG5cbiAgICAgICAgICAgICAgICB0eXBlID0gJ3Jlc3BvbnNpdmUnO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKCB0eXBlb2YgYXJndW1lbnRzWzFdICE9PSAndW5kZWZpbmVkJyApIHtcblxuICAgICAgICAgICAgICAgIHR5cGUgPSAnc2luZ2xlJztcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIHR5cGUgPT09ICdzaW5nbGUnICkge1xuXG4gICAgICAgICAgICBfLm9wdGlvbnNbb3B0aW9uXSA9IHZhbHVlO1xuXG5cbiAgICAgICAgfSBlbHNlIGlmICggdHlwZSA9PT0gJ211bHRpcGxlJyApIHtcblxuICAgICAgICAgICAgJC5lYWNoKCBvcHRpb24gLCBmdW5jdGlvbiggb3B0LCB2YWwgKSB7XG5cbiAgICAgICAgICAgICAgICBfLm9wdGlvbnNbb3B0XSA9IHZhbDtcblxuICAgICAgICAgICAgfSk7XG5cblxuICAgICAgICB9IGVsc2UgaWYgKCB0eXBlID09PSAncmVzcG9uc2l2ZScgKSB7XG5cbiAgICAgICAgICAgIGZvciAoIGl0ZW0gaW4gdmFsdWUgKSB7XG5cbiAgICAgICAgICAgICAgICBpZiggJC50eXBlKCBfLm9wdGlvbnMucmVzcG9uc2l2ZSApICE9PSAnYXJyYXknICkge1xuXG4gICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucy5yZXNwb25zaXZlID0gWyB2YWx1ZVtpdGVtXSBdO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBsID0gXy5vcHRpb25zLnJlc3BvbnNpdmUubGVuZ3RoLTE7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gbG9vcCB0aHJvdWdoIHRoZSByZXNwb25zaXZlIG9iamVjdCBhbmQgc3BsaWNlIG91dCBkdXBsaWNhdGVzLlxuICAgICAgICAgICAgICAgICAgICB3aGlsZSggbCA+PSAwICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiggXy5vcHRpb25zLnJlc3BvbnNpdmVbbF0uYnJlYWtwb2ludCA9PT0gdmFsdWVbaXRlbV0uYnJlYWtwb2ludCApIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucy5yZXNwb25zaXZlLnNwbGljZShsLDEpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGwtLTtcblxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zLnJlc3BvbnNpdmUucHVzaCggdmFsdWVbaXRlbV0gKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIHJlZnJlc2ggKSB7XG5cbiAgICAgICAgICAgIF8udW5sb2FkKCk7XG4gICAgICAgICAgICBfLnJlaW5pdCgpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2V0UG9zaXRpb24gPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgXy5zZXREaW1lbnNpb25zKCk7XG5cbiAgICAgICAgXy5zZXRIZWlnaHQoKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBfLnNldENTUyhfLmdldExlZnQoXy5jdXJyZW50U2xpZGUpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8uc2V0RmFkZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ3NldFBvc2l0aW9uJywgW19dKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2V0UHJvcHMgPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXMsXG4gICAgICAgICAgICBib2R5U3R5bGUgPSBkb2N1bWVudC5ib2R5LnN0eWxlO1xuXG4gICAgICAgIF8ucG9zaXRpb25Qcm9wID0gXy5vcHRpb25zLnZlcnRpY2FsID09PSB0cnVlID8gJ3RvcCcgOiAnbGVmdCc7XG5cbiAgICAgICAgaWYgKF8ucG9zaXRpb25Qcm9wID09PSAndG9wJykge1xuICAgICAgICAgICAgXy4kc2xpZGVyLmFkZENsYXNzKCdzbGljay12ZXJ0aWNhbCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgXy4kc2xpZGVyLnJlbW92ZUNsYXNzKCdzbGljay12ZXJ0aWNhbCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJvZHlTdHlsZS5XZWJraXRUcmFuc2l0aW9uICE9PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgIGJvZHlTdHlsZS5Nb3pUcmFuc2l0aW9uICE9PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgIGJvZHlTdHlsZS5tc1RyYW5zaXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy51c2VDU1MgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBfLmNzc1RyYW5zaXRpb25zID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggXy5vcHRpb25zLmZhZGUgKSB7XG4gICAgICAgICAgICBpZiAoIHR5cGVvZiBfLm9wdGlvbnMuekluZGV4ID09PSAnbnVtYmVyJyApIHtcbiAgICAgICAgICAgICAgICBpZiggXy5vcHRpb25zLnpJbmRleCA8IDMgKSB7XG4gICAgICAgICAgICAgICAgICAgIF8ub3B0aW9ucy56SW5kZXggPSAzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgXy5vcHRpb25zLnpJbmRleCA9IF8uZGVmYXVsdHMuekluZGV4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJvZHlTdHlsZS5PVHJhbnNmb3JtICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIF8uYW5pbVR5cGUgPSAnT1RyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zZm9ybVR5cGUgPSAnLW8tdHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNpdGlvblR5cGUgPSAnT1RyYW5zaXRpb24nO1xuICAgICAgICAgICAgaWYgKGJvZHlTdHlsZS5wZXJzcGVjdGl2ZVByb3BlcnR5ID09PSB1bmRlZmluZWQgJiYgYm9keVN0eWxlLndlYmtpdFBlcnNwZWN0aXZlID09PSB1bmRlZmluZWQpIF8uYW5pbVR5cGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYm9keVN0eWxlLk1velRyYW5zZm9ybSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBfLmFuaW1UeXBlID0gJ01velRyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zZm9ybVR5cGUgPSAnLW1vei10cmFuc2Zvcm0nO1xuICAgICAgICAgICAgXy50cmFuc2l0aW9uVHlwZSA9ICdNb3pUcmFuc2l0aW9uJztcbiAgICAgICAgICAgIGlmIChib2R5U3R5bGUucGVyc3BlY3RpdmVQcm9wZXJ0eSA9PT0gdW5kZWZpbmVkICYmIGJvZHlTdHlsZS5Nb3pQZXJzcGVjdGl2ZSA9PT0gdW5kZWZpbmVkKSBfLmFuaW1UeXBlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJvZHlTdHlsZS53ZWJraXRUcmFuc2Zvcm0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgXy5hbmltVHlwZSA9ICd3ZWJraXRUcmFuc2Zvcm0nO1xuICAgICAgICAgICAgXy50cmFuc2Zvcm1UeXBlID0gJy13ZWJraXQtdHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNpdGlvblR5cGUgPSAnd2Via2l0VHJhbnNpdGlvbic7XG4gICAgICAgICAgICBpZiAoYm9keVN0eWxlLnBlcnNwZWN0aXZlUHJvcGVydHkgPT09IHVuZGVmaW5lZCAmJiBib2R5U3R5bGUud2Via2l0UGVyc3BlY3RpdmUgPT09IHVuZGVmaW5lZCkgXy5hbmltVHlwZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChib2R5U3R5bGUubXNUcmFuc2Zvcm0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgXy5hbmltVHlwZSA9ICdtc1RyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zZm9ybVR5cGUgPSAnLW1zLXRyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zaXRpb25UeXBlID0gJ21zVHJhbnNpdGlvbic7XG4gICAgICAgICAgICBpZiAoYm9keVN0eWxlLm1zVHJhbnNmb3JtID09PSB1bmRlZmluZWQpIF8uYW5pbVR5cGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYm9keVN0eWxlLnRyYW5zZm9ybSAhPT0gdW5kZWZpbmVkICYmIF8uYW5pbVR5cGUgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICBfLmFuaW1UeXBlID0gJ3RyYW5zZm9ybSc7XG4gICAgICAgICAgICBfLnRyYW5zZm9ybVR5cGUgPSAndHJhbnNmb3JtJztcbiAgICAgICAgICAgIF8udHJhbnNpdGlvblR5cGUgPSAndHJhbnNpdGlvbic7XG4gICAgICAgIH1cbiAgICAgICAgXy50cmFuc2Zvcm1zRW5hYmxlZCA9IF8ub3B0aW9ucy51c2VUcmFuc2Zvcm0gJiYgKF8uYW5pbVR5cGUgIT09IG51bGwgJiYgXy5hbmltVHlwZSAhPT0gZmFsc2UpO1xuICAgIH07XG5cblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZXRTbGlkZUNsYXNzZXMgPSBmdW5jdGlvbihpbmRleCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGNlbnRlck9mZnNldCwgYWxsU2xpZGVzLCBpbmRleE9mZnNldCwgcmVtYWluZGVyO1xuXG4gICAgICAgIGFsbFNsaWRlcyA9IF8uJHNsaWRlclxuICAgICAgICAgICAgLmZpbmQoJy5zbGljay1zbGlkZScpXG4gICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLWFjdGl2ZSBzbGljay1jZW50ZXIgc2xpY2stY3VycmVudCcpXG4gICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuXG4gICAgICAgIF8uJHNsaWRlc1xuICAgICAgICAgICAgLmVxKGluZGV4KVxuICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1jdXJyZW50Jyk7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5jZW50ZXJNb2RlID09PSB0cnVlKSB7XG5cbiAgICAgICAgICAgIHZhciBldmVuQ29lZiA9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgJSAyID09PSAwID8gMSA6IDA7XG5cbiAgICAgICAgICAgIGNlbnRlck9mZnNldCA9IE1hdGguZmxvb3IoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIpO1xuXG4gICAgICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSB0cnVlKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPj0gY2VudGVyT2Zmc2V0ICYmIGluZGV4IDw9IChfLnNsaWRlQ291bnQgLSAxKSAtIGNlbnRlck9mZnNldCkge1xuICAgICAgICAgICAgICAgICAgICBfLiRzbGlkZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zbGljZShpbmRleCAtIGNlbnRlck9mZnNldCArIGV2ZW5Db2VmLCBpbmRleCArIGNlbnRlck9mZnNldCArIDEpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaW5kZXhPZmZzZXQgPSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICsgaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIGFsbFNsaWRlc1xuICAgICAgICAgICAgICAgICAgICAgICAgLnNsaWNlKGluZGV4T2Zmc2V0IC0gY2VudGVyT2Zmc2V0ICsgMSArIGV2ZW5Db2VmLCBpbmRleE9mZnNldCArIGNlbnRlck9mZnNldCArIDIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PT0gMCkge1xuXG4gICAgICAgICAgICAgICAgICAgIGFsbFNsaWRlc1xuICAgICAgICAgICAgICAgICAgICAgICAgLmVxKGFsbFNsaWRlcy5sZW5ndGggLSAxIC0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stY2VudGVyJyk7XG5cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGluZGV4ID09PSBfLnNsaWRlQ291bnQgLSAxKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgYWxsU2xpZGVzXG4gICAgICAgICAgICAgICAgICAgICAgICAuZXEoXy5vcHRpb25zLnNsaWRlc1RvU2hvdylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stY2VudGVyJyk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgXy4kc2xpZGVzXG4gICAgICAgICAgICAgICAgLmVxKGluZGV4KVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stY2VudGVyJyk7XG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgaWYgKGluZGV4ID49IDAgJiYgaW5kZXggPD0gKF8uc2xpZGVDb3VudCAtIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpKSB7XG5cbiAgICAgICAgICAgICAgICBfLiRzbGlkZXNcbiAgICAgICAgICAgICAgICAgICAgLnNsaWNlKGluZGV4LCBpbmRleCArIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stYWN0aXZlJylcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYWxsU2xpZGVzLmxlbmd0aCA8PSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgICAgICBhbGxTbGlkZXNcbiAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1hY3RpdmUnKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAnZmFsc2UnKTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgIHJlbWFpbmRlciA9IF8uc2xpZGVDb3VudCAlIF8ub3B0aW9ucy5zbGlkZXNUb1Nob3c7XG4gICAgICAgICAgICAgICAgaW5kZXhPZmZzZXQgPSBfLm9wdGlvbnMuaW5maW5pdGUgPT09IHRydWUgPyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93ICsgaW5kZXggOiBpbmRleDtcblxuICAgICAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuc2xpZGVzVG9TaG93ID09IF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCAmJiAoXy5zbGlkZUNvdW50IC0gaW5kZXgpIDwgXy5vcHRpb25zLnNsaWRlc1RvU2hvdykge1xuXG4gICAgICAgICAgICAgICAgICAgIGFsbFNsaWRlc1xuICAgICAgICAgICAgICAgICAgICAgICAgLnNsaWNlKGluZGV4T2Zmc2V0IC0gKF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgLSByZW1haW5kZXIpLCBpbmRleE9mZnNldCArIHJlbWFpbmRlcilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stYWN0aXZlJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdhcmlhLWhpZGRlbicsICdmYWxzZScpO1xuXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBhbGxTbGlkZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zbGljZShpbmRleE9mZnNldCwgaW5kZXhPZmZzZXQgKyBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzbGljay1hY3RpdmUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2FyaWEtaGlkZGVuJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5sYXp5TG9hZCA9PT0gJ29uZGVtYW5kJyB8fCBfLm9wdGlvbnMubGF6eUxvYWQgPT09ICdhbnRpY2lwYXRlZCcpIHtcbiAgICAgICAgICAgIF8ubGF6eUxvYWQoKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc2V0dXBJbmZpbml0ZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGksIHNsaWRlSW5kZXgsIGluZmluaXRlQ291bnQ7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLm9wdGlvbnMuY2VudGVyTW9kZSA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gdHJ1ZSAmJiBfLm9wdGlvbnMuZmFkZSA9PT0gZmFsc2UpIHtcblxuICAgICAgICAgICAgc2xpZGVJbmRleCA9IG51bGw7XG5cbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5maW5pdGVDb3VudCA9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cgKyAxO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGluZmluaXRlQ291bnQgPSBfLm9wdGlvbnMuc2xpZGVzVG9TaG93O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZvciAoaSA9IF8uc2xpZGVDb3VudDsgaSA+IChfLnNsaWRlQ291bnQgLVxuICAgICAgICAgICAgICAgICAgICAgICAgaW5maW5pdGVDb3VudCk7IGkgLT0gMSkge1xuICAgICAgICAgICAgICAgICAgICBzbGlkZUluZGV4ID0gaSAtIDE7XG4gICAgICAgICAgICAgICAgICAgICQoXy4kc2xpZGVzW3NsaWRlSW5kZXhdKS5jbG9uZSh0cnVlKS5hdHRyKCdpZCcsICcnKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2RhdGEtc2xpY2staW5kZXgnLCBzbGlkZUluZGV4IC0gXy5zbGlkZUNvdW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgLnByZXBlbmRUbyhfLiRzbGlkZVRyYWNrKS5hZGRDbGFzcygnc2xpY2stY2xvbmVkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBpbmZpbml0ZUNvdW50ICArIF8uc2xpZGVDb3VudDsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHNsaWRlSW5kZXggPSBpO1xuICAgICAgICAgICAgICAgICAgICAkKF8uJHNsaWRlc1tzbGlkZUluZGV4XSkuY2xvbmUodHJ1ZSkuYXR0cignaWQnLCAnJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkYXRhLXNsaWNrLWluZGV4Jywgc2xpZGVJbmRleCArIF8uc2xpZGVDb3VudClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmRUbyhfLiRzbGlkZVRyYWNrKS5hZGRDbGFzcygnc2xpY2stY2xvbmVkJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF8uJHNsaWRlVHJhY2suZmluZCgnLnNsaWNrLWNsb25lZCcpLmZpbmQoJ1tpZF0nKS5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmF0dHIoJ2lkJywgJycpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5pbnRlcnJ1cHQgPSBmdW5jdGlvbiggdG9nZ2xlICkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcztcblxuICAgICAgICBpZiggIXRvZ2dsZSApIHtcbiAgICAgICAgICAgIF8uYXV0b1BsYXkoKTtcbiAgICAgICAgfVxuICAgICAgICBfLmludGVycnVwdGVkID0gdG9nZ2xlO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zZWxlY3RIYW5kbGVyID0gZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgdmFyIHRhcmdldEVsZW1lbnQgPVxuICAgICAgICAgICAgJChldmVudC50YXJnZXQpLmlzKCcuc2xpY2stc2xpZGUnKSA/XG4gICAgICAgICAgICAgICAgJChldmVudC50YXJnZXQpIDpcbiAgICAgICAgICAgICAgICAkKGV2ZW50LnRhcmdldCkucGFyZW50cygnLnNsaWNrLXNsaWRlJyk7XG5cbiAgICAgICAgdmFyIGluZGV4ID0gcGFyc2VJbnQodGFyZ2V0RWxlbWVudC5hdHRyKCdkYXRhLXNsaWNrLWluZGV4JykpO1xuXG4gICAgICAgIGlmICghaW5kZXgpIGluZGV4ID0gMDtcblxuICAgICAgICBpZiAoXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoaW5kZXgsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICB9XG5cbiAgICAgICAgXy5zbGlkZUhhbmRsZXIoaW5kZXgpO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zbGlkZUhhbmRsZXIgPSBmdW5jdGlvbihpbmRleCwgc3luYywgZG9udEFuaW1hdGUpIHtcblxuICAgICAgICB2YXIgdGFyZ2V0U2xpZGUsIGFuaW1TbGlkZSwgb2xkU2xpZGUsIHNsaWRlTGVmdCwgdGFyZ2V0TGVmdCA9IG51bGwsXG4gICAgICAgICAgICBfID0gdGhpcywgbmF2VGFyZ2V0O1xuXG4gICAgICAgIHN5bmMgPSBzeW5jIHx8IGZhbHNlO1xuXG4gICAgICAgIGlmIChfLmFuaW1hdGluZyA9PT0gdHJ1ZSAmJiBfLm9wdGlvbnMud2FpdEZvckFuaW1hdGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gdHJ1ZSAmJiBfLmN1cnJlbnRTbGlkZSA9PT0gaW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzeW5jID09PSBmYWxzZSkge1xuICAgICAgICAgICAgXy5hc05hdkZvcihpbmRleCk7XG4gICAgICAgIH1cblxuICAgICAgICB0YXJnZXRTbGlkZSA9IGluZGV4O1xuICAgICAgICB0YXJnZXRMZWZ0ID0gXy5nZXRMZWZ0KHRhcmdldFNsaWRlKTtcbiAgICAgICAgc2xpZGVMZWZ0ID0gXy5nZXRMZWZ0KF8uY3VycmVudFNsaWRlKTtcblxuICAgICAgICBfLmN1cnJlbnRMZWZ0ID0gXy5zd2lwZUxlZnQgPT09IG51bGwgPyBzbGlkZUxlZnQgOiBfLnN3aXBlTGVmdDtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmluZmluaXRlID09PSBmYWxzZSAmJiBfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gZmFsc2UgJiYgKGluZGV4IDwgMCB8fCBpbmRleCA+IF8uZ2V0RG90Q291bnQoKSAqIF8ub3B0aW9ucy5zbGlkZXNUb1Njcm9sbCkpIHtcbiAgICAgICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRTbGlkZSA9IF8uY3VycmVudFNsaWRlO1xuICAgICAgICAgICAgICAgIGlmIChkb250QW5pbWF0ZSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBfLmFuaW1hdGVTbGlkZShzbGlkZUxlZnQsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgXy5wb3N0U2xpZGUodGFyZ2V0U2xpZGUpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBfLnBvc3RTbGlkZSh0YXJnZXRTbGlkZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2UgaWYgKF8ub3B0aW9ucy5pbmZpbml0ZSA9PT0gZmFsc2UgJiYgXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUgJiYgKGluZGV4IDwgMCB8fCBpbmRleCA+IChfLnNsaWRlQ291bnQgLSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpKSkge1xuICAgICAgICAgICAgaWYgKF8ub3B0aW9ucy5mYWRlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHRhcmdldFNsaWRlID0gXy5jdXJyZW50U2xpZGU7XG4gICAgICAgICAgICAgICAgaWYgKGRvbnRBbmltYXRlICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIF8uYW5pbWF0ZVNsaWRlKHNsaWRlTGVmdCwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfLnBvc3RTbGlkZSh0YXJnZXRTbGlkZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF8ucG9zdFNsaWRlKHRhcmdldFNsaWRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIF8ub3B0aW9ucy5hdXRvcGxheSApIHtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoXy5hdXRvUGxheVRpbWVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0YXJnZXRTbGlkZSA8IDApIHtcbiAgICAgICAgICAgIGlmIChfLnNsaWRlQ291bnQgJSBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwgIT09IDApIHtcbiAgICAgICAgICAgICAgICBhbmltU2xpZGUgPSBfLnNsaWRlQ291bnQgLSAoXy5zbGlkZUNvdW50ICUgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYW5pbVNsaWRlID0gXy5zbGlkZUNvdW50ICsgdGFyZ2V0U2xpZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodGFyZ2V0U2xpZGUgPj0gXy5zbGlkZUNvdW50KSB7XG4gICAgICAgICAgICBpZiAoXy5zbGlkZUNvdW50ICUgXy5vcHRpb25zLnNsaWRlc1RvU2Nyb2xsICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgYW5pbVNsaWRlID0gMDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYW5pbVNsaWRlID0gdGFyZ2V0U2xpZGUgLSBfLnNsaWRlQ291bnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhbmltU2xpZGUgPSB0YXJnZXRTbGlkZTtcbiAgICAgICAgfVxuXG4gICAgICAgIF8uYW5pbWF0aW5nID0gdHJ1ZTtcblxuICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcignYmVmb3JlQ2hhbmdlJywgW18sIF8uY3VycmVudFNsaWRlLCBhbmltU2xpZGVdKTtcblxuICAgICAgICBvbGRTbGlkZSA9IF8uY3VycmVudFNsaWRlO1xuICAgICAgICBfLmN1cnJlbnRTbGlkZSA9IGFuaW1TbGlkZTtcblxuICAgICAgICBfLnNldFNsaWRlQ2xhc3NlcyhfLmN1cnJlbnRTbGlkZSk7XG5cbiAgICAgICAgaWYgKCBfLm9wdGlvbnMuYXNOYXZGb3IgKSB7XG5cbiAgICAgICAgICAgIG5hdlRhcmdldCA9IF8uZ2V0TmF2VGFyZ2V0KCk7XG4gICAgICAgICAgICBuYXZUYXJnZXQgPSBuYXZUYXJnZXQuc2xpY2soJ2dldFNsaWNrJyk7XG5cbiAgICAgICAgICAgIGlmICggbmF2VGFyZ2V0LnNsaWRlQ291bnQgPD0gbmF2VGFyZ2V0Lm9wdGlvbnMuc2xpZGVzVG9TaG93ICkge1xuICAgICAgICAgICAgICAgIG5hdlRhcmdldC5zZXRTbGlkZUNsYXNzZXMoXy5jdXJyZW50U2xpZGUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICBfLnVwZGF0ZURvdHMoKTtcbiAgICAgICAgXy51cGRhdGVBcnJvd3MoKTtcblxuICAgICAgICBpZiAoXy5vcHRpb25zLmZhZGUgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGlmIChkb250QW5pbWF0ZSAhPT0gdHJ1ZSkge1xuXG4gICAgICAgICAgICAgICAgXy5mYWRlU2xpZGVPdXQob2xkU2xpZGUpO1xuXG4gICAgICAgICAgICAgICAgXy5mYWRlU2xpZGUoYW5pbVNsaWRlLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgXy5wb3N0U2xpZGUoYW5pbVNsaWRlKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfLnBvc3RTbGlkZShhbmltU2xpZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXy5hbmltYXRlSGVpZ2h0KCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZG9udEFuaW1hdGUgIT09IHRydWUpIHtcbiAgICAgICAgICAgIF8uYW5pbWF0ZVNsaWRlKHRhcmdldExlZnQsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIF8ucG9zdFNsaWRlKGFuaW1TbGlkZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF8ucG9zdFNsaWRlKGFuaW1TbGlkZSk7XG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc3RhcnRMb2FkID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuYXJyb3dzID09PSB0cnVlICYmIF8uc2xpZGVDb3VudCA+IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcblxuICAgICAgICAgICAgXy4kcHJldkFycm93LmhpZGUoKTtcbiAgICAgICAgICAgIF8uJG5leHRBcnJvdy5oaWRlKCk7XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZG90cyA9PT0gdHJ1ZSAmJiBfLnNsaWRlQ291bnQgPiBfLm9wdGlvbnMuc2xpZGVzVG9TaG93KSB7XG5cbiAgICAgICAgICAgIF8uJGRvdHMuaGlkZSgpO1xuXG4gICAgICAgIH1cblxuICAgICAgICBfLiRzbGlkZXIuYWRkQ2xhc3MoJ3NsaWNrLWxvYWRpbmcnKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc3dpcGVEaXJlY3Rpb24gPSBmdW5jdGlvbigpIHtcblxuICAgICAgICB2YXIgeERpc3QsIHlEaXN0LCByLCBzd2lwZUFuZ2xlLCBfID0gdGhpcztcblxuICAgICAgICB4RGlzdCA9IF8udG91Y2hPYmplY3Quc3RhcnRYIC0gXy50b3VjaE9iamVjdC5jdXJYO1xuICAgICAgICB5RGlzdCA9IF8udG91Y2hPYmplY3Quc3RhcnRZIC0gXy50b3VjaE9iamVjdC5jdXJZO1xuICAgICAgICByID0gTWF0aC5hdGFuMih5RGlzdCwgeERpc3QpO1xuXG4gICAgICAgIHN3aXBlQW5nbGUgPSBNYXRoLnJvdW5kKHIgKiAxODAgLyBNYXRoLlBJKTtcbiAgICAgICAgaWYgKHN3aXBlQW5nbGUgPCAwKSB7XG4gICAgICAgICAgICBzd2lwZUFuZ2xlID0gMzYwIC0gTWF0aC5hYnMoc3dpcGVBbmdsZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoKHN3aXBlQW5nbGUgPD0gNDUpICYmIChzd2lwZUFuZ2xlID49IDApKSB7XG4gICAgICAgICAgICByZXR1cm4gKF8ub3B0aW9ucy5ydGwgPT09IGZhbHNlID8gJ2xlZnQnIDogJ3JpZ2h0Jyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChzd2lwZUFuZ2xlIDw9IDM2MCkgJiYgKHN3aXBlQW5nbGUgPj0gMzE1KSkge1xuICAgICAgICAgICAgcmV0dXJuIChfLm9wdGlvbnMucnRsID09PSBmYWxzZSA/ICdsZWZ0JyA6ICdyaWdodCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoc3dpcGVBbmdsZSA+PSAxMzUpICYmIChzd2lwZUFuZ2xlIDw9IDIyNSkpIHtcbiAgICAgICAgICAgIHJldHVybiAoXy5vcHRpb25zLnJ0bCA9PT0gZmFsc2UgPyAncmlnaHQnIDogJ2xlZnQnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsU3dpcGluZyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgaWYgKChzd2lwZUFuZ2xlID49IDM1KSAmJiAoc3dpcGVBbmdsZSA8PSAxMzUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdkb3duJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICd1cCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJ3ZlcnRpY2FsJztcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc3dpcGVFbmQgPSBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIHNsaWRlQ291bnQsXG4gICAgICAgICAgICBkaXJlY3Rpb247XG5cbiAgICAgICAgXy5kcmFnZ2luZyA9IGZhbHNlO1xuICAgICAgICBfLnN3aXBpbmcgPSBmYWxzZTtcblxuICAgICAgICBpZiAoXy5zY3JvbGxpbmcpIHtcbiAgICAgICAgICAgIF8uc2Nyb2xsaW5nID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBfLmludGVycnVwdGVkID0gZmFsc2U7XG4gICAgICAgIF8uc2hvdWxkQ2xpY2sgPSAoIF8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGggPiAxMCApID8gZmFsc2UgOiB0cnVlO1xuXG4gICAgICAgIGlmICggXy50b3VjaE9iamVjdC5jdXJYID09PSB1bmRlZmluZWQgKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIF8udG91Y2hPYmplY3QuZWRnZUhpdCA9PT0gdHJ1ZSApIHtcbiAgICAgICAgICAgIF8uJHNsaWRlci50cmlnZ2VyKCdlZGdlJywgW18sIF8uc3dpcGVEaXJlY3Rpb24oKSBdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggXy50b3VjaE9iamVjdC5zd2lwZUxlbmd0aCA+PSBfLnRvdWNoT2JqZWN0Lm1pblN3aXBlICkge1xuXG4gICAgICAgICAgICBkaXJlY3Rpb24gPSBfLnN3aXBlRGlyZWN0aW9uKCk7XG5cbiAgICAgICAgICAgIHN3aXRjaCAoIGRpcmVjdGlvbiApIHtcblxuICAgICAgICAgICAgICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ2Rvd24nOlxuXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlQ291bnQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zLnN3aXBlVG9TbGlkZSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5jaGVja05hdmlnYWJsZSggXy5jdXJyZW50U2xpZGUgKyBfLmdldFNsaWRlQ291bnQoKSApIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSArIF8uZ2V0U2xpZGVDb3VudCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIF8uY3VycmVudERpcmVjdGlvbiA9IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgICAgICAgICAgY2FzZSAndXAnOlxuXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlQ291bnQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgXy5vcHRpb25zLnN3aXBlVG9TbGlkZSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXy5jaGVja05hdmlnYWJsZSggXy5jdXJyZW50U2xpZGUgLSBfLmdldFNsaWRlQ291bnQoKSApIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmN1cnJlbnRTbGlkZSAtIF8uZ2V0U2xpZGVDb3VudCgpO1xuXG4gICAgICAgICAgICAgICAgICAgIF8uY3VycmVudERpcmVjdGlvbiA9IDE7XG5cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuXG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYoIGRpcmVjdGlvbiAhPSAndmVydGljYWwnICkge1xuXG4gICAgICAgICAgICAgICAgXy5zbGlkZUhhbmRsZXIoIHNsaWRlQ291bnQgKTtcbiAgICAgICAgICAgICAgICBfLnRvdWNoT2JqZWN0ID0ge307XG4gICAgICAgICAgICAgICAgXy4kc2xpZGVyLnRyaWdnZXIoJ3N3aXBlJywgW18sIGRpcmVjdGlvbiBdKTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIGlmICggXy50b3VjaE9iamVjdC5zdGFydFggIT09IF8udG91Y2hPYmplY3QuY3VyWCApIHtcblxuICAgICAgICAgICAgICAgIF8uc2xpZGVIYW5kbGVyKCBfLmN1cnJlbnRTbGlkZSApO1xuICAgICAgICAgICAgICAgIF8udG91Y2hPYmplY3QgPSB7fTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUuc3dpcGVIYW5kbGVyID0gZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgICAgICB2YXIgXyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKChfLm9wdGlvbnMuc3dpcGUgPT09IGZhbHNlKSB8fCAoJ29udG91Y2hlbmQnIGluIGRvY3VtZW50ICYmIF8ub3B0aW9ucy5zd2lwZSA9PT0gZmFsc2UpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSBpZiAoXy5vcHRpb25zLmRyYWdnYWJsZSA9PT0gZmFsc2UgJiYgZXZlbnQudHlwZS5pbmRleE9mKCdtb3VzZScpICE9PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgXy50b3VjaE9iamVjdC5maW5nZXJDb3VudCA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQgJiYgZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzICE9PSB1bmRlZmluZWQgP1xuICAgICAgICAgICAgZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzLmxlbmd0aCA6IDE7XG5cbiAgICAgICAgXy50b3VjaE9iamVjdC5taW5Td2lwZSA9IF8ubGlzdFdpZHRoIC8gXy5vcHRpb25zXG4gICAgICAgICAgICAudG91Y2hUaHJlc2hvbGQ7XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbFN3aXBpbmcgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8udG91Y2hPYmplY3QubWluU3dpcGUgPSBfLmxpc3RIZWlnaHQgLyBfLm9wdGlvbnNcbiAgICAgICAgICAgICAgICAudG91Y2hUaHJlc2hvbGQ7XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKGV2ZW50LmRhdGEuYWN0aW9uKSB7XG5cbiAgICAgICAgICAgIGNhc2UgJ3N0YXJ0JzpcbiAgICAgICAgICAgICAgICBfLnN3aXBlU3RhcnQoZXZlbnQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdtb3ZlJzpcbiAgICAgICAgICAgICAgICBfLnN3aXBlTW92ZShldmVudCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ2VuZCc6XG4gICAgICAgICAgICAgICAgXy5zd2lwZUVuZChldmVudCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS5zd2lwZU1vdmUgPSBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIGVkZ2VXYXNIaXQgPSBmYWxzZSxcbiAgICAgICAgICAgIGN1ckxlZnQsIHN3aXBlRGlyZWN0aW9uLCBzd2lwZUxlbmd0aCwgcG9zaXRpb25PZmZzZXQsIHRvdWNoZXMsIHZlcnRpY2FsU3dpcGVMZW5ndGg7XG5cbiAgICAgICAgdG91Y2hlcyA9IGV2ZW50Lm9yaWdpbmFsRXZlbnQgIT09IHVuZGVmaW5lZCA/IGV2ZW50Lm9yaWdpbmFsRXZlbnQudG91Y2hlcyA6IG51bGw7XG5cbiAgICAgICAgaWYgKCFfLmRyYWdnaW5nIHx8IF8uc2Nyb2xsaW5nIHx8IHRvdWNoZXMgJiYgdG91Y2hlcy5sZW5ndGggIT09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGN1ckxlZnQgPSBfLmdldExlZnQoXy5jdXJyZW50U2xpZGUpO1xuXG4gICAgICAgIF8udG91Y2hPYmplY3QuY3VyWCA9IHRvdWNoZXMgIT09IHVuZGVmaW5lZCA/IHRvdWNoZXNbMF0ucGFnZVggOiBldmVudC5jbGllbnRYO1xuICAgICAgICBfLnRvdWNoT2JqZWN0LmN1clkgPSB0b3VjaGVzICE9PSB1bmRlZmluZWQgPyB0b3VjaGVzWzBdLnBhZ2VZIDogZXZlbnQuY2xpZW50WTtcblxuICAgICAgICBfLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoID0gTWF0aC5yb3VuZChNYXRoLnNxcnQoXG4gICAgICAgICAgICBNYXRoLnBvdyhfLnRvdWNoT2JqZWN0LmN1clggLSBfLnRvdWNoT2JqZWN0LnN0YXJ0WCwgMikpKTtcblxuICAgICAgICB2ZXJ0aWNhbFN3aXBlTGVuZ3RoID0gTWF0aC5yb3VuZChNYXRoLnNxcnQoXG4gICAgICAgICAgICBNYXRoLnBvdyhfLnRvdWNoT2JqZWN0LmN1clkgLSBfLnRvdWNoT2JqZWN0LnN0YXJ0WSwgMikpKTtcblxuICAgICAgICBpZiAoIV8ub3B0aW9ucy52ZXJ0aWNhbFN3aXBpbmcgJiYgIV8uc3dpcGluZyAmJiB2ZXJ0aWNhbFN3aXBlTGVuZ3RoID4gNCkge1xuICAgICAgICAgICAgXy5zY3JvbGxpbmcgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbFN3aXBpbmcgPT09IHRydWUpIHtcbiAgICAgICAgICAgIF8udG91Y2hPYmplY3Quc3dpcGVMZW5ndGggPSB2ZXJ0aWNhbFN3aXBlTGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgc3dpcGVEaXJlY3Rpb24gPSBfLnN3aXBlRGlyZWN0aW9uKCk7XG5cbiAgICAgICAgaWYgKGV2ZW50Lm9yaWdpbmFsRXZlbnQgIT09IHVuZGVmaW5lZCAmJiBfLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoID4gNCkge1xuICAgICAgICAgICAgXy5zd2lwaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBwb3NpdGlvbk9mZnNldCA9IChfLm9wdGlvbnMucnRsID09PSBmYWxzZSA/IDEgOiAtMSkgKiAoXy50b3VjaE9iamVjdC5jdXJYID4gXy50b3VjaE9iamVjdC5zdGFydFggPyAxIDogLTEpO1xuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsU3dpcGluZyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcG9zaXRpb25PZmZzZXQgPSBfLnRvdWNoT2JqZWN0LmN1clkgPiBfLnRvdWNoT2JqZWN0LnN0YXJ0WSA/IDEgOiAtMTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgc3dpcGVMZW5ndGggPSBfLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoO1xuXG4gICAgICAgIF8udG91Y2hPYmplY3QuZWRnZUhpdCA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuaW5maW5pdGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBpZiAoKF8uY3VycmVudFNsaWRlID09PSAwICYmIHN3aXBlRGlyZWN0aW9uID09PSAncmlnaHQnKSB8fCAoXy5jdXJyZW50U2xpZGUgPj0gXy5nZXREb3RDb3VudCgpICYmIHN3aXBlRGlyZWN0aW9uID09PSAnbGVmdCcpKSB7XG4gICAgICAgICAgICAgICAgc3dpcGVMZW5ndGggPSBfLnRvdWNoT2JqZWN0LnN3aXBlTGVuZ3RoICogXy5vcHRpb25zLmVkZ2VGcmljdGlvbjtcbiAgICAgICAgICAgICAgICBfLnRvdWNoT2JqZWN0LmVkZ2VIaXQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8ub3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIF8uc3dpcGVMZWZ0ID0gY3VyTGVmdCArIHN3aXBlTGVuZ3RoICogcG9zaXRpb25PZmZzZXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfLnN3aXBlTGVmdCA9IGN1ckxlZnQgKyAoc3dpcGVMZW5ndGggKiAoXy4kbGlzdC5oZWlnaHQoKSAvIF8ubGlzdFdpZHRoKSkgKiBwb3NpdGlvbk9mZnNldDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXy5vcHRpb25zLnZlcnRpY2FsU3dpcGluZyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgXy5zd2lwZUxlZnQgPSBjdXJMZWZ0ICsgc3dpcGVMZW5ndGggKiBwb3NpdGlvbk9mZnNldDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLm9wdGlvbnMuZmFkZSA9PT0gdHJ1ZSB8fCBfLm9wdGlvbnMudG91Y2hNb3ZlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8uYW5pbWF0aW5nID09PSB0cnVlKSB7XG4gICAgICAgICAgICBfLnN3aXBlTGVmdCA9IG51bGw7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBfLnNldENTUyhfLnN3aXBlTGVmdCk7XG5cbiAgICB9O1xuXG4gICAgU2xpY2sucHJvdG90eXBlLnN3aXBlU3RhcnQgPSBmdW5jdGlvbihldmVudCkge1xuXG4gICAgICAgIHZhciBfID0gdGhpcyxcbiAgICAgICAgICAgIHRvdWNoZXM7XG5cbiAgICAgICAgXy5pbnRlcnJ1cHRlZCA9IHRydWU7XG5cbiAgICAgICAgaWYgKF8udG91Y2hPYmplY3QuZmluZ2VyQ291bnQgIT09IDEgfHwgXy5zbGlkZUNvdW50IDw9IF8ub3B0aW9ucy5zbGlkZXNUb1Nob3cpIHtcbiAgICAgICAgICAgIF8udG91Y2hPYmplY3QgPSB7fTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChldmVudC5vcmlnaW5hbEV2ZW50ICE9PSB1bmRlZmluZWQgJiYgZXZlbnQub3JpZ2luYWxFdmVudC50b3VjaGVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRvdWNoZXMgPSBldmVudC5vcmlnaW5hbEV2ZW50LnRvdWNoZXNbMF07XG4gICAgICAgIH1cblxuICAgICAgICBfLnRvdWNoT2JqZWN0LnN0YXJ0WCA9IF8udG91Y2hPYmplY3QuY3VyWCA9IHRvdWNoZXMgIT09IHVuZGVmaW5lZCA/IHRvdWNoZXMucGFnZVggOiBldmVudC5jbGllbnRYO1xuICAgICAgICBfLnRvdWNoT2JqZWN0LnN0YXJ0WSA9IF8udG91Y2hPYmplY3QuY3VyWSA9IHRvdWNoZXMgIT09IHVuZGVmaW5lZCA/IHRvdWNoZXMucGFnZVkgOiBldmVudC5jbGllbnRZO1xuXG4gICAgICAgIF8uZHJhZ2dpbmcgPSB0cnVlO1xuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS51bmZpbHRlclNsaWRlcyA9IFNsaWNrLnByb3RvdHlwZS5zbGlja1VuZmlsdGVyID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLiRzbGlkZXNDYWNoZSAhPT0gbnVsbCkge1xuXG4gICAgICAgICAgICBfLnVubG9hZCgpO1xuXG4gICAgICAgICAgICBfLiRzbGlkZVRyYWNrLmNoaWxkcmVuKHRoaXMub3B0aW9ucy5zbGlkZSkuZGV0YWNoKCk7XG5cbiAgICAgICAgICAgIF8uJHNsaWRlc0NhY2hlLmFwcGVuZFRvKF8uJHNsaWRlVHJhY2spO1xuXG4gICAgICAgICAgICBfLnJlaW5pdCgpO1xuXG4gICAgICAgIH1cblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUudW5sb2FkID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgICQoJy5zbGljay1jbG9uZWQnLCBfLiRzbGlkZXIpLnJlbW92ZSgpO1xuXG4gICAgICAgIGlmIChfLiRkb3RzKSB7XG4gICAgICAgICAgICBfLiRkb3RzLnJlbW92ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF8uJHByZXZBcnJvdyAmJiBfLmh0bWxFeHByLnRlc3QoXy5vcHRpb25zLnByZXZBcnJvdykpIHtcbiAgICAgICAgICAgIF8uJHByZXZBcnJvdy5yZW1vdmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfLiRuZXh0QXJyb3cgJiYgXy5odG1sRXhwci50ZXN0KF8ub3B0aW9ucy5uZXh0QXJyb3cpKSB7XG4gICAgICAgICAgICBfLiRuZXh0QXJyb3cucmVtb3ZlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBfLiRzbGlkZXNcbiAgICAgICAgICAgIC5yZW1vdmVDbGFzcygnc2xpY2stc2xpZGUgc2xpY2stYWN0aXZlIHNsaWNrLXZpc2libGUgc2xpY2stY3VycmVudCcpXG4gICAgICAgICAgICAuYXR0cignYXJpYS1oaWRkZW4nLCAndHJ1ZScpXG4gICAgICAgICAgICAuY3NzKCd3aWR0aCcsICcnKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUudW5zbGljayA9IGZ1bmN0aW9uKGZyb21CcmVha3BvaW50KSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuICAgICAgICBfLiRzbGlkZXIudHJpZ2dlcigndW5zbGljaycsIFtfLCBmcm9tQnJlYWtwb2ludF0pO1xuICAgICAgICBfLmRlc3Ryb3koKTtcblxuICAgIH07XG5cbiAgICBTbGljay5wcm90b3R5cGUudXBkYXRlQXJyb3dzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgY2VudGVyT2Zmc2V0O1xuXG4gICAgICAgIGNlbnRlck9mZnNldCA9IE1hdGguZmxvb3IoXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAvIDIpO1xuXG4gICAgICAgIGlmICggXy5vcHRpb25zLmFycm93cyA9PT0gdHJ1ZSAmJlxuICAgICAgICAgICAgXy5zbGlkZUNvdW50ID4gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAmJlxuICAgICAgICAgICAgIV8ub3B0aW9ucy5pbmZpbml0ZSApIHtcblxuICAgICAgICAgICAgXy4kcHJldkFycm93LnJlbW92ZUNsYXNzKCdzbGljay1kaXNhYmxlZCcpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAnZmFsc2UnKTtcbiAgICAgICAgICAgIF8uJG5leHRBcnJvdy5yZW1vdmVDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgIGlmIChfLmN1cnJlbnRTbGlkZSA9PT0gMCkge1xuXG4gICAgICAgICAgICAgICAgXy4kcHJldkFycm93LmFkZENsYXNzKCdzbGljay1kaXNhYmxlZCcpLmF0dHIoJ2FyaWEtZGlzYWJsZWQnLCAndHJ1ZScpO1xuICAgICAgICAgICAgICAgIF8uJG5leHRBcnJvdy5yZW1vdmVDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ2ZhbHNlJyk7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXy5jdXJyZW50U2xpZGUgPj0gXy5zbGlkZUNvdW50IC0gXy5vcHRpb25zLnNsaWRlc1RvU2hvdyAmJiBfLm9wdGlvbnMuY2VudGVyTW9kZSA9PT0gZmFsc2UpIHtcblxuICAgICAgICAgICAgICAgIF8uJG5leHRBcnJvdy5hZGRDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ3RydWUnKTtcbiAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJykuYXR0cignYXJpYS1kaXNhYmxlZCcsICdmYWxzZScpO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKF8uY3VycmVudFNsaWRlID49IF8uc2xpZGVDb3VudCAtIDEgJiYgXy5vcHRpb25zLmNlbnRlck1vZGUgPT09IHRydWUpIHtcblxuICAgICAgICAgICAgICAgIF8uJG5leHRBcnJvdy5hZGRDbGFzcygnc2xpY2stZGlzYWJsZWQnKS5hdHRyKCdhcmlhLWRpc2FibGVkJywgJ3RydWUnKTtcbiAgICAgICAgICAgICAgICBfLiRwcmV2QXJyb3cucmVtb3ZlQ2xhc3MoJ3NsaWNrLWRpc2FibGVkJykuYXR0cignYXJpYS1kaXNhYmxlZCcsICdmYWxzZScpO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS51cGRhdGVEb3RzID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmIChfLiRkb3RzICE9PSBudWxsKSB7XG5cbiAgICAgICAgICAgIF8uJGRvdHNcbiAgICAgICAgICAgICAgICAuZmluZCgnbGknKVxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoJ3NsaWNrLWFjdGl2ZScpXG4gICAgICAgICAgICAgICAgICAgIC5lbmQoKTtcblxuICAgICAgICAgICAgXy4kZG90c1xuICAgICAgICAgICAgICAgIC5maW5kKCdsaScpXG4gICAgICAgICAgICAgICAgLmVxKE1hdGguZmxvb3IoXy5jdXJyZW50U2xpZGUgLyBfLm9wdGlvbnMuc2xpZGVzVG9TY3JvbGwpKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnc2xpY2stYWN0aXZlJyk7XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIFNsaWNrLnByb3RvdHlwZS52aXNpYmlsaXR5ID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgdmFyIF8gPSB0aGlzO1xuXG4gICAgICAgIGlmICggXy5vcHRpb25zLmF1dG9wbGF5ICkge1xuXG4gICAgICAgICAgICBpZiAoIGRvY3VtZW50W18uaGlkZGVuXSApIHtcblxuICAgICAgICAgICAgICAgIF8uaW50ZXJydXB0ZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgXy5pbnRlcnJ1cHRlZCA9IGZhbHNlO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgICQuZm4uc2xpY2sgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIF8gPSB0aGlzLFxuICAgICAgICAgICAgb3B0ID0gYXJndW1lbnRzWzBdLFxuICAgICAgICAgICAgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSksXG4gICAgICAgICAgICBsID0gXy5sZW5ndGgsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgcmV0O1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG9wdCA9PSAnb2JqZWN0JyB8fCB0eXBlb2Ygb3B0ID09ICd1bmRlZmluZWQnKVxuICAgICAgICAgICAgICAgIF9baV0uc2xpY2sgPSBuZXcgU2xpY2soX1tpXSwgb3B0KTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICByZXQgPSBfW2ldLnNsaWNrW29wdF0uYXBwbHkoX1tpXS5zbGljaywgYXJncyk7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHJldCAhPSAndW5kZWZpbmVkJykgcmV0dXJuIHJldDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gXztcbiAgICB9O1xuXG59KSk7Il19
